<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ElasticSearch 操作异常总结</title>
    <url>/2021/12/15/ElasticSearch-%E6%93%8D%E4%BD%9C%E5%BC%82%E5%B8%B8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="index-写入数据-forbidden-问题">1. Index 写入数据 FORBIDDEN 问题</h1>
<h2 id="问题描述">1.1 问题描述</h2>
<p>在使用七牛云的 Logkit 往 ElasticSearch 发送数据的时候出现了以下异常信息；</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># SendError: bulk failed with last error</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;_index&quot;</span>:<span class="string">&quot;dev_cbim_tool_log&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_type&quot;</span>:<span class="string">&quot;cbim_tool_log&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;UhoDvX0B7FSmwLI_OPym&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;status&quot;</span>:<span class="number">403</span>,</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;cluster_block_exception&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;reason&quot;</span>:<span class="string">&quot;blocked by: [FORBIDDEN/12/index read-only / allow delete (api)];&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># failDatas size : <span class="number">33</span>	</span><br></pre></td></tr></table></figure>
<p>其核心异常提示是：[FORBIDDEN/12/index read-only / allow delete (api)]</p>
<span id="more"></span>
<h2 id="原因分析">1.2 原因分析</h2>
<p>从字面意思看，ES 禁止数据写入；</p>
<p>联想到最近服务器发生的一系列问题，一切都能解释的通了；</p>
<p>最近发现：ES 集群的一个节点挂了（主要是因为服务器的磁盘坏了）；</p>
<p>在这样的情况下，触发了 ES 的保护机制，因此出现了上面的情况；</p>
<h2 id="解决方法">1.3 解决方法</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -XPUT -H &quot;Content-Type: application/json&quot; http://localhost:9200/_all/_settings -d &#x27;&#123;&quot;index.blocks.read_only_allow_delete&quot;: null&#125;&#x27;</span><br></pre></td></tr></table></figure>
<p>参考链接：[如何修复 ElasticSearch <a href="https://techoverflow.net/2019/04/17/how-to-fix-elasticsearch-forbidden-12-index-read-only-allow-delete-api/">FORBIDDEN/12/index read-only / allow delete （api）] – TechOverflow</a></p>
<h1 id="elasticsearch-启动参数问题">2. ElasticSearch 启动参数问题</h1>
<p>通过 docker 启动 es 的时候，相关参数设置跟 es 的镜像版本有关；</p>
<p>这里主要说明常见的各种 es 设置问题</p>
<h2 id="unknown-setting-discovery.seed_hosts">2.1 unknown setting [discovery.seed_hosts]</h2>
<h3 id="产生背景">产生背景</h3>
<p>使用2019年的老脚本启动 es 的 docker 实例；</p>
<p>注：笔者是 2021.12.15 pull 最新的 es 镜像启动实例的，启动实例使用的参数是 2019 年底时的；</p>
<h3 id="原因">原因</h3>
<p>2019 年底的 es 镜像和 2021 年的镜像文件参数设置不一致，</p>
<p>可以通过 dock inspect elasticsearch 查看</p>
<h3 id="解决方法-1">解决方法</h3>
<p>使用下面的配置替代</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">discovery.zen.ping.unicast.hosts:</span> [<span class="string">&quot;192.168.10.11:9300&quot;</span>,<span class="string">&quot;192.168.10.12:9300&quot;</span>,<span class="string">&quot;192.168.10.13:9300&quot;</span>]</span><br></pre></td></tr></table></figure>
<p><font color="red">注意：启动脚本，最好跟 docker 镜像配套使用</font></p>
<h3 id="类似的问题">类似的问题</h3>
<p>unknown setting [cluster.initial_master_nodes]</p>
<h2 id="es-缓存设置">2.2 ES 缓存设置</h2>
<p>默认设置：ES_JAVA_OPTS="-Xms256m -Xmx256m"</p>
<p>启动的时候可以加 -e 指定参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-e ES_JAVA_OPTS=&quot;-Xms1g -Xmx1g&quot;</span><br></pre></td></tr></table></figure>
<p>设置过大可能导致本机缓存不够，启动时有如下错误提示：</p>
<blockquote>
<p>max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</p>
</blockquote>
<p>解决方法：修改 centos 系统的缓存设置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. open and edit conf</span></span><br><span class="line">vi /etc/sysctl.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. add at last vm.max_map_count=262144</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. apply</span></span><br><span class="line">/sbin/sysctl -p</span><br></pre></td></tr></table></figure>
<h1 id="elasticsearch-集群状态排查">3. ElasticSearch 集群状态排查</h1>
<p><a href="https://blog.csdn.net/laoyang360/article/details/109699085">Elasticsearch 集群故障排查及修复指南_铭毅天下（公众号同名）-CSDN博客</a></p>
<h1 id="es-索引-primary-shard-is-unassigned-解决方法">4. ES 索引 primary shard is unassigned 解决方法</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /_cluster/reroute</span><br><span class="line">&#123;</span><br><span class="line">  &quot;commands&quot; : [</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;allocate_stale_primary&quot; : &#123;</span><br><span class="line">    &quot;index&quot; : &quot;.monitoring-kibana-6-2021.12.17&quot;, </span><br><span class="line">    &quot;shard&quot; : 0,</span><br><span class="line">    &quot;node&quot; : &quot;es-node-2&quot;,</span><br><span class="line">    &quot;accept_data_loss&quot; : true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>[ES 遇到 unassigned shard如何处理？_weixin_34050519的博客-CSDN博客](https://blog.csdn.net/weixin_34050519/article/details/85936609)</p>
<p><a href="https://blog.csdn.net/dlm_bk/article/details/102840031">解决elasticsearch分片unassigned的3个方法_dlm_bk的博客-CSDN博客_es分片unassigned</a></p>
]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next Theme 使用问题总结</title>
    <url>/2021/12/21/Hexo-Next-Theme-%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="note info"><p>两个路径说明：</p>
<p>site root directory：博客站点根目录</p>
<p>theme root directory：博客主题根目录</p>
<p>后面说明问题会一直沿用这中叫法；</p>
</div>
<h1 id="部署后搜索功能无法使用">1. 部署后“搜索”功能无法使用</h1>
<p><strong>原因</strong></p>
<p>使用了最新的 master 版本，master 分支是主题作者的开发分支，每周都会更新，当时不稳定</p>
<span id="more"></span>
<p><strong>解决方法</strong></p>
<p>拉去稳定版本的分支，主要看最新的 Tag</p>
<p>参考 Issues 链接：https://github.com/hexojs/hexo/issues/4654</p>
<h1 id="替换图片资源路径">2. 替换图片资源路径</h1>
<p>主题涉及到的，各种图片资源都是可以替换的，</p>
<p>**替换路径：theme root directory*</p>
<p>为了显示效果，注意替换的图片最好是对应像素的，而且不易过大，图片类型可以自己修改</p>
<p>可替换图片说明：</p>
<table>
<thead>
<tr class="header">
<th>图片名称</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>avatar</td>
<td>博主图像</td>
</tr>
<tr class="even">
<td>favicon-16x16-next</td>
<td>网站图标 16x16 像素</td>
</tr>
<tr class="odd">
<td>favicon-32x32-next</td>
<td>网站图标 32x32 像素</td>
</tr>
<tr class="even">
<td>logo</td>
<td>log</td>
</tr>
<tr class="odd">
<td>apple-touch-icon-next</td>
<td>触摸图标</td>
</tr>
<tr class="even">
<td>alipay</td>
<td>支付宝收款二维码</td>
</tr>
<tr class="odd">
<td>weixin</td>
<td>微信收款二维码</td>
</tr>
</tbody>
</table>
<h1 id="增加自定义的标签分类页面">3. 增加自定义的“标签”，“分类”页面</h1>
<p>默认安装好的 next 主题，是没有“标签”，“分类”页面的；</p>
<p>需要使用者自己新增页面：</p>
<p>新增方法：以“标签”也为例说明：</p>
<ol type="1">
<li><p>使用 hexo 命令新建 tags.md页面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> site root directory</span></span><br><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure></li>
<li><p>打开 tags.md 并修改页面类型 type 信息</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">title</span>: Tags</span><br><span class="line"><span class="attribute">date</span>: <span class="number">2021</span>-<span class="number">12</span>-<span class="number">22</span> <span class="number">12</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="attribute">type</span>: tags</span><br></pre></td></tr></table></figure></li>
<li><p>修改主题配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd next/_config.yml</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="开启首页文章部分显示">4. 开启首页文章部分显示</h1>
<p>next 主题默认的是将你的文章全篇显示在自己的首页上，这就会导致一个问题，首页各个文章太长了不利于翻阅</p>
<p>想要让文章部分显示，并出现“阅读全文的按钮”，只需要在个人的文章 Markdown 源文件中添加一行代码就行</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--more--&gt;</span></span><br></pre></td></tr></table></figure>
<p>具体位置，自己确定，在自己想要显示的文章部分下面加上即可只在首页显示所需的文章部分。</p>
<p>参考文档：</p>
<p><a href="https://theme-next.js.org/docs/theme-settings/custom-pages.html?highlight=categories#Adding-«Tags»-Page">Custom Pages | NexT (theme-next.js.org)</a></p>
<p><a href="https://github.com/iissnan/hexo-theme-next/wiki/创建分类页面">创建分类页面 · iissnan/hexo-theme-next Wiki (github.com)</a></p>
<p><a href="https://knner.wang/2019/11/03/Hexo-ThemeNext-Writing.html">Hexo + Theme Next -- 写作 | Knner.Wang's Blog</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>Hexo Theme</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Theme</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 集成 PicGo Github 图床</title>
    <url>/2022/01/20/Hexo-%E9%9B%86%E6%88%90-PicGo-Github-%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h1 id="背景说明">0、背景说明</h1>
<p>博主原来使用七牛云图床，好处：10G 免费空间；坏处：域名有效期一个月；超出一个月就没法使用了；</p>
<p>因而转向了其他图床，发现 PicGo 中支持的图床有 Github，觉得是一个不错的选择</p>
<p>使用 Github 图床的好处：</p>
<ol type="1">
<li>没有域名限制；</li>
<li>仓库虽然空间有限（1G），但是满了可以再新建一个仓库，因此相当于无限</li>
<li>有人说慢，但是可以设置加速</li>
<li>稳定，不用担心挂了或者失效</li>
</ol>
<span id="more"></span>
<p>参考：</p>
<p><a href="https://www.cnblogs.com/52duan/p/12551393.html">MarkDown、Hexo博客、Coding托管、GitHub做图床、CDN加速 - 段十三 - 博客园 (cnblogs.com)</a></p>
<h1 id="新建一个仓库">1、新建一个仓库</h1>
<ol type="1">
<li>名字自定义，例如：pic_bed</li>
<li>选择 Public</li>
<li>勾选初始化复选框： Initialize this repository with a README</li>
<li>点击 Create repository 创建成功</li>
<li><a href="https://github.com/settings/tokens/new">New personal access token (github.com)</a> 配置图床的时候要用：</li>
<li>Note下面的文本框内容自定义</li>
<li>下面很多复选框，只需要勾选 repo 也就是第一个复选框</li>
<li>最下面点击Generate token即可生成</li>
<li>下面要用，如果忘记了可以在重新生成</li>
</ol>
<h1 id="安装配置-picgo">2、安装配置 <a href="https://molunerfinn.com/PicGo/">PicGo</a></h1>
<p>下载安装，这里不再说明，</p>
<p>安装后启动 PicGo，找到 Github 图床，如下图所示：</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220120182829709.png" alt="image-20220120182829709" /><figcaption aria-hidden="true">image-20220120182829709</figcaption>
</figure>
<p>填写第一步中创建的 仓库名，分支名，以及 Token</p>
<p>然后“确定”，并设置为默认图床即可</p>
<h1 id="配置-jsdeliv给图片镶上加速器">3、配置 JsDeliv，给图片镶上加速器</h1>
<ul>
<li>比如在GitHub的图片路径是：https://github.com/user/pic_bed/img/test_image.png</li>
<li>拼接链接方法1：https://cdn.jsdelivr.net/gh/user/pic_bed@latest/img/test_image.png</li>
<li>拼接链接方法2：https://cdn.jsdelivr.net/gh/user/pic_bed/img/test_image.png</li>
</ul>
<p><strong>将方法1和方法2拼接起来的链接前缀输入到上图第5步的自定义域名中即可</strong></p>
<ul>
<li>拼接链接方法1：https://cdn.jsdelivr.net/gh/user/pic_bed@latest/</li>
<li>拼接链接方法2：https://cdn.jsdelivr.net/gh/user/pic_bed/</li>
</ul>
<h1 id="再-typora-中选择-picgo-app-作为图片上传服务">4、再 Typora 中选择 PicGo app 作为图片上传服务</h1>
<p><a href="https://buctllx.github.io/2021/12/06/Typora-设置关联七牛云图床/#3-Typora-图片存储设置">Typora 设置关联七牛云图床 | ConorLuo 博客 (buctllx.github.io)</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>PicGo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>PicGo</tag>
      </tags>
  </entry>
  <entry>
    <title>Microsoft.Toolkit.Mvvm 使用记录</title>
    <url>/2022/03/16/Microsoft-Toolkit-Mvvm-%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="microsoft.toolkit.mvvm-介绍">1. Microsoft.Toolkit.Mvvm 介绍</h1>
<blockquote>
<p>模型-视图-视图模型 (MVVM) 是用于解耦 UI 代码和非 UI 代码的 UI 体系结构设计模式。 借助 MVVM，可以在 XAML 中以声明方式定义 UI，并使用数据绑定标记将 UI 链接到包含数据和命令的其他层。</p>
</blockquote>
<p>MVVM 最早是 Microsoft 提出来的，但是官方一直没有提供框架；很多人会说 Prism 框架，但是 Prism 已经出走了，而且比较臃肿；至于 MVVMLight 也很久没有更新了，直到 2020 年 Windows Community Toolkit 开源了一套 MVVM 框架 Microsoft.Toolkit.Mvvm。</p>
<span id="more"></span>
<p>Windows Community Toolkit 除了提供开源框架，也贴心的在文档中提供了，基本的使用案例，以及从其他 MVVM 框架迁移到 Microsoft.Toolkit.Mvvm 框架的说明文档。</p>
<p>官方文档：<a href="https://docs.microsoft.com/zh-cn/windows/communitytoolkit/mvvm/introduction">Introduction to the MVVM Toolkit - Windows Community Toolkit | Microsoft Docs</a></p>
<p>[<a href="https://www.cnblogs.com/dino623/p/building_MVVM_programs_using_MVVM_Toolkit.html">WPF] 使用 MVVM Toolkit 构建 MVVM 程序 - dino.c - 博客园 (cnblogs.com)</a></p>
<p>MVVM Toolkit 延续了 MVVMLight 的风格，是一个轻量级的组件，而且它基于 .NET Standard 2.0，可用于UWP, WinForms, WPF, Xamarin, Uno 等多个平台。相比它的前身 MVVMLight，它有以下特点：</p>
<ul>
<li>更高：版本号更高，一出手就是 7.0。</li>
<li>更快：速度更快，MVVM Toolkit 从一开始就以高性能为实现目标。</li>
<li>更强：后台更强，MVVM Toolkit 的全称是 'Microsoft.Toolkit.Mvvm'，根正苗红。</li>
</ul>
<h1 id="各个组件说明">2. 各个组件说明</h1>
<p>前面说到 MVVM Toolkit 延续了 MVVMLight 的风格，因此他们大部分的组件都是相同的</p>
<h2 id="observableobject">2.1 ObservableObject</h2>
<p>ObservableObject 实现了 <a href="https://docs.microsoft.com/dotnet/api/system.componentmodel.inotifypropertychanged"><code>INotifyPropertyChanged</code></a> 和<a href="https://docs.microsoft.com/dotnet/api/system.componentmodel.inotifypropertychanging"><code>INotifyPropertyChanging</code></a>，并触发 <code>PropertyChanged</code> 和 <code>PropertyChanging</code> 事件。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span> : <span class="title">ObservableObject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> =&gt; name;</span><br><span class="line">        <span class="keyword">set</span> =&gt; SetProperty(<span class="keyword">ref</span> name, <span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这段示例代码中，如果 name 和 value 的值不同，首先触发 <code>PropertyChanging</code> 事件，然后触发 <code>PropertyChanged</code>。</p>
<h2 id="relaycommand">2.2 RelayCommand</h2>
<p><code>RelayCommand</code> 和 <code>RelayCommand&lt;T&gt;</code> 实现了 <code>ICommand</code> 接口，<code>INotifyPropertyChanged</code> 和 <code>ICommand</code> 是 MVVM 模式的基础。下面的代码使用 <code>ObservableObject</code> 和 <code>RelayCommand</code> 展示一个基本的 ViewModel：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyViewModel</span> : <span class="title">ObservableObject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyViewModel</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        IncrementCounterCommand = <span class="keyword">new</span> RelayCommand(IncrementCounter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> counter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Counter</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> =&gt; counter;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">set</span> =&gt; SetProperty(<span class="keyword">ref</span> counter, <span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ICommand IncrementCounterCommand &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IncrementCounter</span>(<span class="params"></span>)</span> =&gt; Counter++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Page</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x:Class</span>=<span class="string">&quot;MyApp.Views.MyPage&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:viewModels</span>=<span class="string">&quot;using:MyApp.ViewModels&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Page.DataContext</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">viewModels:MyViewModel</span> <span class="attr">x:Name</span>=<span class="string">&quot;ViewModel&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Page.DataContext</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Spacing</span>=<span class="string">&quot;8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;x:Bind ViewModel.Counter, Mode=OneWay&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Content</span>=<span class="string">&quot;Click me!&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Command</span>=<span class="string">&quot;&#123;x:Bind ViewModel.IncrementCounterCommand&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Page</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这段示例里 <code>IncrementCounterCommand</code> 包装了 <code>IncrementCounter</code> 函数提供给 Button 绑定。<code>IncrementCounter</code> 函数更改 <code>Counter</code> 的值并通过 <code>PropertyChanged</code> 事件通知绑定的 TextBlock。</p>
<h2 id="asyncrelaycommand">2.3 AsyncRelayCommand</h2>
<p><code>AsyncRelayCommand</code> 和 <code>AsyncRelayCommand&lt;T&gt;</code> 也实现了 <code>ICommand</code>，不过它们支持异步操作，提供的 <code>ExecutionTask</code> 和 <code>IsRunning</code> 两个属性对监视任务运行状态十分有用。</p>
<p>例如这个 ViewModel：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyViewModel</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DownloadTextCommand = <span class="keyword">new</span> AsyncRelayCommand(DownloadTextAsync);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> IAsyncRelayCommand DownloadTextCommand &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">DownloadTextAsync</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> Task.Delay(<span class="number">3000</span>); <span class="comment">// Simulate a web request</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用相关的 UI 代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Page.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">converters:TaskResultConverter</span> <span class="attr">x:Key</span>=<span class="string">&quot;TaskResultConverter&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Page.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Spacing</span>=<span class="string">&quot;8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Run</span> <span class="attr">Text</span>=<span class="string">&quot;Task status:&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Run</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;x:Bind ViewModel.DownloadTextCommand.ExecutionTask.Status, Mode=OneWay&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">LineBreak</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Run</span> <span class="attr">Text</span>=<span class="string">&quot;Result:&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Run</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;x:Bind ViewModel.DownloadTextCommand.ExecutionTask, Converter=&#123;StaticResource TaskResultConverter&#125;, Mode=OneWay&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Content</span>=<span class="string">&quot;Click me!&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Command</span>=<span class="string">&quot;&#123;x:Bind ViewModel.DownloadTextCommand&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">muxc:ProgressRing</span></span></span><br><span class="line"><span class="tag">        <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Left&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">IsActive</span>=<span class="string">&quot;&#123;x:Bind ViewModel.DownloadTextCommand.IsRunning, Mode=OneWay&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>点击 <code>Button</code> 后 <code>DownloadTextAsync</code> 开始运行，在 UI 上 TextBlock 和 ProgressRing 绑定到 <code>ExecutionTask</code> 和 <code>IsRunning</code> 并显示任务运行状态，最后通过 <code>TaskResultConverter</code> 显示任务结果。</p>
<p><a href="https://img2020.cnblogs.com/blog/38937/202108/38937-20210819221618229-510116488.gif"><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/38937-20210819221618229-510116488.gif" alt="img" /></a></p>
<h2 id="messenger">2.4 Messenger</h2>
<p>对于主要目的是松耦合的 MVVM 框架，提供一个用于消息交换的系统十分有必要。MVVM Toolkit 中用于消息交换的核心是 <code>WeakReferenceMessenger</code> 类。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create a message</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LoggedInUserChangedMessage</span> : <span class="title">ValueChangedMessage</span>&lt;<span class="title">User</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoggedInUserChangedMessage</span>(<span class="params">User user</span>) : <span class="title">base</span>(<span class="params">user</span>)</span></span><br><span class="line">    &#123;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register a message in some module</span></span><br><span class="line">WeakReferenceMessenger.Default.Register&lt;LoggedInUserChangedMessage&gt;(<span class="keyword">this</span>, (r, m) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Handle the message here, with r being the recipient and m being the</span></span><br><span class="line">    <span class="comment">// input messenger. Using the recipient passed as input makes it so that</span></span><br><span class="line">    <span class="comment">// the lambda expression doesn&#x27;t capture &quot;this&quot;, improving performance.</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Send a message from some other module</span></span><br><span class="line">WeakReferenceMessenger.Default.Send(<span class="keyword">new</span> LoggedInUserChangedMessage(user));</span><br></pre></td></tr></table></figure>
<p>正如这段代码所示，<code>WeakReferenceMessenger</code> 主要通过 <code>Register</code> 和 <code>Send</code> 进行信息交换，它的使用方式类似于 MVVMLight 的 messenger 类。MVVM Toolkit 另外还提供了一个 <code>StrongReferenceMessenger</code> 类，更多使用方法可以参考这篇 <a href="https://github.com/CommunityToolkit/MVVM-Samples/blob/master/docs/mvvm/Messenger.md">文档</a>。<code>Messenger</code> 功能强大且简单易用，但也由于误用会带来风险而引发了一些争议，有必要更详细地理解它的原理和用法以避免它带来的其它风险，这篇文章只是简单地介绍一下它的用法。</p>
<h2 id="observablerecipient">2.5 ObservableRecipient</h2>
<p><code>ObservableRecipient</code> 继承了 <code>ObservableObject</code> 并支持从 <code>Messenger</code> 接收信息，可通过 <code>IsActive</code> 属性激活或停用。它可以用作 ViewModel 的基类，事实上它的作用基本上相遇于 MVVMLight 中的 <a href="https://github.com/lbugnion/mvvmlight/blob/master/GalaSoft.MvvmLight/GalaSoft.MvvmLight%20(PCL)/ViewModelBase.cs">ViewModelBase</a> ：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyViewModel</span> : <span class="title">ObservableRecipient</span>, <span class="title">IRecipient</span>&lt;<span class="title">LoggedInUserRequestMessage</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Receive</span>(<span class="params">LoggedInUserRequestMessage message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Handle the message here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="viewmodellocator">2.6 ViewModelLocator</h2>
<p>在 MVVMLight 中，很多人使用 ViewModelLocator，然后在 xaml 中 binding View 的 DataContext，但是到了 Microsoft.Toolkit.Mvvm 中，却没有默认提供，这里根据官方的 Ioc 迁移说明，给出一个 WPF 应用程序的 ViewModelLocator 的实现方式。</p>
<p>需要的 Package</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;Microsoft.Extensions.DependencyInjection&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;6.0.0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;Microsoft.Toolkit.Mvvm&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;7.1.2&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>ViewModelLocator.cs 代码文件如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Toolkit.Mvvm.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">ViewModelLocator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewModelLocator</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ConfigureServices();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Configures the services for the application.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> IServiceProvider <span class="title">ConfigureServices</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> services = <span class="keyword">new</span> ServiceCollection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Services</span></span><br><span class="line">        <span class="comment">// services.AddSingleton&lt;IContactsService, ContactsService&gt;();</span></span><br><span class="line">        <span class="comment">// services.AddSingleton&lt;IPhoneService, PhoneService&gt;();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Viewmodels</span></span><br><span class="line">        services.AddTransient&lt;MainViewModel&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> serviceProvider = services.BuildServiceProvider();</span><br><span class="line">        Ioc.Default.ConfigureServices(serviceProvider);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> serviceProvider;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> MainViewModel? MainVM &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> Ioc.Default.GetService&lt;MainViewModel&gt;(); &#125; &#125;</span><br><span class="line"></span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>
<p>App.xaml 添加以下资源</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">local:ViewModelLocator</span> <span class="attr">x:Key</span>=<span class="string">&quot;Locator&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Application.Resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 View xaml 中的使用方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Class</span>=<span class="string">&quot;Test.MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">DataContext</span>=<span class="string">&quot;&#123;Binding Source=&#123;StaticResource Locator&#125;, Path=MainVM&#125;&quot;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="attr">Window</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样即可实现 MVVMLight 中 Locator 的效果。</p>
<h1 id="the-性能">3. The 性能</h1>
<p><a href="https://img2020.cnblogs.com/blog/38937/202108/38937-20210819221730002-1263673884.png"><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/38937-20210819221730002-1263673884.png" alt="img" /></a></p>
<p>MVVM Toolkit 在开发过程中为了追求卓越的性能做了很多努力，例如提供一个 <code>StrongReferenceMessenger</code> 类，性能如上图所示地有了大幅提升。又例如下面这篇文章所介绍的：</p>
<p><a href="https://devblogs.microsoft.com/ifdef-windows/mvvm-toolkit-preview-3-the-journey-of-an-api/">MVVM Toolkit Preview 3 &amp; The Journey of an API</a></p>
<p>有兴趣的话可以通过源码详细了解一下。</p>
]]></content>
      <categories>
        <category>工具</category>
        <category>MVVM</category>
      </categories>
      <tags>
        <tag>MVVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Git fetch 同时更新子模块</title>
    <url>/2021/12/02/Git-fetch-%E5%90%8C%E6%97%B6%E6%9B%B4%E6%96%B0%E5%AD%90%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h2 id="问题描述">1. 问题描述</h2>
<p>默认情况，git checkout; git fetch 如果子模块 submodule 的版本不一致， git 是不会自动更新子模块；</p>
<span id="more"></span>
<h2 id="传统解决方法">2. 传统解决方法：</h2>
<p>cd submodules 文件夹；</p>
<p>git checkout / fetch；</p>
<h2 id="高级解决方法">3. 高级解决方法：</h2>
<p>在全局进行 Git 设置：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">1</th>
<th style="text-align: left;">git config --global submodule.recurse true</th>
</tr>
</thead>
<tbody>
</tbody>
</table>
<p>设置 submodule.recurse true 后，不仅仅 git checkout 会自动切换子模块，git fetch / pull 也会自动拉取子模块的更新</p>
<p>注意：这个设置对用户机器上安装的 git 版本有要求，详见下面说明</p>
<p>在发行说明中提到了这一点：https://github.com/git/git/commit/e1104a5ee539408b81566066aaa6963cb87d5cd6#diff-c24776ff22455a30fbb78e378b7df0b0R139</p>
<p>submodule.recurse 选项已添加到 git 2.14</p>
]]></content>
      <categories>
        <category>Git 相关</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 反向代理 FileBrowser</title>
    <url>/2022/03/23/Nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-FileBrowser/</url>
    <content><![CDATA[<p>本文主要说明如果使用 Nginx 方向代理已经启动的 FileBrowser 服务。</p>
<span id="more"></span>
<h1 id="准备工作">1. 准备工作</h1>
<p>开始本文的主要内容前，默认已经做好了以下准备工作</p>
<ol type="1">
<li>使用 linux 系统，比如 centos；</li>
<li>已安装并启动 nginx 服务</li>
<li>已安装并启动 filebrowser 服务</li>
</ol>
<h1 id="有关-filebrowser-的配置">2. 有关 FileBrowser 的配置</h1>
<p>如果不知道已经启动的 filebrowser 服务的相关配置，可以通过以下命令查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 查看 filebrowser 服务的进程 (可以看到启动命令的相关参数，比如说配置文件，数据库文件等)</span></span><br><span class="line">ps -ef |grep filebrowser</span><br><span class="line">pstree -ap |grep filebrowser</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220323190406153.png" alt="image-20220323190406153" /><figcaption aria-hidden="true">image-20220323190406153</figcaption>
</figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 2. 导出 filebrowser 的配置信息</span></span><br><span class="line">cd /etc/filebrowser  # 首先进入包含 filebrowser 可执行文件的目录</span><br><span class="line">filebrowser config cat # 临时查看</span><br><span class="line">filebrowser config export config.json # 导出 filebrowser 配置信息到 config.json 文件</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果存在多个 db 可以通过 -d 参数导出指定数据库中存储的配置信息(其他命令也是如此，后面不在重复说明举例)</span></span><br><span class="line">filebrowser -d /etc/filebrowser/filebrowser.db config export config.json</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可能用到的其他命令</span></span><br><span class="line">filebrowser users update admin -p admin # 更新 admin 用户的密码为 admin</span><br><span class="line">filebrowser config set --port 18080  # 重新设置端口信息</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>以下 json 信息是我用到的配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;port&quot;</span>: <span class="number">18080</span>,</span><br><span class="line">    <span class="attr">&quot;root&quot;</span>:<span class="string">&quot;/data/file&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;database&quot;</span>:<span class="string">&quot;/etc/filebrowser/filebrowser.db&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;log&quot;</span>:<span class="string">&quot;/etc/filebrowser/log.log&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;plugin&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;baseURL&quot;</span>: <span class="string">&quot;/files&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;allowCommands&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;allowEdit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;allowNew&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;commands&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;ls&quot;</span>,</span><br><span class="line">        <span class="string">&quot;df&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info"><p>需要注意的问题：</p>
<ol type="1">
<li><strong>baseURL</strong> 配置项的值在后面 nginx 的配置中要使用到，一定要记录下来；如果没有设置，默认值是 files， 强烈建议设置一下；</li>
<li>使用 vi 或者 vim 写 json 配置文件的时候一定要注意，缩进符号是 空格，而且不能和 tab 混合用；尤其是从网页上面复制 json 文本的时候一定要确保是空格（有些网页上的缩进是 tab，但是默认空白看不到）</li>
<li>如果在 filebrowser 启动后通过 ui 设置了一些操作，或者添加了一些用户，那么通过上面的命名可能获取不到最新的配置信息，或者出现 timeout 的问题，这时候需要关闭 filebrowser 服务，然后通过 -d 参数执行 db 就可以了；</li>
</ol>
</div>
<h1 id="在-nginx-中配置-filebrowser-服务">3. 在 Nginx 中配置 FileBrowser 服务</h1>
<p>核心配置如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  ai.cbim.com <span class="number">10.80.253.133</span>;</span><br><span class="line">    <span class="attribute">access_log</span>  /var/logs/nginx/filebrowser.access.log;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># file browser url</span></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /files/ &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>  http://127.0.0.1:18080/;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host $proxy_host;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新增或者修改完 nginx 的配置文件后，可以使用下面的命令测试 / 重新载入配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试 配置文件的语法是否正确</span></span><br><span class="line">nginx -t</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新载入修改后的 配置文件</span></span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
<p>最后就可以通过设定的域名或者 IP 访问 filebrowser 了</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220323195000831.png" alt="image-20220323195000831" /><figcaption aria-hidden="true">image-20220323195000831</figcaption>
</figure>
<div class="note info"><p>需要注意的问题：</p>
<ol type="1">
<li>server_name 不要和 nginx/conf.d 中其他的配置文件中的 server_name 重复，否则可能被忽略；</li>
<li><strong>location</strong> 后面的匹配项，一定要和 前面 filebrowser 配置文件中的 <strong>baseURL</strong> 配置项保持一致，否则无法代理成功；</li>
<li><strong>location</strong> 的具体匹配规则视情况而定，我这里通过 ^~ 匹配以 files 开头的所有 api；^~ 如果删除，而又没有其他 location 匹配规则，同样会导致代理失败，无法访问 filebrowser</li>
<li>最后访问的时候，如果是局域网域名，访问前最好关掉 vpn 或者其他一类的代理软件，否则也可能会访问失败；</li>
</ol>
</div>
<h1 id="相关参考资料">4. 相关参考资料：</h1>
<p><a href="http://nginx.org/en/docs/">nginx documentation</a></p>
<p><a href="https://github.com/filebrowser/filebrowser">filebrowser/filebrowser: 📂 Web File Browser (github.com)</a></p>
<p><a href="https://filebrowser.org/">Welcome - File Browser</a></p>
<p><a href="https://www.cnblogs.com/shanyu20/p/15477202.html">file browser介绍 - shanyu20 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://github.com/filebrowser/filebrowser/issues/627">timeout on commands that connect to a locked database · Issue #627 · filebrowser/filebrowser (github.com)</a></p>
<p><a href="https://github.com/filebrowser/filebrowser/issues/549">Usable configuration for executing command behind NGINX. · Issue #549 · filebrowser/filebrowser (github.com)</a></p>
]]></content>
      <categories>
        <category>工具</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>FileBrowsern</tag>
      </tags>
  </entry>
  <entry>
    <title>Revit 构件参数体系说明</title>
    <url>/2022/01/20/Revit-%E6%9E%84%E4%BB%B6%E5%8F%82%E6%95%B0%E4%BD%93%E7%B3%BB%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h1 id="revit-构件分类说明">1、Revit 构件分类说明</h1>
<p>从不同的维度 Revit 构件（图元）有不同的分类；</p>
<p>对用用户来说：最为熟悉的就是“项目浏览器”中“族”节点的三级分类：</p>
<p>这里主要介绍以下几种分类维度；</p>
<span id="more"></span>
<h2 id="常见的三级分类">1.1 常见的三级分类</h2>
<p>三级分类，一般用于用户分类管理各种构件，方便用户快速检索使用；</p>
<p>每一级分类都有自己的参数，只不过用户经常关注的时：类型参数、实例参数而已</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220121142116181.png" alt="image-20220121142116181" /><figcaption aria-hidden="true">image-20220121142116181</figcaption>
</figure>
<h3 id="一级分类---类别">1.1.1 一级分类 - 类别</h3>
<p>英文名字也是 API 的名字：Category</p>
<p>Category 是 Revit 软件内置的基础数据，不能被用户和开发者“增删改”，用户只有使用权限；</p>
<p>对于某个确定的 Revit 版本 Category 数量是固定的，只有在 Revit 版本的变化的时候 Category 才可能变化（一般是新增）</p>
<p>Category 内部也是有联系的，具体变现为子类别 SubCategory，这一点一般用户是看不到的；</p>
<p>下面是 Revit API 暴露出来的所有的 Category，可以通过切花版本查看；</p>
<p><a href="https://www.revitapidocs.com/2020/ba1c5b30-242f-5fdc-8ea9-ec3b61e6e722.htm">Revit API BuiltInCategory Enumeration (revitapidocs.com)</a></p>
<p>经过个人统计 Category 发现：</p>
<p>总数：2000+</p>
<p>一般项目中用到的：900左右</p>
<p>实际建模常用的：不超过100</p>
<h3 id="二级分类---族">1.1.2 二级分类 - 族</h3>
<p>Family</p>
<p>在类别之下的二级分类；</p>
<p>所有添加到 Revit 项目中的图元都是使用族创建的。</p>
<p>族 在 Revit 中也分为多种类型，具有一定的可扩展性，但并不是所有的族都能扩展，后面 1.2 章节会说明</p>
<p>这里需要特殊说明的是：族并不是单一的构件，它是可以嵌套，复合的，从而生成更加复杂高级的族；</p>
<p>更多详细说明参见 Autodesk Revit 官方文档：<a href="https://help.autodesk.com/view/RVT/2016/CHS/?guid=GUID-4EBB97AD-C7B6-4828-91EB-BC0E99B81E43">帮助: Revit 族 (autodesk.com)</a></p>
<h3 id="三级分类---类型">1.1.3 三级分类 - 类型</h3>
<p>xxx_Type，FamilySymbol</p>
<p>一个族，可以有多个类型；一般叫：族类型；</p>
<p>类型是用户建模的时候必须指定的信息，</p>
<p>指定了类型，就只定了族和类别；</p>
<p>类型下面就是“图元”了，也可以叫构件；所谓图元，就是在模型视图中实实在在看到的对象，但被选中时，会高亮显示，并且会在“属性”窗口中显示图元的参数信息；</p>
<p><font color="red">“属性”窗口中显示的并不是图元所有的属性信息</font></p>
<h2 id="按族类型分类">1.2 按族类型分类</h2>
<h3 id="系统族">1.2.1 系统族</h3>
<p>特点：</p>
<ol type="1">
<li>Revit 软件内置的，所有的 rvt 文件都是一样的；</li>
<li>有限的；</li>
<li>用户不能自己添加 / 删除（Revit 升级的时候或许会新增）；</li>
</ol>
<p>常见的系统族：墙，楼板、各种管线、屋顶、……</p>
<h3 id="载入族">1.2.2 载入族</h3>
<p>特点：</p>
<ol type="1">
<li>以 rfa 文件的形式存在；</li>
<li>可以载入不同的 rvt 文件中复用；</li>
<li>用户可以自己新增或者删除；</li>
</ol>
<p>常见的系统族：梁、柱、管件、管道附件、末端、家具、设备……</p>
<h3 id="内建族">1.2.3 内建族</h3>
<p>特点：</p>
<ol type="1">
<li>只存在于某一个 rvt 文件内，不能被复用；</li>
<li>只包含一个类型且类型名称和族名称一样</li>
<li>用户可以自己新增或者删除；</li>
</ol>
<p>可以随意指定，创建的时候只需要指定 类别，输入一个族名称，Revit 就会自动创建一个内建族</p>
<h2 id="按-category-类型分类">1.3 按 Category 类型分类</h2>
<p>这种分类是按照 Category 的属性信息 Category Type 进行划分的</p>
<p>一般较少关注</p>
<h3 id="模型类构件模型族">1.3.1 模型类构件(模型族)</h3>
<p>可以在三维视图中进行查看的；</p>
<p>例如：墙、梁、板、柱、……</p>
<h3 id="详图类构件注释族">1.3.2 详图类构件(注释族)</h3>
<p>在平面视图中进行辅助查看，不能在三维视图中看到；</p>
<p>例如：标记、尺寸标注、……</p>
<h3 id="分析类构件分析族">1.3.3 分析类构件(分析族)</h3>
<p>Revit 中有一个单独的分析模块，分析族用来展示分析结果的</p>
<p>例如：分析墙、分析柱、……</p>
<h3 id="内部类构件内部族">1.3.4 内部类构件(内部族)</h3>
<p>Revit 内部使用的；</p>
<p>用户一般不直接使用，通常起到辅助类的构件；</p>
<p>例如：结构连接处理程序、部件、……</p>
<h1 id="revit-参数分类说明">2、Revit 参数分类说明</h1>
<p>Revit 参数也有多个分类的维度，</p>
<p>这里主要介绍以下几种分类维度</p>
<h2 id="按作用的层级">2.1 按作用的层级</h2>
<p>作用层级包含了三级分类，在 1.1 中说明过，每一级都有自己的描述参数；</p>
<p>除了三级分类，这里补充说明了“项目参数”和“实例参数”</p>
<h3 id="项目级参数">2.1.1 项目级参数</h3>
<p>这里项目有别于建筑设计的项目，意思是 rvt 文件，Revit 默认一个 rvt 文件就是一个项目文件，rvt 文件级别的参数就是项目参数，不同的 rvt 文件可以定义不同数量的参数；</p>
<p>所有的项目参数集合在一起，叫做“项目信息”，也是一个 Category 类别</p>
<p>符合 Revit 添加参数的统一流程</p>
<p>除此之外还有一种特殊的项目参数叫“全局参数”，是 2016 R2 以后新增的，具体参见 2.2</p>
<h3 id="族级参数">2.1.2 族级参数</h3>
<p>被用来描述族 Family 的相关信息；</p>
<p>一边较少使用，且不能增删改</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220121181936225.png" alt="image-20220121181936225" /><figcaption aria-hidden="true">image-20220121181936225</figcaption>
</figure>
<h3 id="类型级参数">2.1.3 类型级参数</h3>
<p>一个族一般有多个类型，一个类型之所以区别于另一个类型，就是因为类型参数的参数值不一样（如果一样，那么就可以认为是相同的类型，就没必要新建这个类型了）</p>
<p>为了描述族下面的多个类型，因此产生了类型参数；</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220121182705093.png" alt="image-20220121182705093" /><figcaption aria-hidden="true">image-20220121182705093</figcaption>
</figure>
<h3 id="实例级参数">2.1.4 实例级参数</h3>
<p>视图中看到的每一个图元，都有自己的属性信息，这些属性信息都是通过实例参数描述的；</p>
<p>具体变现为：Revit “属性”窗口中看到的参数（上面截图，左侧部分）</p>
<h2 id="按参数的定义">2.2 按参数的定义</h2>
<p>这种分类方式，只关心参数是如何定义的，不关心这个参数将会被用于描述哪个对象；</p>
<p>通过不同不同的定义方式，可以将参数分为以下几类；</p>
<h3 id="内置参数">2.2.1 内置参数</h3>
<p>BuiltinParameter</p>
<p>在 Revit 中通过枚举的方式暴露出来，用户不能做任何修改；</p>
<p><a href="https://www.revitapidocs.com/2020/fb011c91-be7e-f737-28c7-3f1e1917a0e0.htm">BuiltInParameter Enumeration (revitapidocs.com)</a></p>
<h3 id="共享参数">2.2.2 共享参数</h3>
<p>用户通过共享参数文件定义；</p>
<p>一般情况下一个用户定义并使用一个共享参数文件，也可以做到多个用户使用同一个共享参数文件；</p>
<h3 id="族参数">2.2.3 族参数</h3>
<p>在编辑 rfa 文件过程中定义的参数；</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220121185129566.png" alt="image-20220121185129566" /><figcaption aria-hidden="true">image-20220121185129566</figcaption>
</figure>
<p>根据创建方式的不同，还可以划分为：</p>
<ol type="1">
<li>共享参数</li>
<li>一般族参数
<ol type="1">
<li>这类参数比较特殊，该类型的参数只能在族文件范围内定义，</li>
<li>简单来说就是，只能在编辑 rfa 文件的时候进行定义；且有效的使用范围只能在 rfa 文件内部；</li>
<li>这中参数是造成 revit 参数被滥用的一个原因</li>
</ol></li>
</ol>
<p>族参数，在族内部作用的层级，还可以划分为：</p>
<ul>
<li>类型参数</li>
<li>实例参数；</li>
</ul>
<p>参考：2.1 中的类型参数和实例参数；</p>
<h3 id="全局参数">2.2.4 全局参数</h3>
<figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220124162335058.png" alt="image-20220124162335058" /><figcaption aria-hidden="true">image-20220124162335058</figcaption>
</figure>
<p>全局参数是 Autodesk 在 Revit 2016 R2 版本（17 及其以后的版本都有）增加的内容，是继共享参数与项目参数之后新增加的一种参数。</p>
<p>全局参数特定于单个项目文件，但未像项目参数那样指定给类别。全局参数可以是简单值、来自表达式的值或使用其他全局参数从模型获取的值。</p>
<p>有点类似于族文件里的“一般族参数”</p>
<p>详细的使用方式和案例，参见官方文档：<a href="https://help.autodesk.com/view/RVT/2016/CHS/?guid=GUID-1AA9B2DC-C08B-458E-BA93-C72C109D61C8">帮助: 全局参数 (autodesk.com)</a></p>
<h1 id="revit-参数管理体系">3、Revit 参数管理体系</h1>
<p>Revit 中的参数主要有两类：</p>
<p>常规参数</p>
<p>材质类参数</p>
<h2 id="常规参数的定义管理体系">3.1 常规参数的定义管理体系</h2>
<p>在 Revit 中所有的参数都必须先定义，然后才能被使用；</p>
<p>关于参数定义，Revit 有自己的一套管理体系；</p>
<p>下面截图是各种参数的定义截图</p>
<div class="tabs" id="各种参数定义"><ul class="nav-tabs"><li class="tab active"><a href="#各种参数定义-1">[共享参数定义]</a></li><li class="tab"><a href="#各种参数定义-2">[项目参数定义]</a></li><li class="tab"><a href="#各种参数定义-3">[项目参数使用共享参数定义]</a></li><li class="tab"><a href="#各种参数定义-4">[族参数定义]</a></li></ul><div class="tab-content"><div class="tab-pane active" id="各种参数定义-1"><figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220121145632974.png" alt="image-20220121145632974" /><figcaption aria-hidden="true">image-20220121145632974</figcaption>
</figure></div><div class="tab-pane" id="各种参数定义-2"><figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220121150553052.png" alt="image-20220121150553052" /><figcaption aria-hidden="true">image-20220121150553052</figcaption>
</figure></div><div class="tab-pane" id="各种参数定义-3"><figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220121151733095.png" alt="image-20220121151733095" /><figcaption aria-hidden="true">image-20220121151733095</figcaption>
</figure></div><div class="tab-pane" id="各种参数定义-4"><figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220121151930344.png" alt="image-20220121151930344" /><figcaption aria-hidden="true">image-20220121151930344</figcaption>
</figure></div></div></div>
<p>从上面的截图可以看出来，用于参数管理的主要有以下几个信息：</p>
<ul>
<li>规程</li>
<li>参数类型</li>
<li>参数分组</li>
<li>参数分组方式</li>
<li>类型 or 实例</li>
<li>是否报告参数</li>
</ul>
<p>这些信息，主要用于描述一个参数，方便 Revit 对参数进行管理；</p>
<p><font color="red">“参数定义”并不关注这个参数将会被用于描述什么对象，或者单位是什么；</font>参数的 描述对象，单位信息，则是通过一种关联关系进行使用</p>
<p>因为：</p>
<ol type="1">
<li>一个参数的定义可以被用于描述一个或者多个对象，在给对象添加参数的时候，去选择已经定义好的参数就行了；【添加项目参数的后最右侧会有关联对象的选择】</li>
<li>一个参数可能没有单位或者有多个单位；具体选择哪个单位，在显示或者使用的时候确定就可以了，如下图所示；</li>
</ol>
<figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220121174516331.png" alt="image-20220121174516331" /><figcaption aria-hidden="true">image-20220121174516331</figcaption>
</figure>
<h2 id="材质类参数管理体系">3.2 材质类参数管理体系</h2>
<p>材质类参数，因为涉及到渲染、显示，因此十分复杂；Autodesk 的很多建模软件使用的材质库都是独立的，并不共享；</p>
<p>因为材质相关的参数体系太过复杂，API暴露有是有限的，所以下面主要以介绍为主；</p>
<p>功能入口：管理 -&gt; 设置 -&gt; 材质</p>
<p>在这里用户可以自己创建、定义、编辑、修改与材质相关的各种信息；</p>
<div class="tabs" id="材质-示例"><ul class="nav-tabs"><li class="tab active"><a href="#材质-示例-1">[土建材质 - 示例]</a></li><li class="tab"><a href="#材质-示例-2">[机电材质 - 示例]</a></li></ul><div class="tab-content"><div class="tab-pane active" id="材质-示例-1"><figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220124163727041.png" alt="image-20220124163727041" /><figcaption aria-hidden="true">image-20220124163727041</figcaption>
</figure></div><div class="tab-pane" id="材质-示例-2"><figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220124163317836.png" alt="image-20220124163317836" /><figcaption aria-hidden="true">image-20220124163317836</figcaption>
</figure></div></div></div>
<p>从上面的截图看，材质信息主要包含以下几类信息：</p>
<ul>
<li>标识</li>
<li>图形</li>
<li>外观</li>
<li>物理（可选）</li>
<li>热度（可选）</li>
</ul>
<p>每一类，都包含若干参数，并且通过分组进行管理</p>
<h2 id="通用参数值的管理">3.3 通用参数值的管理</h2>
<p>上面说完了参数定义，另外一个话题就是参数值；</p>
<h3 id="通用参数值特点">3.3.1 通用参数(值)特点</h3>
<p>因为存在这样一部分参数，他们对于参数值的填写是有一些基本要求的；</p>
<p>比如说：颜色，只能在 0 ~ 255 之间；</p>
<p>还有一类：提供一些基本的参数值，让用户进行选择；同时可以暴露一些参数值定义的接口，让用户可以先定义参数值，然后再选择参数值进行使用。</p>
<p>这类参数值都有一些特点：</p>
<ol type="1">
<li>有限</li>
<li>可枚举</li>
<li>比较常见、通用</li>
<li>跟其他参数或者对象有关联关系</li>
</ol>
<p>这类参数，主要集中在 <strong>管理 -&gt; 设置</strong> 面板中</p>
<h3 id="例子">3.3.2 例子</h3>
<h4 id="规程类参数">（1）规程类参数：</h4>
<p>规程参数各处都有用，参数值是 Revit 规定的有限的几个，与其他参数有关联，比如说：参数分组，子规程等</p>
<h4 id="建筑空间-类型参数">（2）建筑/空间 类型参数</h4>
<figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220124171308987.png" alt="image-20220124171308987" /><figcaption aria-hidden="true">image-20220124171308987</figcaption>
</figure>
<h4 id="机电---系统类型-参数">（3）机电 - 系统类型 参数</h4>
<figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220124170329124.png" alt="image-20220124170329124" /><figcaption aria-hidden="true">image-20220124170329124</figcaption>
</figure>
<h4 id="显示类参数值">（4）显示类参数(值)</h4>
<ul>
<li>填充样式</li>
<li>线样式</li>
<li>线宽</li>
<li>线型图案</li>
<li>材质资源</li>
</ul>
<p>这些跟材质或者显示类的参数都有关系，主要影响的就是渲染显示。</p>
]]></content>
      <categories>
        <category>Revit</category>
      </categories>
      <tags>
        <tag>Revit</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora 设置关联七牛云图床</title>
    <url>/2021/12/06/Typora-%E8%AE%BE%E7%BD%AE%E5%85%B3%E8%81%94%E4%B8%83%E7%89%9B%E4%BA%91%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h1 id="七牛云存储环境准备">1. 七牛云存储环境准备</h1>
<h2 id="注册">1.1 注册</h2>
<p>七牛云官网：<a href="https://www.qiniu.com/">七牛云 - 国内领先的企业级云服务商 (qiniu.com)</a></p>
<p>注册流程不在这里详细说明；</p>
<p>说一下注意事项：</p>
<ol type="1">
<li>注册后，需要实名认证</li>
<li>个人认证 即可</li>
</ol>
<span id="more"></span>
<h2 id="新建图床存储空间">1.2 新建图床存储空间</h2>
<ol type="1">
<li>登录后，通过“管理控制台”进入管理页面；</li>
<li>点击“对象存储 Kodo”；</li>
<li>点击“空间管理” -&gt; “新建空间” 进行图床空间创建；</li>
<li>如下图所示，设置完相关参数，即可创建一个图床存储空间；</li>
</ol>
<figure>
<img src="http://r3oaewll2.hb-bkt.clouddn.com/image-20211207135828755.png" alt="image-20211207135828755" /><figcaption aria-hidden="true">image-20211207135828755</figcaption>
</figure>
<p>注意事项：</p>
<ol type="1">
<li>访问权限选择“公开”</li>
<li>存储区域一般选择“距离自己比较近的”，并且不同区域有不同的代号，后面会用到</li>
</ol>
<h1 id="picgo-安装">2. PicGo 安装</h1>
<p>PicGo 有两种类型；</p>
<ol type="1">
<li>PicGo App（应用程序）</li>
<li>PicGo-Core（命令行版本）</li>
</ol>
<h2 id="安装">2.1 安装</h2>
<h3 id="图形界面版本">2.1.1 图形界面版本</h3>
<p><a href="https://github.com/Molunerfinn/PicGo/releases">PicGo图形</a></p>
<p>选择对应系统的安装包安装即可</p>
<h3 id="命令行版本">2.1.2 命令行版本</h3>
<p><a href="https://github.com/PicGo/PicGo-Core">PicGo-core</a></p>
<ul>
<li>没有nodejs环境，使用typora一键安装即可</li>
<li>本机有nodjs环境，直接npm全局安装</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install picgo -g</span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">yarn global add picgo</span><br></pre></td></tr></table></figure>
<p>插件安装</p>
<p><a href="https://github.com/yuki-xin/picgo-plugin-web-uploader">picgo-plugin-web-uploader</a></p>
<p>这是一款可以上传自定义图床的插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">picgo install web-uploader</span><br></pre></td></tr></table></figure>
<h2 id="配置">2.2 配置</h2>
<p>关于存储区域的填写跟在七牛云上新建空间的地理位置有关；</p>
<p>具体参考：<a href="https://developer.qiniu.com/kodo/1671/region-endpoint-fq">存储区域_产品简介_对象存储 - 七牛开发者中心 (qiniu.com)</a></p>
<figure>
<img src="http://r3oaewll2.hb-bkt.clouddn.com/image-20211206144124515.png" alt="image-20211206144124515" /><figcaption aria-hidden="true">image-20211206144124515</figcaption>
</figure>
<h3 id="图形版直接图形界面配置">2.2.1 图形版直接图形界面配置</h3>
<p>参考配置</p>
<figure>
<img src="http://r3oaewll2.hb-bkt.clouddn.com/image-20211208133520184.png" alt="image-20211208133520184" /><figcaption aria-hidden="true">image-20211208133520184</figcaption>
</figure>
<h3 id="图形版直接图形界面配置-1">2.2.2 图形版直接图形界面配置</h3>
<p>参考配置文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;picBed&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;uploader&quot;</span>: <span class="string">&quot;qi_niu&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;current&quot;</span>: <span class="string">&quot;qi_niu&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;qi_niu&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;accessKey&quot;</span>: <span class="string">&quot;you-access-key&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;secretKey&quot;</span>: <span class="string">&quot;you-secret-key&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;bucket&quot;</span>: <span class="string">&quot;blog-pic-resp&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;http://you-url&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;area&quot;</span>: <span class="string">&quot;z1&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;options&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;picgoPlugins&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;picgo-plugin-web-uploader&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="section"></h2>
<h1 id="typora-图片存储设置">3. Typora 图片存储设置</h1>
<p>设置入口：设置 - 偏好设置 - 图像；</p>
<p>如下图所示：</p>
<figure>
<img src="http://r3oaewll2.hb-bkt.clouddn.com/image-20211207102745086.png" alt="image-20211207102745086" /><figcaption aria-hidden="true">image-20211207102745086</figcaption>
</figure>
<figure>
<img src="http://r3oaewll2.hb-bkt.clouddn.com/image-20211207102901759.png" alt="image-20211207102901759" /><figcaption aria-hidden="true">image-20211207102901759</figcaption>
</figure>
<ol type="1">
<li>插入图片时：选择：上传图片；</li>
<li>上传服务设定
<ol type="1">
<li>上传服务：选择：PicGo（app）</li>
<li>PicGo 路径：选择：自己安装时候的路径</li>
</ol></li>
</ol>
<p>当上述两大项设置完毕后，点击：“验证图片上传选项”</p>
<p>设置成功后，会出现“验证成功”的提示，如下图：</p>
<p>如果你的主题设置是 Onedark 一类的黑色主题，这个提示可能会不明显，需要仔细查看才能看到；</p>
<figure>
<img src="http://r3oaewll2.hb-bkt.clouddn.com/image-20211207103956991.png" alt="image-20211207103956991" /><figcaption aria-hidden="true">image-20211207103956991</figcaption>
</figure>
<figure>
<img src="http://r3oaewll2.hb-bkt.clouddn.com/image-20211207104327148.png" alt="image-20211207104327148" /><figcaption aria-hidden="true">image-20211207104327148</figcaption>
</figure>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>PicGo</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio *.sln file 编辑 bug 记录</title>
    <url>/2022/03/03/Visual-Studio-sln-file-%E7%BC%96%E8%BE%91-bug-%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>sln 是 Visual Studio 20xx 自动创建的解决方案文件，里面存放了有关解决方案的设置信息，以及有关解决方案下项目文件的组织、结构、配置信息；</p>
<p>一般情况下，我们都是通过 Visual Studio 的可视化操作 对 sln 文件间接进行编辑修改的，但是有时候为了提高效果，需要手动进行编辑操作；</p>
<p>这里主要记录手动编辑 sln 文件遇到的问题：</p>
<span id="more"></span>
<h1 id="有关-sln-文件的介绍">0. 有关 sln 文件的介绍</h1>
<p>这里假设读者对 sln 文件有一定了解，因此不在详细说明，主要用来说明遇到的问题</p>
<p>有关 sln 文件可以参考官方文档：<a href="https://docs.microsoft.com/zh-cn/visualstudio/extensibility/internals/solution-dot-sln-file?view=vs-2022">解决方案 (。Sln) 文件 - Visual Studio (Windows) | Microsoft Docs</a></p>
<p><a href="https://blog.walterlv.com/post/understand-the-sln-file">理解 Visual Studio 解决方案文件格式（.sln） - walterlv</a></p>
<h1 id="sln-修改后不起效的-bug">1. sln 修改后不起效的 bug</h1>
<p>软件环境：visual studio 2022，sublime 3</p>
<h2 id="问题描述">1.1 问题描述</h2>
<p>使用 sublime 打开 sln 文件，然后编辑 GlobalSection(SolutionConfigurationPlatforms) = preSolution 信息，如下图所示：</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220303141026555.png" alt="image-20220303141026555" /><figcaption aria-hidden="true">image-20220303141026555</figcaption>
</figure>
<p>红框里面是新增的内容；</p>
<p>修改后保存，然后再 visual studio 中重新载入，发现：新增的解决方案配置项，并没有出现，如下图所示：</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220303141324034.png" alt="image-20220303141324034" /><figcaption aria-hidden="true">image-20220303141324034</figcaption>
</figure>
<p>注：一开始编辑，全部没有出现，这里为了说明问题，故意显示 出 Release R21 Store，便于后面分析问题</p>
<h2 id="问题分析">1.2 问题分析</h2>
<p>根据 1.1 中的现象发现，已经显示的配置项是 Release R21 Store，对应 sln 文件中的是 31 行，没有显示的是 32~40 行，这其中有什么区别不难发现。</p>
<p>唯一的区别是：31 行使用的 缩进是 tab 键，32~40 行使用的是空格 space；</p>
<p>注释：截图中的 —— 代表 Tab 键，…… 代表 Space 空格键</p>
<p>难道竟然是缩进符号的问题？？？</p>
<p>通过验证发现：果然是缩进符号导致的</p>
<h2 id="问题总结">1.3 问题总结</h2>
<p>产生问题的原因：</p>
<p>笔者再根据 githu 上一篇技术文档的介绍，进行 sln 文件的编辑修改，文档中建议使用编辑器打开手动修改，而且附加上了修改的内容，于是我便很轻易的点击 copy 按钮，进行复制、粘贴，发现没有任何效果。</p>
<p>浪费了半天的事件才发现是 缩进符号导致的，</p>
<p>而且还是在 Sublime 中选中状态下才能发现的</p>
<p>复制粘贴代码害死人，一定要注意。</p>
]]></content>
      <categories>
        <category>VisualStudio</category>
      </categories>
      <tags>
        <tag>VisualStudio</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF 在 Trigger 中修改 Button Content 注意事项</title>
    <url>/2021/12/02/WPF-%E5%9C%A8-Trigger-%E4%B8%AD%E4%BF%AE%E6%94%B9-Button-Content-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<h2 id="问题描述">1. 问题描述</h2>
<p>xaml 代码块如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Button Content=&quot;333&quot;&gt;</span><br><span class="line">                &lt;Button.Style&gt;</span><br><span class="line">                    &lt;Style TargetType=&quot;Button&quot;&gt;</span><br><span class="line">                        &lt;Setter Property=&quot;Width&quot; Value=&quot;70&quot;/&gt;</span><br><span class="line">                        &lt;Setter Property=&quot;Height&quot; Value=&quot;27&quot;/&gt;</span><br><span class="line">                        &lt;Style.Triggers&gt;</span><br><span class="line">                            &lt;DataTrigger Binding=&quot;&#123;Binding ElementName=listBox, Path=SelectedIndex&#125;&quot; Value=&quot;2&quot;&gt;</span><br><span class="line">                                &lt;Setter Property=&quot;Content&quot; Value=&quot;three&quot; /&gt;</span><br><span class="line">                            &lt;/DataTrigger&gt;</span><br><span class="line">                        &lt;/Style.Triggers&gt;</span><br><span class="line">                    &lt;/Style&gt;</span><br><span class="line">                &lt;/Button.Style&gt;</span><br><span class="line">            &lt;/Button&gt;</span><br></pre></td></tr></table></figure>
<p>运行后，触发 DataTrigger 发现 Button 的 Content 没有变化</p>
<span id="more"></span>
<h2 id="原因和解决方法">2. 原因和解决方法</h2>
<p>原因：定义 Button 的时候直接指定 Content 相当于定死了 Button 的 Content ，所以在 Style 的 Trigger 中就无法修改了；</p>
<p>注意： 这个时候如果指定有默认的 Button Style，默认样式也会失效；原因是重写了 Style；</p>
<p>解决方案：将 Content 的默认值，写进 Button.Style，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Button&gt;</span><br><span class="line">     &lt;Button.Style&gt;</span><br><span class="line">         &lt;Style TargetType=&quot;Button&quot;&gt;</span><br><span class="line">             &lt;Setter Property=&quot;Content&quot; Value=&quot;333&quot;/&gt;</span><br><span class="line">             &lt;Setter Property=&quot;Width&quot; Value=&quot;70&quot;/&gt;</span><br><span class="line">             &lt;Setter Property=&quot;Height&quot; Value=&quot;27&quot;/&gt;</span><br><span class="line">             &lt;Style.Triggers&gt;</span><br><span class="line">                 &lt;DataTrigger Binding=&quot;&#123;Binding ElementName=listBox, Path=SelectedIndex&#125;&quot; Value=&quot;2&quot;&gt;</span><br><span class="line">                     &lt;Setter Property=&quot;Content&quot; Value=&quot;three&quot; /&gt;</span><br><span class="line">                 &lt;/DataTrigger&gt;</span><br><span class="line">             &lt;/Style.Triggers&gt;</span><br><span class="line">         &lt;/Style&gt;</span><br><span class="line">     &lt;/Button.Style&gt;</span><br><span class="line"> &lt;/Button&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WPF</category>
      </categories>
      <tags>
        <tag>.Net</tag>
        <tag>C#</tag>
        <tag>WPF</tag>
        <tag>Style</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio 代码格式化工具</title>
    <url>/2022/03/01/Visual-Studio-%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>Visual Studio 设置 - &gt; 选项 里面自身包含有部分代码格式化的功能，但是比较弱，面对复杂的项目代码，尤其是团队开发的时候，依然存在一些问题，不能够很好的规范，格式化项目代码；比如说 XAML 文件等。</p>
<p>本篇文章，结合 Visual Studio 的基础设置，同时配合 Visual Studio 扩展相关的代码格式化工具进行项目级别代码格式化规范的统一说明。</p>
<span id="more"></span>
<h1 id="visual-studio-代码格式化基础设置">Visual Studio 代码格式化基础设置</h1>
<p>vs 自带的文件格式化设置功能位于：工具 -&gt; 选项 -&gt; 文本编辑器</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220303115418833.png" alt="image-20220303115418833" /><figcaption aria-hidden="true">image-20220303115418833</figcaption>
</figure>
<p>在这里，既可以按照编程语言设置，也可以在“所有语言”中进行统一设置；</p>
<p>这里的设置都是一些基本的设置，比如说：行号，自动补全，缩进等；</p>
<p>以C#为例，在写代码的过程中一般只有在 补全 {} 的时候才会进行自动格式化，如果实在 {} 内部写代码，比如说缩进不对，没有加空格等，那么在保存的时候就不会自动格式化（除非使用了手动/快捷键格式化或者高级插件）</p>
<p>还有，在进行 XAML 开发的时候，由于其标签语言的特性，属性有时候会比较多，尤其实在团队开发的过程中，每个人都有自己的习惯，有些人喜欢一行写下去不带换行，有些喜欢加换行（换行的时候属性的数量也不同，极端的一个属性就换行，或者三五个属性后再换行），而且相同标签的空间在一起，属性的顺序也可能不一样，这就给代码的可读性增加了困难；</p>
<p>如何解决这些问题，下面将会结合高级工具进行说明；</p>
<h1 id="format-document-on-save-扩展插件">1. Format Document On Save 扩展插件</h1>
<p>主要用户解决，再保存代码的时候进行自动格式化；</p>
<p>保存操作支持</p>
<ol type="1">
<li>ctrl+s</li>
<li>vs ide 中保存按钮</li>
</ol>
<h2 id="安装设置">1.1 安装设置</h2>
<p>插件链接：<a href="https://marketplace.visualstudio.com/items?itemName=mynkow.FormatdocumentonSave">Format document on Save - Visual Studio Marketplace</a></p>
<p><a href="https://github.com/Elders/VSE-FormatDocumentOnSave">Elders/VSE-FormatDocumentOnSave: Visual Studio - Format Document on Save (github.com)</a></p>
<p>安装后，可以在 工具 -&gt; 选项 -&gt; Format Document On Save 中进行格式化的一些设置，操作；</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220303120914539.png" alt="image-20220303120914539" /><figcaption aria-hidden="true">image-20220303120914539</figcaption>
</figure>
<p>设置项比较简单，也有注释，这里就不在一一说明了；</p>
<h2 id="项目级使用">1.2 项目级使用</h2>
<p>上面介绍的使用方法，可以满足一般个人的使用，但是在团队开发的过程中，每个人的设置可能不一样，如何解决这个问题能，这里就要使用到项目级的文件格式化配置 EditConfig。</p>
<p>项目级的文件格式化配置 EditConfig，不是针对某个人的；具有以下特点：</p>
<ol type="1">
<li>一个项目（sln）一个配置文件；</li>
<li>项目配置的优先级高于 工具 -&gt; 选项 -&gt; Format Document On Save 插件中的配置；</li>
</ol>
<p>这样，有了<a href="https://editorconfig.org/">EditorConfig</a> 即便团队中的人员插件设置不一样，也能使用相同的格式化配置；</p>
<p>有关 <a href="https://editorconfig.org/">EditorConfig</a> 的详细信息可以查看链接，这里不详细说明了。</p>
<p>有了这个插件，可以很好的解决 99% 的代码格式问题，唯一例外的就是 xaml 文件不能格式化，这个会在下面单独说明。</p>
<h1 id="xaml-styler-扩展插件">2. XAML Styler 扩展插件</h1>
<p>在 .Net 开发中，有一种特殊的代码文件：XAML，是前面讲的代码格式化插件所不能格式的；</p>
<p>而 XAML Styler 就是专门针对 xaml 文件进行格式化，这一点从名字上就能看出来。</p>
<p>参考链接：<a href="https://www.cnblogs.com/dino623/p/XAML_Styler.html">使用 XAML 格式化工具：XAML Styler - dino.c - 博客园 (cnblogs.com)</a></p>
<h2 id="xaml-的问题">2.1 XAML 的问题</h2>
<p>XAML 格式化主要的难题是下面几个：</p>
<ul>
<li>如果所有属性都写在同一行，它太宽了很难看到后面的属性</li>
<li>如果每个属性单独一行，它又太长了很难看清楚它的结构</li>
<li>属性之间没有排序，重要属性的属性找起来很困难</li>
<li>团队没有统一的标准，不小心格式化一下代码的话全部都会变，CodeReview 烦死人</li>
</ul>
<p>如果不想得过且过忍受上述这些问题的话，可以试试用 XAML Styler 这个工具，它正好解决了这些问题。</p>
<h2 id="安装使用">2.2 安装使用</h2>
<p>XAML Styler 是一个 VisualStudio插件（也可用于其它 IDE），这是它在 Visual Studio Marketplace 和 Github 上的地址：</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=NicoVermeir.XAMLStyler">XAML Styler - Visual Studio Marketplace</a></p>
<p><a href="https://github.com/Xavalon/XamlStyler">Xavalon/XamlStyler: Visual Studio extension to help format your XAML source code (github.com)</a></p>
<p><a href="https://github.com/Xavalon/XamlStyler/wiki">Home · Xavalon/XamlStyler Wiki (github.com)</a></p>
<p>在 VisualStudio 的管理扩展窗口中，输入 XamlStyle 搜索，点击“下载”然后关闭 VisualStudio 即可完成安装。</p>
<p>具体安装步骤不在这里说明了。</p>
<p>安装完成后重启 Visual Studio，可以在“选项”窗口中看到它的配置：</p>
<p><a href="https://img2020.cnblogs.com/blog/38937/202101/38937-20210120232810578-324783095.png"><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/38937-20210120232810578-324783095.png" alt="img" /></a></p>
<p>之后，每次在 XAML 编辑器中执行保存都会自动进行格式化操作。你也可以在 XAML 编辑器的右键菜单选择 Format XAML 或使用快捷键进行格式化。</p>
<h2 id="关键格式化设置项说明">2.3 关键格式化设置项说明</h2>
<p>XAML 的格式主要有两种方式：所有属性放一行和每个属性单独一行。</p>
<p>如果选择所有属性放一行的时候，XAML 结构清晰，结构严谨，段落分明，而且文件也很短。</p>
<p>可是万一很多属性问题就出来了，一行 XAML 会变得很长。而且看看下面两个 ContentPresenter，同样都有 Margin 属性、HorizontalAlignment 属性，VerticalAlignment 属性，RecognizesAccessKey 属性，SnapsToDevicePixels 顺序ing，但你能看到第二个 ContentPresenter 后面偷偷塞了个 Margin 吗：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Copy<span class="tag">&lt;<span class="name">ContentPresenter</span> <span class="attr">Margin</span>=<span class="string">&quot;&#123;TemplateBinding Padding&#125;&quot;</span> <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding HorizontalContentAlignment&#125;&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding VerticalContentAlignment&#125;&quot;</span> <span class="attr">RecognizesAccessKey</span>=<span class="string">&quot;True&quot;</span> <span class="attr">SnapsToDevicePixels</span>=<span class="string">&quot;&#123;TemplateBinding SnapsToDevicePixels&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ContentPresenter</span> <span class="attr">Margin</span>=<span class="string">&quot;&#123;TemplateBinding Padding&#125;&quot;</span> <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding HorizontalContentAlignment&#125;&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding VerticalContentAlignment&#125;&quot;</span> <span class="attr">RecognizesAccessKey</span>=<span class="string">&quot;True&quot;</span> <span class="attr">SnapsToDevicePixels</span>=<span class="string">&quot;&#123;TemplateBinding SnapsToDevicePixels&#125;&quot;</span> <span class="attr">Margin</span>=<span class="string">&quot;40&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果在 VisualStudio 中“文本编辑器-&gt;XAML-&gt;格式化-&gt;间距-&gt;特性间距”这个选项中选择了“将各个属性分别放置”：</p>
<p><a href="https://img2020.cnblogs.com/blog/38937/202101/38937-20210120232837859-1653416211.png"><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/38937-20210120232837859-1653416211.png" alt="img" /></a></p>
<p>格式化文档后上面的 XAML 就会变成这样：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ContentPresenter</span> <span class="attr">Margin</span>=<span class="string">&quot;&#123;TemplateBinding Padding&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding HorizontalContentAlignment&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">VerticalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding VerticalContentAlignment&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">RecognizesAccessKey</span>=<span class="string">&quot;True&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">SnapsToDevicePixels</span>=<span class="string">&quot;&#123;TemplateBinding SnapsToDevicePixels&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ContentPresenter</span> <span class="attr">Margin</span>=<span class="string">&quot;&#123;TemplateBinding Padding&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding HorizontalContentAlignment&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">VerticalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding VerticalContentAlignment&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">RecognizesAccessKey</span>=<span class="string">&quot;True&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">SnapsToDevicePixels</span>=<span class="string">&quot;&#123;TemplateBinding SnapsToDevicePixels&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">Margin</span>=<span class="string">&quot;40&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>每个属性单独一行不仅不会看漏属性，而且编辑器本身也不会有横向和纵向两种方向的移动，只有从上到下的移动，这就舒服多了。</p>
<p>可是大部分情况下每个属性分行放置会破坏原本清晰的 XAML 层次结构，例如下面这种本来好好的 XAML:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontWeight&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;Normal&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;UseSystemFocusVisuals&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FocusVisualMargin&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;-3&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Height&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Width&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Maximum&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>变成这样：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontWeight&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Value</span>=<span class="string">&quot;Normal&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;UseSystemFocusVisuals&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FocusVisualMargin&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Value</span>=<span class="string">&quot;-3&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Height&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Value</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Width&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Value</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Maximum&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>这种风格优雅得像诗歌 我偶尔称为豆瓣风 一行变两行 两行变四行 本来 一页看得完 的代码 变成 两页才看得完 也是够 麻烦的。</p>
<p>XAML Styler 很好地解决了这个问题，它通过 “Attribute tolerance” 属性控制每一行的容许的最多的属性数量，如果一个元素的属性数量少于设定值，那就放在一行，如果超过就所有属性单独一行。通常我将这个属性设置为 <code>2</code>，再配合 “Keep first attribute on same line = true” 的设置，可以做到下面这种格式化效果：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">x:Key</span>=<span class="string">&quot;NormalTextColor&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;#2E2F33&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">x:Key</span>=<span class="string">&quot;PrimaryColor&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;#FFED5B8C&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">x:Key</span>=<span class="string">&quot;LineColor&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;#E1E1E1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">x:Key</span>=<span class="string">&quot;TransparentBackground&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;Transparent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">x:Key</span>=<span class="string">&quot;CompletedTemplate&quot;</span> <span class="attr">TargetType</span>=<span class="string">&quot;ContentControl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">x:Name</span>=<span class="string">&quot;CompletedElement&quot;</span> <span class="attr">Margin</span>=<span class="string">&quot;-2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">control:DropShadowPanel</span> <span class="attr">HorizontalContentAlignment</span>=<span class="string">&quot;Stretch&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">VerticalContentAlignment</span>=<span class="string">&quot;Stretch&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">BlurRadius</span>=<span class="string">&quot;8&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">OffsetX</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">OffsetY</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">Color</span>=<span class="string">&quot;#FFED5B8C&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Ellipse</span> <span class="attr">x:Name</span>=<span class="string">&quot;CompletedRectangle&quot;</span> <span class="attr">Fill</span>=<span class="string">&quot;&#123;StaticResource PrimaryColor&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">control:DropShadowPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样就可以兼顾两种格式化的优点。</p>
<h2 id="排序">2.4 排序</h2>
<p>如果元素有多个属性，要找到它的主要属性（通常是 Name 和 Grid.Row）需要颇费一番功夫。XAML Styler 根据一个可设定的规则自动将元素的各个属性排序，这个规则如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;AttributeOrderingRuleGroups&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;x:Class&quot;</span>,</span><br><span class="line">    <span class="string">&quot;xmlns, xmlns:x&quot;</span>,</span><br><span class="line">    <span class="string">&quot;xmlns:*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;x:Key, Key, x:Name, Name, x:Uid, Uid, Title&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Grid.Row, Grid.RowSpan, Grid.Column, Grid.ColumnSpan, Canvas.Left, Canvas.Top, Canvas.Right, Canvas.Bottom&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Width, Height, MinWidth, MinHeight, MaxWidth, MaxHeight&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Margin, Padding, HorizontalAlignment, VerticalAlignment, HorizontalContentAlignment, VerticalContentAlignment, Panel.ZIndex&quot;</span>,</span><br><span class="line">    <span class="string">&quot;*:*, *&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PageSource, PageIndex, Offset, Color, TargetName, Property, Value, StartPoint, EndPoint&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mc:Ignorable, d:IsDataSource, d:LayoutOverrides, d:IsStaticText&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Storyboard.*, From, To, Duration&quot;</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>排序结果大致如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">&quot;Show&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Padding</span>=<span class="string">&quot;40,20&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Background</span>=<span class="string">&quot;#00aef1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Content</span>=<span class="string">&quot;Show&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Foreground</span>=<span class="string">&quot;White&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Style</span>=<span class="string">&quot;&#123;StaticResource BubbleButtonStyle&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="项目级使用-1">2.5 项目级使用</h2>
<p>最后，就算自己做好了格式化，团队中的其它成员使用了不同的格式化标准也会引起很多问题。针对这个问题 Xaml Styler 也提供了解决方案。</p>
<p>在项目的根目录创建一个名为“Settings.XamlStyler”的文件，内容参考这个网址：https://github.com/Xavalon/XamlStyler/wiki/External-Configurations 中的 <strong>Default Configuration</strong>。有了这个配置文件，XAML Styler 就会根据它而不是全局配置进行格式化，作为项目的统一格式化标准。</p>
<h2 id="ctrls-保存时的冲突问题解决">2.6 ctrl+s 保存时的冲突问题解决</h2>
<p>设置完这两个插件后，在实际使用的过程中可能会发现：在使用 ctrl + s 保存的时候会达不到效果</p>
<h3 id="现象分析">现象分析</h3>
<p>在 xaml 中按 ctrl + s 保存的时候，仔细查看画面，会发现 xaml 文件被保存了两次，而且第一一闪而过的结果好像还是正确的，最初呈现的第二次保存解决却不对了，</p>
<h3 id="原因分析">原因分析</h3>
<p>根据现象可以分析出来，不止一个插件触发了xaml 的保存操作，那个捣乱者是谁，很容易想到是 Format Document On Save</p>
<h3 id="解决方法">解决方法</h3>
<p>从现象中我们看到，保存了两次导致解结果不对；</p>
<p>那么就有两个解决方案：</p>
<ol type="1">
<li>让 xaml styler 最后保存，</li>
<li>不然 Format Document On Save 保存 xaml；</li>
</ol>
<p>方案 1 我们无法控制保存顺序，暂时无解；</p>
<p>方案 2 如果我们在设置中可以设置 不存在 xaml 文件就可以了，或许可行</p>
<p>打开 Format Document On Save 设置信息，我们仔细查看，有一个叫 <strong>Denied Extensions</strong> 的设置项，我们可以通过它设置不格式化 xaml 文件，设置后试了一些，依然达不到效果，查看那里除了问题，仔细看 <strong>Denied Extensions</strong> 设置项的说明发现：</p>
<p><strong>Denied Extensions</strong> 设置项，只有在 <strong>Allowed Extensions</strong> 设置项为空的情况下才能生效，于是赶紧删除试一下，果然成功了。</p>
]]></content>
      <categories>
        <category>工具</category>
        <category>VisualStudio</category>
      </categories>
      <tags>
        <tag>VisualStudio</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF 窗口控件默认键盘焦点设置</title>
    <url>/2022/03/14/WPF-%E7%AA%97%E5%8F%A3%E6%8E%A7%E4%BB%B6%E9%BB%98%E8%AE%A4%E9%94%AE%E7%9B%98%E7%84%A6%E7%82%B9%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>大家经常能够看到 WPF 窗口加载显示后，用户按 Tab 键，就会有一个控价获得焦点，如果这个控件是 Button，那么表现为：在 Button 文本周围有个虚线框；如果是 TextBox，那么表现为：在 TextBox 内部会有光标在闪烁。那么如何在 View 加载后设置默认显示这个效果，本文将会说明。</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220314142837858.png" alt="image-20220314142837858" /><figcaption aria-hidden="true">image-20220314142837858</figcaption>
</figure>
<span id="more"></span>
<h1 id="一关于-焦点-的-基本知识">一、关于 焦点 的 基本知识</h1>
<p><a href="https://docs.microsoft.com/zh-cn/dotnet/desktop/wpf/advanced/focus-overview?view=netframeworkdesktop-4.8">焦点概述 - WPF .NET Framework | Microsoft Docs</a></p>
<p><a href="https://docs.microsoft.com/zh-cn/dotnet/desktop/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle?redirectedfrom=MSDN&amp;view=netframeworkdesktop-4.8">为控件中的焦点设置样式以及 FocusVisualStyle - WPF .NET Framework | Microsoft Docs</a></p>
<p>两种焦点：</p>
<ol type="1">
<li>键盘焦点</li>
<li>逻辑焦点</li>
</ol>
<p>这里有一段话明确说明了虚线框是键盘焦点的由来</p>
<blockquote>
<p><em>Focus visual styles act only when the focus action was initiated by the keyboard. Any mouse action or programmatic focus change disables the mode for focus visual styles.</em></p>
</blockquote>
<p>意思是：虚线框这种焦点效果，只能通过按 Tab 键进行触发</p>
<h1 id="二实现方案">二、实现方案</h1>
<p>明白了焦点效果产生的缘由，我们就可以思考如何实现</p>
<p>这里主要介绍如下实现方式；</p>
<h2 id="模拟按键实现">2.1 模拟按键实现</h2>
<p>既然只能通过按 Tab 键触发产生想要的效果，最直接的方法就是：</p>
<p>在 View 加载后，通过编码实现模拟用户按键到达想要的键盘焦点效果；</p>
<p>具体实现方式编码，可以通过 PInvoke SendInput 实现，</p>
<p>也可以使用封装好的第三方包，<a href="https://www.nuget.org/packages/InputSimulator/">NuGet Gallery | InputSimulator 1.0.4</a></p>
<p>缺点：</p>
<p>要提前计算好要按几次才能达到指定的控件；</p>
<h2 id="重写键盘焦点样式">2.2 重写键盘焦点样式</h2>
<p>在第一章节中了解了：想要的样式是通过那种 Style 控制产生的，那么我们就可以重新实现一种新的样式，默认显示我们想要的效果。</p>
<p>确定：</p>
<p>复杂，需要重写想过控件的样式</p>
<h2 id="辅助方法实现">2.3 辅助方法实现</h2>
<p>通过反射的方法，调用 ShowFocusVisual Internal 方法实现。</p>
<p>笔者用的就是这种方法，因为我的需要没有复杂的样式要求，只需要显示默认的键盘焦点样式即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public sealed class KeyboardHelper</span><br><span class="line">&#123;</span><br><span class="line">    private static KeyboardHelper _Instance;</span><br><span class="line"></span><br><span class="line">    private readonly PropertyInfo _AlwaysShowFocusVisual;</span><br><span class="line">    private readonly MethodInfo _ShowFocusVisual;</span><br><span class="line"></span><br><span class="line">    // Explicit static constructor to tell C# compiler</span><br><span class="line">    // not to mark type as beforefieldinit</span><br><span class="line">    static KeyboardHelper()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private KeyboardHelper()</span><br><span class="line">    &#123;</span><br><span class="line">        var type = typeof(KeyboardNavigation);</span><br><span class="line"></span><br><span class="line">        _AlwaysShowFocusVisual = type.GetProperty(&quot;AlwaysShowFocusVisual&quot;, BindingFlags.NonPublic | BindingFlags.Static);</span><br><span class="line">        _ShowFocusVisual = type.GetMethod(&quot;ShowFocusVisual&quot;, BindingFlags.NonPublic | BindingFlags.Static);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    internal static KeyboardHelper Instance =&gt; _Instance ?? (_Instance = new KeyboardHelper());</span><br><span class="line"></span><br><span class="line">    internal void ShowFocusVisualInternal()</span><br><span class="line">    &#123;</span><br><span class="line">        _ShowFocusVisual.Invoke(null, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    internal bool AlwaysShowFocusVisualInternal</span><br><span class="line">    &#123;</span><br><span class="line">        get &#123; return (bool)_AlwaysShowFocusVisual.GetValue(null, null); &#125;</span><br><span class="line">        set &#123; _AlwaysShowFocusVisual.SetValue(null, value, null); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void Focus(UIElement element)</span><br><span class="line">    &#123;</span><br><span class="line">        element?.Dispatcher.BeginInvoke(DispatcherPriority.Background, new Action(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            var keybHack = KeyboardHelper.Instance;</span><br><span class="line">            var oldValue = keybHack.AlwaysShowFocusVisualInternal;</span><br><span class="line"></span><br><span class="line">            keybHack.AlwaysShowFocusVisualInternal = true;</span><br><span class="line"></span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                Keyboard.Focus(element);</span><br><span class="line">                keybHack.ShowFocusVisualInternal();</span><br><span class="line">            &#125;</span><br><span class="line">            finally</span><br><span class="line">            &#123;</span><br><span class="line">               keybHack.AlwaysShowFocusVisualInternal = oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用方法: 在构造方法中的 InitializeComponent 方法 或者 Loaded 后添加下方代码即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KeyboardHelper.Focus(this.OkBtn); // Button Name</span><br></pre></td></tr></table></figure>
<p>缺点：</p>
<p>需要使用控件 Name；</p>
<h1 id="三总结">三、总结</h1>
<p>这第二章节中介绍了三种方法，大家可以根据自己的需要，选择合适的方法</p>
<p>笔者采用的是 2.3 ，目前没有发现什么问题；</p>
<p>参考链接：</p>
<p><a href="https://stackoverflow.com/questions/5468419/wpf-button-to-have-keyboard-focus-dotted-border-around-during-the-startup-or-a/54332878#54332878?newreg=1c1894efcf124154aece9df9df062740">WPF Button to have Keyboard focus (dotted border around) during the startup or activation of window - Stack Overflow</a></p>
<p><a href="https://stackoverflow.com/questions/5400570/how-to-make-checkbox-focus-border-appear-when-calling-checkbox-focus/5401707#5401707">wpf - How to make CheckBox focus border appear when calling CheckBox.Focus()? - Stack Overflow</a></p>
]]></content>
      <categories>
        <category>WPF</category>
      </categories>
      <tags>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Terminal 集成 Oh My Posh</title>
    <url>/2021/12/29/Windows-Terminal-%E9%9B%86%E6%88%90-Oh-My-Posh/</url>
    <content><![CDATA[<h1 id="准备安装环境">1. 准备安装环境</h1>
<p>Windows Termianl, PowerShell 都可以从 Microsoft Store 中下载</p>
<ul>
<li><a href="https://www.microsoft.com/store/productId/9N0DX20HK701">Windows Terminal</a> (Windows 自带)</li>
<li><a href="https://www.microsoft.com/store/productId/9MZ1SNWT0N5D">PowerShell</a></li>
</ul>
<p>具体安装这里不做详细说明</p>
<span id="more"></span>
<h1 id="安装-oh-my-posh">2. 安装 Oh My Posh</h1>
<div class="note info"><p>这里推荐去 Oh My Posh 官方网站查看最新的安装方法；</p>
<p>网上的大部分教程，存在时效性问题，因为 Oh My Posh 是不断更新的，不同时间不同版本的安装方法可能不一样</p>
<p>因此搜索到的二手安装教程不一定使用目前安装的你</p>
</div>
<p><a href="https://ohmyposh.dev/">Home | Oh My Posh</a></p>
<p><a href="https://ohmyposh.dev/docs/">Introduction | Oh My Posh</a></p>
<h2 id="参考文档">2.1 参考文档：</h2>
<p><a href="https://blog.walterlv.com/post/beautify-powershell-like-zsh.html">将美化进行到底，使用 Oh My Posh 把 PowerShell 做成 oh-my-zsh 的样子 - walterlv</a></p>
<p><a href="https://zimmergren.net/making-windows-terminal-look-awesome-with-oh-my-posh/">Making Windows Terminal look awesome with oh-my-posh and new fonts. (zimmergren.net)</a></p>
<h2 id="可能使用到的命令">2.2 可能使用到的命令</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看已经安装的模块</span></span><br><span class="line">Get-InstalledModule</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当前用户安装一个模块 （-Verbose 参数显示细节）全局使用 AllUsers</span> </span><br><span class="line">Install-Module oh-my-posh -Scope CurrentUser -Verbose</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导入加载一个模块 （-Verbose 参数显示细节）</span></span><br><span class="line">Import-Module oh-my-posh -Verbose</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载一个模块</span></span><br><span class="line">Uninstall-Module -Name  oh-my-posh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 PowerShell 安装源 Gallery</span></span><br><span class="line">Get-PSRepository</span><br></pre></td></tr></table></figure>
<p>参考链接：</p>
<p><a href="https://docs.microsoft.com/zh-cn/powershell/module/powershellget/install-module?view=powershell-7">Install-Module (PowerShellGet) - PowerShell | Microsoft Docs</a></p>
<p><a href="https://docs.microsoft.com/zh-cn/powershell/module/powershellget/get-psrepository?view=powershell-7">Get-PSRepository (PowerShellGet) - PowerShell | Microsoft Docs</a></p>
<p><a href="https://www.powershellgallery.com/">PowerShell Gallery | Home</a></p>
<h2 id="字体选择">2.3 字体选择</h2>
<p>官方推荐 <a href="https://www.nerdfonts.com/font-downloads">Nerd Fonts - Iconic font aggregator, glyphs/icons collection, &amp; fonts patcher</a></p>
<p>下载自定后安装方法：</p>
<p>解压、进入字体目录、全选、右键、安装 即可</p>
<h1 id="posh-git-安装">3. Posh-Git 安装</h1>
<p><a href="https://github.com/dahlbyk/posh-git">dahlbyk/posh-git: A PowerShell environment for Git (github.com)</a></p>
<p>Posh-Git 提供了强大的 tab 补全功能， 并针对提示符进行了增强；可以在 Terminal 中使用</p>
<p>官方文档安装方法： <a href="https://git-scm.com/book/zh/v2/附录-A%3A-在其它环境中使用-Git-Git-在-PowerShell-中使用-Git">Git - Git 在 PowerShell 中使用 Git (git-scm.com)</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> posh<span class="literal">-git</span> <span class="literal">-Scope</span> CurrentUser <span class="literal">-Force</span></span><br></pre></td></tr></table></figure>
<p>这里不做详细说明</p>
]]></content>
      <categories>
        <category>Termianl</category>
        <category>PowerShell</category>
      </categories>
      <tags>
        <tag>Termianl,PowerShell,Oh-My-Posh</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Hexo</title>
    <url>/2020/04/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Fist Blog</title>
    <url>/2020/04/12/test-my-site/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>!<br />
This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info.<br />
If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>wpf control window 范围内默认样式对第一个控件无效</title>
    <url>/2021/12/02/wpf-control-window-%E8%8C%83%E5%9B%B4%E5%86%85%E9%BB%98%E8%AE%A4%E6%A0%B7%E5%BC%8F%E5%AF%B9%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%8E%A7%E4%BB%B6%E6%97%A0%E6%95%88/</url>
    <content><![CDATA[<h2 id="问题描述">1、问题描述</h2>
<p>wpf 页面设计中，有时候在 xaml 文件 Resource 中指定 window 范围的默认 control style，但是却发现对第一个控件不起作用，具体如下：</p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Window x:Class=&quot;TestApp.TestWindow&quot;</span><br><span class="line">        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span><br><span class="line">        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span><br><span class="line">        Title=&quot;TestWindow&quot; Height=&quot;400&quot; Width=&quot;500&quot;</span><br><span class="line">        WindowStyle=&quot;None&quot; WindowState=&quot;Maximized&quot;&gt;</span><br><span class="line">    &lt;Window.Resources&gt;</span><br><span class="line">        &lt;ResourceDictionary&gt;</span><br><span class="line">            &lt;ResourceDictionary.MergedDictionaries&gt;</span><br><span class="line">                &lt;ResourceDictionary Source=&quot;Resources/AllResources.xaml&quot;/&gt;</span><br><span class="line">                &lt;ResourceDictionary&gt;</span><br><span class="line">                    &lt;Style TargetType=&quot;&#123;x:Type Button&#125;&quot;&gt;</span><br><span class="line">                        &lt;Setter Property=&quot;FontSize&quot; Value=&quot;100&quot;/&gt;</span><br><span class="line">                    &lt;/Style&gt;</span><br><span class="line">                &lt;/ResourceDictionary&gt;</span><br><span class="line">            &lt;/ResourceDictionary.MergedDictionaries&gt;</span><br><span class="line">        &lt;/ResourceDictionary&gt;</span><br><span class="line">    &lt;/Window.Resources&gt;</span><br><span class="line">    &lt;Grid&gt;</span><br><span class="line">        &lt;Grid.ColumnDefinitions&gt;</span><br><span class="line">            &lt;ColumnDefinition/&gt;</span><br><span class="line">            &lt;ColumnDefinition/&gt;</span><br><span class="line">        &lt;/Grid.ColumnDefinitions&gt;</span><br><span class="line">        &lt;Button Grid.Column=&quot;0&quot; Content=&quot;1&quot; Name=&quot;Button1&quot;/&gt;</span><br><span class="line">        &lt;Button Grid.Column=&quot;1&quot; Content=&quot;2&quot; Name=&quot;Button2&quot;/&gt;</span><br><span class="line">    &lt;/Grid&gt;</span><br><span class="line">&lt;/Window&gt;</span><br></pre></td></tr></table></figure>
<p>button1 的 FontSize 并不是 100；但是 button2 却没问题；</p>
<p>通常我们使用下面的代码是没问题的；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Window x:Class=&quot;TestApp.TestWindow&quot;</span><br><span class="line">        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span><br><span class="line">        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span><br><span class="line">        Title=&quot;TestWindow&quot; Height=&quot;400&quot; Width=&quot;500&quot;</span><br><span class="line">        WindowStyle=&quot;None&quot; WindowState=&quot;Maximized&quot;&gt;</span><br><span class="line">    &lt;Window.Resources&gt;</span><br><span class="line">        &lt;Style TargetType=&quot;&#123;x:Type Button&#125;&quot;&gt;</span><br><span class="line">            &lt;Setter Property=&quot;FontSize&quot; Value=&quot;100&quot;/&gt;</span><br><span class="line">        &lt;/Style&gt;</span><br><span class="line">    &lt;/Window.Resources&gt;</span><br><span class="line">    &lt;Grid&gt;</span><br><span class="line">        &lt;Grid.ColumnDefinitions&gt;</span><br><span class="line">            &lt;ColumnDefinition/&gt;</span><br><span class="line">            &lt;ColumnDefinition/&gt;</span><br><span class="line">        &lt;/Grid.ColumnDefinitions&gt;</span><br><span class="line">        &lt;Button Grid.Column=&quot;0&quot; Content=&quot;1&quot; Name=&quot;Button1&quot;/&gt;</span><br><span class="line">        &lt;Button Grid.Column=&quot;1&quot; Content=&quot;2&quot; Name=&quot;Button2&quot;/&gt;</span><br><span class="line">    &lt;/Grid&gt;</span><br><span class="line">&lt;/Window&gt;</span><br></pre></td></tr></table></figure>
<h2 id="原因和解决方法">2、原因和解决方法</h2>
<h3 id="原因">2.1 原因</h3>
<p>因为把 Button 默认样式放在了 ResourceDictionary.MergedDictionaries 内部的ResourceDictionary 内了，这样在解析引用样式的时候会跳过第一个元素；</p>
<h3 id="解决方案">2.2 解决方案</h3>
<p>将 style 提到 ResourceDictionary.MergedDictionaries 之外</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Window.Resources&gt;</span><br><span class="line">    &lt;ResourceDictionary&gt;</span><br><span class="line">        &lt;ResourceDictionary.MergedDictionaries&gt;</span><br><span class="line">            &lt;ResourceDictionary Source=&quot;Resources/AllResources.xaml&quot;/&gt;</span><br><span class="line">        &lt;/ResourceDictionary.MergedDictionaries&gt;</span><br><span class="line">        &lt;Style TargetType=&quot;&#123;x:Type Button&#125;&quot;&gt;</span><br><span class="line">            &lt;Setter Property=&quot;FontSize&quot; Value=&quot;100&quot;/&gt;</span><br><span class="line">        &lt;/Style&gt;</span><br><span class="line">    &lt;/ResourceDictionary&gt;</span><br><span class="line">&lt;/Window.Resources&gt;</span><br><span class="line">&lt;Grid&gt;</span><br><span class="line">    &lt;Grid.ColumnDefinitions&gt;</span><br><span class="line">        &lt;ColumnDefinition/&gt;</span><br><span class="line">        &lt;ColumnDefinition/&gt;</span><br><span class="line">    &lt;/Grid.ColumnDefinitions&gt;</span><br><span class="line">    &lt;Button Grid.Column=&quot;0&quot; Content=&quot;1&quot; Name=&quot;Button1&quot;/&gt;</span><br><span class="line">    &lt;Button Grid.Column=&quot;1&quot; Content=&quot;2&quot; Name=&quot;Button2&quot;/&gt;</span><br><span class="line">&lt;/Grid&gt;</span><br></pre></td></tr></table></figure>
<p>参考链接：<a href="https://stackoverflow.com/questions/4811884/wpf-doesnt-apply-style-to-first-element">resources - WPF doesn't apply style to first element - Stack Overflow</a></p>
]]></content>
      <categories>
        <category>WPF</category>
      </categories>
      <tags>
        <tag>.Net</tag>
        <tag>C#</tag>
        <tag>WPF</tag>
        <tag>Style</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Windows Server 建立 Web Site 并关联 FTP Server</title>
    <url>/2022/01/25/%E4%BD%BF%E7%94%A8-Windows-Server-%E5%BB%BA%E7%AB%8B-Web-Site-%E5%B9%B6%E5%85%B3%E8%81%94-FTP-Server/</url>
    <content><![CDATA[<p>本文主要说明，如何在 windows server 中建立 web site，并关联 ftp 服务；最终达到的效果是，可以通过 https 链接访问 ftp 服务的所有内容；</p>
<p>系统环境：window server 2019</p>
<span id="more"></span>
<h1 id="开启系统必备的服务组件">1、开启系统必备的服务组件</h1>
<h1 id="新建-ssl-证书">2、新建 SSL 证书</h1>
<h1 id="建立-web-site-并关联-ftp-server">3、建立 web site 并关联 FTP Server</h1>
<h1 id="其他设置">4、其他设置</h1>
<h2 id="ftp-服务直通网络位置">4.1 ftp 服务直通网络位置</h2>
<h2 id="web-site-开启浏览文件目录结构的功能">4.2 web site 开启浏览文件目录结构的功能</h2>
<h2 id="web-site-绑定-https-访问">4.3 web site 绑定 https 访问</h2>
<p>参考资料：</p>
]]></content>
      <categories>
        <category>windwos</category>
        <category>web site</category>
        <category>ftp server</category>
      </categories>
      <tags>
        <tag>windwos</tag>
        <tag>web site</tag>
        <tag>ftp</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络基础</title>
    <url>/2022/03/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>本文以科普的性质说明计算机网络是一个什么样的东西，顺便回顾一下自己大学计算机网络的基本知识</p>
<span id="more"></span>
<p>自从互联网诞生以来，现在基本上绝大多数的程序都是网络程序或者跟网络有关，很少有单机版的程序了。</p>
<p>计算机网络本质上就是：多个计算机（网络设置）连载一起，像一张网一样，彼此可以直接或者间接的相互通信；世界上所有的电脑（网络设备）同通过这张网联系在一起，就是计算机网络，通俗讲就是互联网。</p>
<p>网络编程，就是在计算机网络（互联网）中实现两台或者多台计算机之间的数据通信。</p>
<p>网络编程按照编程语言的不同又可以划分成不同是编程实现方式，但是他们用到的原理和协议都是一致的。</p>
<h1 id="网络基础知识">1. 网络基础知识</h1>
<p>主要介绍，IP 地址，域名，网络模型等基本知识</p>
<h2 id="ip-地址">1.1 IP 地址</h2>
<p>在互联网中，一个 IP 地址用于唯一标识一个网络接口（Network Interface）。</p>
<p>一台联入互联网的计算机肯定有一个 IP 地址，但也可能有多个 IP 地址。</p>
<p>IP 地址分为 IPv4 和 IPv6 两种。</p>
<p>IPv4 采用32位地址，类似 <code>192.168.10.1</code>，</p>
<p>而 IPv6 采用128位地址，类似 <code>2001:0DA8:100A:0000:0000:1020:F2F3:1428</code>。 <span class="math display">\[
\begin{flalign}
&amp; IPv4 \,\, 地址总共有\,\, 2^{32}个，而\,\,IPv6 \,\, 地址则总共有\,\, 2^{128} 个（大约340万亿亿亿亿）&amp;
\end{flalign}
\]</span> IPv4 的地址目前已耗尽，而 IPv6 的地址是根本用不完的。</p>
<p>IP 地址又分为公网 IP 地址和内网 IP 地址。公网 IP 地址可以直接被访问，内网 IP 地址只能在内网访问。内网 IP 地址类似于：</p>
<ul>
<li>192.168.x.x</li>
<li>10.x.x.x</li>
</ul>
<p>有一个特殊的 IP 地址，称之为本机地址，它总是<code>127.0.0.1</code>。</p>
<p>IPv4 地址实际上是一个32位整数。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1707762444 = 0x65ca630c</span><br><span class="line">           = 65  ca  63 0c</span><br><span class="line">           = 101.202.99.12</span><br></pre></td></tr></table></figure>
<p>如果一台计算机只有一个网卡，并且接入了网络，那么，它有一个本机地址<code>127.0.0.1</code>，还有一个 IP 地址，例如<code>101.202.99.12</code>，可以通过这个 IP 地址接入网络。</p>
<p>如果一台计算机有两块网卡，那么除了本机地址，它可以有两个 IP 地址，可以分别接入两个网络。通常连接两个网络的设备是路由器或者交换机，它至少有两个 IP 地址，分别接入不同的网络，让网络之间连接起来。</p>
<p>如果两台计算机位于同一个网络，那么他们之间可以直接通信，因为他们的 IP 地址前段是相同的，也就是网络号是相同的。网络号是 IP 地址通过子网掩码过滤后得到的。例如：</p>
<p>某台计算机的 IP 是<code>101.202.99.2</code>，子网掩码是<code>255.255.255.0</code>，那么计算该计算机的网络号是：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">IP</span> = <span class="number">101.202</span>.<span class="number">99.2</span></span><br><span class="line"><span class="attr">Mask</span> = <span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"><span class="attr">Network</span> = IP &amp; Mask = <span class="number">101.202</span>.<span class="number">99.0</span></span><br></pre></td></tr></table></figure>
<p>每台计算机都需要正确配置 IP 地址和子网掩码，根据这两个就可以计算网络号，如果两台计算机计算出的网络号相同，说明两台计算机在同一个网络，可以直接通信。如果两台计算机计算出的网络号不同，那么两台计算机不在同一个网络，不能直接通信，它们之间必须通过路由器或者交换机这样的网络设备间接通信，我们把这种设备称为网关。</p>
<p>网关的作用就是连接多个网络，负责把来自一个网络的数据包发到另一个网络，这个过程叫路由。</p>
<p>所以，一台计算机的一个网卡会有3个关键配置：</p>
<ul>
<li>IP 地址，例如：<code>10.80.2.24</code></li>
<li>子网掩码，例如：<code>255.255.255.0</code></li>
<li>网关的 IP 地址，例如：<code>10.80.2.254</code></li>
</ul>
<figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220325191123462.png" alt="image-20220325191123462" /><figcaption aria-hidden="true">image-20220325191123462</figcaption>
</figure>
<h2 id="域名">1.2 域名</h2>
<p>因为直接记忆 IP 地址非常困难，所以我们通常使用域名访问某个特定的服务。</p>
<p>域名解析服务器 DNS 负责把域名翻译成对应的 IP，客户端再根据 IP 地址访问服务器。</p>
<p>用<code>nslookup</code>可以查看域名对应的 IP 地址：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nslookup buctllx.github.io</span></span><br><span class="line">Server:  bogon</span><br><span class="line">Address:  10.80.253.253</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:    buctllx.github.io</span><br><span class="line">Addresses:  2606:50c0:8002::153</span><br><span class="line">          2606:50c0:8001::153</span><br><span class="line">          2606:50c0:8000::153</span><br><span class="line">          2606:50c0:8003::153</span><br><span class="line">          185.199.110.153</span><br><span class="line">          185.199.109.153</span><br><span class="line">          185.199.111.153</span><br><span class="line">          185.199.108.153</span><br></pre></td></tr></table></figure>
<p>有一个特殊的本机域名<code>localhost</code>，它对应的 IP 地址总是本机地址<code>127.0.0.1</code>。</p>
<h2 id="网络模型">1.3 网络模型</h2>
<p>由于计算机网络从底层的传输到高层的软件设计十分复杂，要合理地设计计算机网络模型，必须采用分层模型，每一层负责处理自己的操作。OSI（Open System Interconnect）网络模型是ISO组织定义的一个计算机互联的标准模型，注意它只是一个定义，目的是为了简化网络各层的操作，提供标准接口便于实现和维护。这个模型从上到下依次是：</p>
<ul>
<li>应用层，提供应用程序之间的通信；</li>
<li>表示层：处理数据格式，加解密等等；</li>
<li>会话层：负责建立和维护会话；</li>
<li>传输层：负责提供端到端的可靠传输；</li>
<li>网络层：负责根据目标地址选择路由来传输数据；</li>
<li>链路层和物理层负责把数据进行分片并且真正通过物理网络传输，例如，无线网、光纤等。</li>
</ul>
<p>互联网实际使用的TCP/IP模型并不是对应到OSI的7层模型，而是大致对应OSI的5层模型：</p>
<table>
<tr>
<th width="200px" height="100px">
<font color="#0A87F5" size=20>OSI</font>
</th>
<th width="201px" height="30">
<font color="#0A87F5" size=20>TCP/IP</font>
</th>
</tr>
<tr>
<td>
应用层
</td>
<td rowspan="3">
应用层
</td>
</tr>
<tr>
<td>
表示层
</td>
</tr>
<tr>
<td>
会话层
</td>
</tr>
<tr>
<td>
传输层
</td>
<td>
传输层
</td>
</tr>
<tr>
<td>
网络层
</td>
<td>
IP层
</td>
</tr>
<tr>
<td>
链路层
</td>
<td rowspan="2">
网络接口层
</td>
</tr>
<tr>
<td>
物理层
</td>
</tr>
</table>
<h1 id="常用网络协议">2. 常用网络协议</h1>
<p>虽然大家现在对互联网很熟悉，但是计算机网络的出现比互联网要早很多。</p>
<p>计算机为了联网，就必须规定通信协议，早期的计算机网络，都是由各厂商自己规定一套协议，IBM、Apple和Microsoft都有各自的网络协议，互不兼容，这就好比一群人有的说英语，有的说中文，有的说德语，说同一种语言的人可以交流，不同的语言之间就不行了。</p>
<p>为了把全世界的所有不同类型的计算机都连接起来，就必须规定一套全球通用的协议，为了实现互联网这个目标，互联网协议簇（Internet Protocol Suite）就是通用协议标准。Internet是由inter和net两个单词组合起来的，原意就是连接“网络”的网络，有了Internet，任何私有网络，只要支持这个协议，就可以联入互联网。</p>
<p>UDP 协议（User Datagram Protocol）是一种数据报文协议，它是无连接协议，不保证可靠传输。因为 UDP 协议在通信前不需要建立连接，因此它的传输效率比TCP高，而且UDP协议比TCP协议要简单得多。</p>
<p>选择 UDP 协议时，传输的数据通常是能容忍丢失的，例如，一些语音视频通信的应用会选择 UDP 协议。</p>
<h2 id="tcpip-协议">2.1 TCP/IP 协议</h2>
<p>因为互联网协议包含了上百种协议标准，但是最重要的两个协议是 TCP 和 IP 协议，所以，大家把互联网的协议简称 TCP/IP 协议。</p>
<p>网络通信的时候，双方必须知道对方的标识，好比发邮件必须知道对方的邮件地址。</p>
<p>互联网上每个计算机的唯一标识就是 IP 地址。如果一台计算机同时接入到两个或更多的网络，比如路由器，它就会有两个或多个 IP 地址，所以，IP地址对应的实际上是计算机的网络接口，通常是网卡。</p>
<p>IP 协议负责把数据从一台计算机通过网络发送到另一台计算机。数据被分割成一小块一小块，然后通过 IP 包发送出去。由于互联网链路复杂，两台计算机之间经常有多条线路，因此，路由器就负责决定如何把一个 IP 包转发出去。IP 包的特点是按块发送，途径多个路由，但不保证能到达，也不保证顺序到达。</p>
<p>IP 协议是一个分组交换，它不保证可靠传输。</p>
<p>而 TCP 协议是传输控制协议，它是面向连接的协议，支持可靠传输和双向通信。</p>
<p>TCP 协议是建立在 IP 协议之上的，简单地说，IP 协议只负责发数据包，不保证顺序和正确性，而 TCP 协议负责在两台计算机之间建立可靠连接，保证数据包按顺序到达。</p>
<p>TCP协议会通过握手建立连接，然后，对每个 IP 包编号，确保对方按顺序收到，如果包丢掉了，就自动重发；传输完后还需要断开连接。</p>
<p>TCP 协议之所以能保证数据的可靠传输，是通过接收确认、超时重传这些机制实现的。并且，TCP协议允许双向通信，即通信双方可以同时发送和接收数据。</p>
<p>TCP 协议也是应用最广泛的协议，许多高级协议都是建立在 TCP 协议之上的，例如 HTTP、SMTP 等。</p>
<p>一个 TCP 报文除了包含要传输的数据外，还包含源 IP 地址和目标 IP 地址，源端口和目标端口。</p>
<p>端口有什么作用？在两台计算机通信时，只发 IP 地址是不够的，因为同一台计算机上跑着多个网络程序。一个 TCP 报文来了之后，到底是交给浏览器还是 QQ，就需要端口号来区分。每个网络程序都向操作系统申请唯一的端口号，这样，两个进程在两台计算机之间建立网络连接就需要各自的 IP地址和各自的端口号。</p>
<p>一个进程也可能同时与多个计算机建立链接，因此它会申请很多端口。</p>
<h2 id="udp-协议">2.2 UDP 协议</h2>
<p>TCP是建立可靠连接，并且通信双方都可以以流的形式发送数据。相对 TCP，UDP 则是面向无连接的协议。</p>
<p>使用 UDP 协议时，不需要建立连接，只需要知道对方的 IP 地址和端口号，就可以直接发数据包。但是，能不能到达就不知道了。</p>
<p><strong>缺点：</strong>传输数据不可靠</p>
<p><strong>优点：</strong>速度快，对于不要求可靠到达的数据，就可以使用 UDP 协议。</p>
<p>此外，服务器绑定 UDP 端口和 TCP 端口互不冲突，也就是说，UDP 的 80 端口与 TCP 的 80 端口可以各自绑定。</p>
<h2 id="http-协议">2.3 HTTP 协议</h2>
<p>在 Web 应用中，服务器把网页传给浏览器，实际上就是把网页的 HTML 代码发送给浏览器，让浏览器显示出来。</p>
<p>而浏览器和服务器之间的传输协议是 HTTP，所以：</p>
<ul>
<li>HTML 是一种用来定义网页的文本，会 HTML，就可以编写网页；</li>
<li>HTTP 是在网络上传输 HTML 的协议，用于浏览器和服务器的通信。</li>
</ul>
<p>在举例子之前，我们需要安装 Google 的 <a href="http://www.google.com/intl/zh-CN/chrome/">Chrome 浏览器</a>。或者 Microsoft 的 <a href="https://www.microsoft.com/zh-cn">Edge 浏览器</a>。本质上都是基于 Chromium 内核的浏览器</p>
<p>为什么要使用 Chromium 内核的浏览器而不是 IE 呢？因为 IE 实在是太慢了，并且，IE 对于开发和调试 Web 应用程序完全是一点用也没有。</p>
<p>我们需要在浏览器很方便地调试我们的 Web 应用，而 Chromium 提供了一套完整地调试工具，非常适合 Web 开发。</p>
<p>安装好 Chromium 内核的浏览器后，打开浏览器，按 F12，就可以显示开发者工具：</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220325193907204.png" alt="image-20220325193907204" /><figcaption aria-hidden="true">image-20220325193907204</figcaption>
</figure>
<p><code>Elements</code>显示网页的结构，<code>Network</code>显示浏览器和服务器的通信。我们点<code>Network</code>，确保第一个小红灯亮着，Chrome就会记录所有浏览器和服务器之间的通信：</p>
<p>当我们在地址栏输入<code>www.sina.com.cn</code>时，浏览器将显示新浪的首页。在这个过程中，浏览器都干了哪些事情呢？通过<code>Network</code>的记录，我们就可以知道。在<code>Network</code>中，定位到第一条记录，点击，右侧将显示<code>Request Headers</code>，点击右侧的<code>view source</code>，我们就可以看到浏览器发给新浪服务器的请求：</p>
<p>最主要的头两行分析如下，第一行：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure>
<p><code>GET</code>表示一个读取请求，将从服务器获得网页数据，<code>/</code>表示URL的路径，URL总是以<code>/</code>开头，<code>/</code>就表示首页，最后的<code>HTTP/1.1</code>指示采用的HTTP协议版本是1.1。目前HTTP协议的版本就是1.1，但是大部分服务器也支持1.0版本，主要区别在于1.1版本允许多个HTTP请求复用一个TCP连接，以加快传输速度。</p>
<p>从第二行开始，每一行都类似于<code>Xxx: abcdefg</code>：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">Hos<span class="variable">t:</span> www.sina.<span class="keyword">com</span>.<span class="keyword">cn</span></span><br></pre></td></tr></table></figure>
<p>表示请求的域名是<code>www.sina.com.cn</code>。如果一台服务器有多个网站，服务器就需要通过<code>Host</code>来区分浏览器请求的是哪个网站。</p>
<p>继续往下找到<code>Response Headers</code>，点击<code>view source</code>，显示服务器返回的原始响应数据：</p>
<p>HTTP响应分为Header和Body两部分（Body是可选项），我们在<code>Network</code>中看到的Header最重要的几行如下：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">200 </span>OK</span><br></pre></td></tr></table></figure>
<p><code>200</code>表示一个成功的响应，后面的<code>OK</code>是说明。失败的响应有<code>404 Not Found</code>：网页不存在，<code>500 Internal Server Error</code>：服务器内部出错，等等。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">Content-<span class="keyword">Type</span>: <span class="type">text</span>/html</span><br></pre></td></tr></table></figure>
<p><code>Content-Type</code>指示响应的内容，这里是<code>text/html</code>表示HTML网页。请注意，浏览器就是依靠<code>Content-Type</code>来判断响应的内容是网页还是图片，是视频还是音乐。浏览器并不靠URL来判断响应的内容，所以，即使URL是<code>http://example.com/abc.jpg</code>，它也不一定就是图片。</p>
<p>HTTP响应的Body就是HTML源码，我们在菜单栏选择“视图”，“开发者”，“查看网页源码”就可以在浏览器中直接查看HTML源码：</p>
<p>当浏览器读取到新浪首页的HTML源码后，它会解析HTML，显示页面，然后，根据HTML里面的各种链接，再发送HTTP请求给新浪服务器，拿到相应的图片、视频、Flash、JavaScript脚本、CSS等各种资源，最终显示出一个完整的页面。所以我们在<code>Network</code>下面能看到很多额外的HTTP请求。</p>
<h3 id="http-请求">2.3.1 HTTP 请求</h3>
<p>跟踪了新浪的首页，我们来总结一下HTTP请求的流程：</p>
<p>步骤1：浏览器首先向服务器发送HTTP请求，请求包括：</p>
<p>方法：<code>GET</code>还是<code>POST</code>，<code>GET</code>仅请求资源，<code>POST</code>会附带用户数据；</p>
<p>路径：<code>/full/url/path</code>；</p>
<p>域名：由Host头指定：<code>Host: www.sina.com.cn</code></p>
<p>以及其他相关的Header；</p>
<p>如果是POST，那么请求还包括一个Body，包含用户数据。</p>
<p>步骤2：服务器向浏览器返回HTTP响应，响应包括：</p>
<p>响应代码：<code>200</code>表示成功，<code>3xx</code>表示重定向，<code>4xx</code>表示客户端发送的请求有错误，<code>5xx</code>表示服务器端处理时发生了错误；</p>
<p>响应类型：由<code>Content-Type</code>指定，例如：<code>Content-Type: text/html;charset=utf-8</code>表示响应类型是HTML文本，并且编码是<code>UTF-8</code>，<code>Content-Type: image/jpeg</code>表示响应类型是JPEG格式的图片；</p>
<p>以及其他相关的Header；</p>
<p>通常服务器的HTTP响应会携带内容，也就是有一个Body，包含响应的内容，网页的HTML源码就在Body中。</p>
<p>步骤3：如果浏览器还需要继续向服务器请求其他资源，比如图片，就再次发出HTTP请求，重复步骤1、2。</p>
<p>Web采用的HTTP协议采用了非常简单的请求-响应模式，从而大大简化了开发。当我们编写一个页面时，我们只需要在HTTP响应中把HTML发送出去，不需要考虑如何附带图片、视频等，浏览器如果需要请求图片和视频，它会发送另一个HTTP请求，因此，一个HTTP请求只处理一个资源。</p>
<p>HTTP协议同时具备极强的扩展性，虽然浏览器请求的是<code>http://www.sina.com.cn/</code>的首页，但是新浪在HTML中可以链入其他服务器的资源，比如<code>&lt;img src="http://i1.sinaimg.cn/home/2013/1008/U8455P30DT20131008135420.png"&gt;</code>，从而将请求压力分散到各个服务器上，并且，一个站点可以链接到其他站点，无数个站点互相链接起来，就形成了World Wide Web，简称“三达不溜”（WWW）。</p>
<h3 id="http-格式">2.3.2 HTTP 格式</h3>
<p>每个HTTP请求和响应都遵循相同的格式，一个HTTP包含Header和Body两部分，其中Body是可选的。</p>
<p>HTTP协议是一种文本协议，所以，它的格式也非常简单。HTTP GET请求的格式：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/path</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Header1</span><span class="punctuation">: </span>Value1</span><br><span class="line"><span class="attribute">Header2</span><span class="punctuation">: </span>Value2</span><br><span class="line"><span class="attribute">Header3</span><span class="punctuation">: </span>Value3</span><br></pre></td></tr></table></figure>
<p>每个Header一行一个，换行符是<code>\r\n</code>。</p>
<p>HTTP POST请求的格式：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/path</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Header1</span><span class="punctuation">: </span>Value1</span><br><span class="line"><span class="attribute">Header2</span><span class="punctuation">: </span>Value2</span><br><span class="line"><span class="attribute">Header3</span><span class="punctuation">: </span>Value3</span><br><span class="line"></span><br><span class="line"><span class="gams"><span class="function"><span class="title">body</span></span> data goes here...</span></span><br></pre></td></tr></table></figure>
<p>当遇到连续两个<code>\r\n</code>时，Header部分结束，后面的数据全部是Body。</p>
<p>HTTP响应的格式：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">200</span> OK</span><br><span class="line"><span class="attribute">Header1</span>: Value<span class="number">1</span></span><br><span class="line"><span class="attribute">Header2</span>: Value<span class="number">2</span></span><br><span class="line"><span class="attribute">Header3</span>: Value<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">body</span> data goes here...</span><br></pre></td></tr></table></figure>
<p>HTTP响应如果包含body，也是通过<code>\r\n\r\n</code>来分隔的。请再次注意，Body的数据类型由<code>Content-Type</code>头来确定，如果是网页，Body就是文本，如果是图片，Body就是图片的二进制数据。</p>
<p>当存在<code>Content-Encoding</code>时，Body数据是被压缩的，最常见的压缩方式是gzip，所以，看到<code>Content-Encoding: gzip</code>时，需要将Body数据先解压缩，才能得到真正的数据。压缩的目的在于减少Body的大小，加快网络传输。</p>
<p>要详细了解HTTP协议，推荐“<a href="http://shop.oreilly.com/product/9781565925090.do">HTTP: The Definitive Guide</a>”一书，非常不错，有中文译本：</p>
<p><a href="http://t.cn/R7FguRq">HTTP权威指南</a></p>
<p>参考文档：</p>
<p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1305163149082658">网络编程基础 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017804782304672">HTTP协议简介 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 使用方法</title>
    <url>/2022/03/29/Maven-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Maven是一个 Java 项目管理和构建的工具，它可以定义项目结构、项目依赖，并使用统一的方式进行自动化构建，是 Java 项目不可缺少的工具。</p>
<p>本文主要介绍 Java 包管理工具 Maven 的一些使用方法，主要参考了下面的一些资料。</p>
<p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1255945359327200">Maven基础 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p>
<span id="more"></span>
<p>在 Java 开发过程中，很多时候我们会用到第三方封装好了的功能模块，这些功能都是以 jar 包的形式存在的，首先，我们需要确定引入哪些依赖包。例如，如果我们需要用到 <a href="https://commons.apache.org/proper/commons-logging/">commons logging</a>，我们就必须把 commons logging 的 jar 包放入classpath。如果我们还需要 <a href="https://logging.apache.org/log4j/">log4j</a>，就需要把 <a href="https://logging.apache.org/log4j/">log4j</a> 相关的 jar 包都放到 classpath 中。这些就是最简单的依赖包的管理。现实使用过程中远比这要复杂，因为 <a href="https://logging.apache.org/log4j/">log4j</a> 可能有依赖了其他的 jar 包，或者有多个 jar 包都依赖某个 jar 包，甚至有不同的版本的要求；</p>
<p>因此仅仅靠人为管理这些 jar 包，在项目开发中也是一件复杂、繁琐、耗时的事情，这时候就需要有一个工具，帮我们管理这些 jar 包，因此 Maven 就出现了。</p>
<p>Maven就是是专门为Java项目打造的管理和构建工具，它的主要功能有：</p>
<ul>
<li>提供了一套标准化的项目结构；</li>
<li>提供了一套标准化的构建流程（编译，测试，打包，发布……）；</li>
<li>提供了一套依赖管理机制。</li>
</ul>
<p>从上面可以看出来：Maven 不仅仅是包管理的那么简单，他还可以定义我们 Java 项目的文件结构，甚至干预自动化构建的过程。下面我们会一一展开来讲。</p>
<h1 id="maven-安装">1. Maven 安装</h1>
<p>要安装 Maven，可以从 <a href="https://maven.apache.org/">Maven 官网</a> 下载最新的Maven 3.6.x，然后在本地解压，设置几个环境变量：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">M2_HOME</span>=/path/to/maven-<span class="number">3.6</span>.x</span><br><span class="line"><span class="attr">PATH</span>=<span class="variable">$PATH</span>:<span class="variable">$M2_HOME</span>/bin</span><br></pre></td></tr></table></figure>
<p>Windows可以把<code>%M2_HOME%\bin</code>添加到系统Path变量中。</p>
<p>然后，打开命令行窗口，输入<code>mvn -version</code>，应该看到Maven的版本信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌────────────────────────────────────────────────────────┐</span><br><span class="line">│Command Prompt                                    - □ x │</span><br><span class="line">├────────────────────────────────────────────────────────┤</span><br><span class="line">│Microsoft Windows [Version 10.0.0]                      │</span><br><span class="line">│(c) 2015 Microsoft Corporation. All rights reserved.    │</span><br><span class="line">│                                                        │</span><br><span class="line">│C:\&gt; mvn -version                                       │</span><br><span class="line">│Apache Maven 3.6.0 (97c98ec64a1fdfee7767ce5ffb20918...) │</span><br><span class="line">│Maven home: C:\Users\liaoxuefeng\maven                  │</span><br><span class="line">│Java version: ...                                       │</span><br><span class="line">│...                                                     │</span><br><span class="line">│C:\&gt; _                                                  │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>
<p>如果提示命令未找到，说明系统PATH路径有误，需要修复后再运行。</p>
<h2 id="idea-中的-maven">1.1 IDEA 中的 Maven</h2>
<p>在 IDEA 的设置中搜索 Maven 可以看到以下设置信息：</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220329140137485.png" alt="image-20220329140137485" /><figcaption aria-hidden="true">image-20220329140137485</figcaption>
</figure>
<p>这里我们看出来，新版的 IDEA 默认包含了 Maven 工具，具体路径和用户的安装路径有关，这里列出来我的安装路径：</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>etBrains<span class="symbol">\I</span>ntelliJ IDEA 2021.3.3<span class="symbol">\p</span>lugins<span class="symbol">\m</span>aven<span class="symbol">\l</span>ib<span class="symbol">\m</span>aven3<span class="symbol">\b</span>in</span><br><span class="line">D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>etBrains<span class="symbol">\I</span>ntelliJ IDEA 2021.3.3<span class="symbol">\p</span>lugins<span class="symbol">\m</span>aven<span class="symbol">\l</span>ib<span class="symbol">\m</span>aven3<span class="symbol">\c</span>onf<span class="symbol">\s</span>ettings.xml</span><br></pre></td></tr></table></figure>
<h1 id="maven-项目结构">2. Maven 项目结构</h1>
<p>一个使用 Maven 管理的普通的 Java 项目，它的目录结构默认如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a-maven-project</span><br><span class="line">├── pom.xml</span><br><span class="line">├── src</span><br><span class="line">│   ├── main</span><br><span class="line">│   │   ├── java</span><br><span class="line">│   │   └── resources</span><br><span class="line">│   └── test</span><br><span class="line">│       ├── java</span><br><span class="line">│       └── resources</span><br><span class="line">└── target</span><br></pre></td></tr></table></figure>
<p><code>a-maven-project</code>是项目名（项目的根目录），</p>
<p><code>pom.xml</code>是项目描述文件</p>
<p><code>src/main/java</code>是存放Java源码的目录，</p>
<p><code>src/main/resources</code>是存放资源文件的目录，</p>
<p><code>src/test/java</code>是存放测试源码的目录，</p>
<p><code>src/test/resources</code>是存放测试资源的目录，</p>
<p><code>target</code>目录里存放的是最后，所有编译、打包生成的文件</p>
<p>这些就是一个Maven项目的标准目录结构。<font color="red">所有的目录结构都是约定好的标准结构，我们千万不要随意修改目录结构。</font>使用标准结构不需要做任何配置，Maven就可以正常使用。</p>
<p>这里先说明，最重要的是 pom.xml 文件，后面我们会重点介绍。</p>
<h1 id="pom.xml-文件说明">3. pom.xml 文件说明</h1>
<p>POM 全称是 Project Object Model，即项目对象模型。</p>
<p>pom.xml 文件以 xml 的形式描述项目的信息，包括项目名称、版本、项目id、项目的依赖关系、编译环境、持续集成、项目团队、贡献管理、生成报表等等。总之，它包含了所有的项目 信息。</p>
<p>我们再来看一个最简单的项目描述<code>pom.xml</code>文件，它的内容长得像下面：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ifc_file_parser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>ifc_file_parser<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>ifc_file_parser<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;mysql&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;scope&gt;runtime&lt;/scope&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>modelVersion</strong> 描述这个POM文件是遵从哪个版本的项目描述符。 <strong>groupId</strong> 针对一个项目的普遍唯一识别符。通常用一个完全正确的包的名字来与其他项目的类似名字来进行区分（比如：org.apache.maven)。 <strong>artifactId</strong> 在给定groupID 的group里面为artifact 指定的标识符是唯一的 ， artifact 代表的是被制作或者被一个project应用的组件(产出物)。 <strong>version</strong> 当前项目产生的 artifact 的版本</p>
<p><font color="red"><strong>以上4个元素缺一不可，其中 groupId、artifactId、version 是描述依赖的项目唯一标志。</strong></font></p>
<h2 id="基本信息">3.1 基本信息</h2>
<p>在 project 节点内部，一般用于描述项目的名称，id，版本，等基础信息，如下:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ifc_file_parser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>ifc_file_parser<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>ifc_file_parser&lt;/description</span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>...<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>...<span class="tag">&lt;/<span class="name">description</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>...<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>...<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">licenses</span>&gt;</span>...<span class="tag">&lt;/<span class="name">licenses</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">organization</span>&gt;</span>...<span class="tag">&lt;/<span class="name">organization</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span>...<span class="tag">&lt;/<span class="name">developers</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">contributors</span>&gt;</span>...<span class="tag">&lt;/<span class="name">contributors</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="继承信息模块管理">3.2 继承信息（模块管理）</h2>
<p>在软件开发中，把一个大项目分拆为多个模块是降低软件复杂度的有效方法：</p>
<p>在 pom 文件中，可以通过 <parent> 标签描述项目的继承信息，这样可以把多个项目相同部分的描述信息放在一起作为公共基础描述 pom 文件；然后在其他子项目的 pom 文件中通过 <parent> 标签继承 公共通用的项目设置信息。</p>
<p>具体操作如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                        ┌ ─ ─ ─ ─ ─ ─ ┐</span><br><span class="line">                          ┌─────────┐</span><br><span class="line">                        │ │Module A │ │</span><br><span class="line">                          └─────────┘</span><br><span class="line">┌──────────────┐ split  │ ┌─────────┐ │</span><br><span class="line">│Single Project│───────&gt;  │Module B │</span><br><span class="line">└──────────────┘        │ └─────────┘ │</span><br><span class="line">                          ┌─────────┐</span><br><span class="line">                        │ │Module C │ │</span><br><span class="line">                          └─────────┘</span><br><span class="line">                        └ ─ ─ ─ ─ ─ ─ ┘</span><br></pre></td></tr></table></figure>
<p>对于Maven工程来说，原来是一个大项目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">single-project</span><br><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br></pre></td></tr></table></figure>
<p>现在可以分拆成3个模块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mutiple-project</span><br><span class="line">├── module-a</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">├── module-b</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">└── module-c</span><br><span class="line">    ├── pom.xml</span><br><span class="line">    └── src</span><br></pre></td></tr></table></figure>
<p>Maven可以有效地管理多个模块，我们只需要把每个模块当作一个独立的Maven项目，它们有各自独立的<code>pom.xml</code>。例如，模块A的<code>pom.xml</code>：</p>
<div class="tabs" id="multi_pom_def"><ul class="nav-tabs"><li class="tab active"><a href="#multi_pom_def-1">模块A`pom.xml`文件</a></li><li class="tab"><a href="#multi_pom_def-2">模块B`pom.xml`文件</a></li></ul><div class="tab-content"><div class="tab-pane active" id="multi_pom_def-1"><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itranswarp.learnjava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>module-a<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>module-a<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="multi_pom_def-2"><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itranswarp.learnjava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>module-b<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>module-b<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div></div>
<p>可以看出来，模块A和模块B的<code>pom.xml</code>高度相似，因此，我们可以提取出共同部分作为<code>parent</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itranswarp.learnjava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意到 parent pom.xml 中的<code>&lt;packaging&gt;</code>是<code>pom</code>而不是<code>jar</code>，因为<code>parent</code>本身不含任何Java代码。编写<code>parent</code>的<code>pom.xml</code>只是为了在各个模块中减少重复的配置。现在我们的整个工程结构如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">multiple-project</span><br><span class="line">├── pom.xml</span><br><span class="line">├── parent</span><br><span class="line">│   └── pom.xml</span><br><span class="line">├── module-a</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">├── module-b</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">└── module-c</span><br><span class="line">    ├── pom.xml</span><br><span class="line">    └── src</span><br></pre></td></tr></table></figure>
<p>这样模块A就可以简化为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itranswarp.learnjava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>module-a<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>module-a<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果想看项目(父或子)的完全的pom结构，可以运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn help:effective-pom</span><br></pre></td></tr></table></figure>
<p>模块B、模块C都可以直接从<code>parent</code>继承，大幅简化了<code>pom.xml</code>的编写。</p>
<p>如果模块A依赖模块B，则模块A需要模块B的jar包才能正常编译，我们需要在模块A中引入模块B：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itranswarp.learnjava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>module-b<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最后，在编译的时候，需要在根目录创建一个<code>pom.xml</code>统一编译：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itranswarp.learnjava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>build<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>build<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>module-a<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>module-b<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>module-c<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样，在根目录执行<code>mvn clean package</code>时，Maven 根据项目根目录的<code>pom.xml</code>找到包括<code>parent</code>在内的共4个<code>&lt;module&gt;</code>，一次性全部编译。</p>
<h2 id="依赖管理">3.3 依赖管理</h2>
<p>如果我们的项目依赖第三方的jar包，例如commons logging，</p>
<p>那么问题来了：commons logging发布的jar包在哪下载？</p>
<p>如果我们还希望依赖log4j，那么使用log4j需要哪些jar包？</p>
<p>类似的依赖还包括：JUnit，JavaMail，MySQL驱动等等，</p>
<p>一个可行的方法是通过搜索引擎搜索到项目的官网，然后手动下载zip包，解压，放入classpath。</p>
<p>但是，这个过程非常繁琐。</p>
<p>Maven 通过 pom 文件的 <dependencies> 标签，解决了依赖管理问题。</p>
<p>例如，我们的项目依赖<code>abc</code>这个jar包，而<code>abc</code>又依赖<code>xyz</code>这个jar包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──────────────┐</span><br><span class="line">│Sample Project│</span><br><span class="line">└──────────────┘</span><br><span class="line">        │</span><br><span class="line">        ▼</span><br><span class="line">┌──────────────┐</span><br><span class="line">│     abc      │</span><br><span class="line">└──────────────┘</span><br><span class="line">        │</span><br><span class="line">        ▼</span><br><span class="line">┌──────────────┐</span><br><span class="line">│     xyz      │</span><br><span class="line">└──────────────┘</span><br></pre></td></tr></table></figure>
<p>当我们声明了<code>abc</code>的依赖时，Maven 自动把<code>abc</code>和<code>xyz</code>都加入了我们的项目依赖，不需要我们自己去研究<code>abc</code>是否需要依赖<code>xyz</code>。</p>
<p>因此，Maven 的第一个作用就是解决依赖管理。我们声明了自己的项目需要<code>abc</code>，Maven会自动导入<code>abc</code>的 jar 包，再判断出<code>abc</code>需要<code>xyz</code>，又会自动导入<code>xyz</code>的jar包，这样，最终我们的项目会依赖<code>abc</code>和<code>xyz</code>两个jar包。</p>
<p>我们来看一个复杂依赖示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当我们声明一个<code>spring-boot-starter-web</code>依赖时，Maven会自动解析并判断最终需要大概二三十个其他依赖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-boot-starter-web</span><br><span class="line">  spring-boot-starter</span><br><span class="line">    spring-boot</span><br><span class="line">    sprint-boot-autoconfigure</span><br><span class="line">    spring-boot-starter-logging</span><br><span class="line">      logback-classic</span><br><span class="line">        logback-core</span><br><span class="line">        slf4j-api</span><br><span class="line">      jcl-over-slf4j</span><br><span class="line">        slf4j-api</span><br><span class="line">      jul-to-slf4j</span><br><span class="line">        slf4j-api</span><br><span class="line">      log4j-over-slf4j</span><br><span class="line">        slf4j-api</span><br><span class="line">    spring-core</span><br><span class="line">    snakeyaml</span><br><span class="line">  spring-boot-starter-tomcat</span><br><span class="line">    tomcat-embed-core</span><br><span class="line">    tomcat-embed-el</span><br><span class="line">    tomcat-embed-websocket</span><br><span class="line">      tomcat-embed-core</span><br><span class="line">  jackson-databind</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<p>如果我们自己去手动管理这些依赖是非常费时费力的，而且出错的概率很大。</p>
<h3 id="依赖关系">3.3.1 依赖关系</h3>
<p>Maven 定义了几种依赖关系，通过 <scope> 标签描述，分别是</p>
<ol type="1">
<li><code>compile</code></li>
<li><code>test</code></li>
<li><code>runtime</code></li>
<li><code>provided</code></li>
</ol>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">scope</th>
<th style="text-align: left;">说明</th>
<th style="text-align: left;">示例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">compile</td>
<td style="text-align: left;">编译时需要用到该jar包（默认）</td>
<td style="text-align: left;">commons-logging</td>
</tr>
<tr class="even">
<td style="text-align: left;">test</td>
<td style="text-align: left;">编译 Test 时需要用到该jar包</td>
<td style="text-align: left;">junit</td>
</tr>
<tr class="odd">
<td style="text-align: left;">runtime</td>
<td style="text-align: left;">编译时不需要，但运行时需要用到</td>
<td style="text-align: left;">mysql</td>
</tr>
<tr class="even">
<td style="text-align: left;">provided</td>
<td style="text-align: left;">编译时需要用到，但运行时由 JDK 或某个服务器提供</td>
<td style="text-align: left;">servlet-api</td>
</tr>
</tbody>
</table>
<h4 id="compile-依赖">3.3.1.1 compile 依赖</h4>
<p>最常用的一致依赖，Maven会把这种类型的依赖直接放入 classpath。</p>
<h4 id="test-依赖">3.3.1.2 test 依赖</h4>
<p>表示仅在测试时使用，正常运行时并不需要。最常用的<code>test</code>依赖就是 JUnit：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="runtime-依赖">3.3.1.3 runtime 依赖</h4>
<p>表示编译时不需要，但运行时需要。最典型的<code>runtime</code>依赖是 JDBC 驱动，例如 MySQL 驱动：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.48<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="provided-依赖">3.3.1.4 provided 依赖</h4>
<p>表示编译时需要，但运行时不需要。最典型的<code>provided</code>依赖是 Servlet API，编译的时候需要，但是运行时，Servlet 服务器内置了相关的 jar，所以运行期不需要：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="从何处下载所需的依赖">3.3.2 从何处下载所需的依赖</h3>
<p>最后一个问题是，Maven如何知道从何处下载所需的依赖？也就是相关的 jar包？</p>
<p>答案是Maven维护了一个中央仓库（<a href="https://repo1.maven.org/">repo1.maven.org</a>）</p>
<p>所有第三方库将自身的jar以及相关信息上传至中央仓库，Maven就可以从中央仓库把所需依赖下载到本地。</p>
<p>Maven并不会每次都从中央仓库下载 jar 包。一个 jar 包一旦被下载过，就会被 Maven 自动缓存在本地目录（用户主目录的<code>.m2</code>目录），所以，除了第一次编译时因为下载需要时间会比较慢，后续过程因为有本地缓存，并不会重复下载相同的jar包。</p>
<h3 id="唯一id">3.3.3 唯一ID</h3>
<p>对于某个依赖，Maven只需要3个变量即可唯一确定某个jar包：</p>
<ul>
<li>groupId：属于组织的名称，类似Java的包名；</li>
<li>artifactId：该jar包自身的名称，类似Java的类名；</li>
<li>version：该jar包的版本。</li>
</ul>
<p>通过上述3个变量，即可唯一确定某个 jar 包。Maven 通过对jar包进行 PGP 签名确保任何一个 jar 包一经发布就无法修改。修改已发布jar包的唯一方法是发布一个新版本。</p>
<p>因此，某个 jar 包一旦被 Maven 下载过，即可永久地安全缓存在本地。</p>
<p><strong>注：只有以<code>-SNAPSHOT</code>结尾的版本号会被Maven视为开发版本，开发版本每次都会重复下载，这种SNAPSHOT版本只能用于内部私有的 Maven repo，公开发布的版本不允许出现SNAPSHOT。</strong></p>
<h3 id="maven-依赖镜像">3.3.4 Maven 依赖镜像</h3>
<p>除了可以从 Maven 的中央仓库下载外，还可以从 Maven 的镜像仓库下载。如果访问 Maven 的中央仓库非常慢，我们可以选择一个速度较快的 Maven 的镜像仓库。Maven 镜像仓库定期从中央仓库同步：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">           slow    ┌───────────────────┐</span><br><span class="line">    ┌─────────────&gt;│Maven Central Repo.│</span><br><span class="line">    │              └───────────────────┘</span><br><span class="line">    │                        │</span><br><span class="line">    │                        │sync</span><br><span class="line">    │                        ▼</span><br><span class="line">┌───────┐  fast    ┌───────────────────┐</span><br><span class="line">│ User  │─────────&gt;│Maven Mirror Repo. │</span><br><span class="line">└───────┘          └───────────────────┘</span><br></pre></td></tr></table></figure>
<p>中国区用户可以使用阿里云提供的 Maven 镜像仓库。使用 Maven 镜像仓库需要一个配置，在用户主目录下进入<code>.m2</code>目录，创建一个<code>settings.xml</code>配置文件，内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 国内推荐阿里云的Maven镜像 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置镜像仓库后，Maven的下载速度就会非常快。</p>
<h3 id="搜索第三方组件">3.3.5 搜索第三方组件</h3>
<p>最后一个问题：如果我们要引用一个第三方组件，比如<code>okhttp</code>，如何确切地获得它的<code>groupId</code>、<code>artifactId</code>和<code>version</code>？方法是通过 <a href="https://search.maven.org/">search.maven.org</a> 搜索关键字，找到对应的组件后，直接复制：</p>
<figure>
<img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/l" alt="copy-maven" /><figcaption aria-hidden="true">copy-maven</figcaption>
</figure>
<h3 id="包依赖相关命令行">3.3.6 包依赖相关命令行</h3>
<p>在命令中，进入到<code>pom.xml</code>所在目录，输入以下命令：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">$ mvn clean <span class="class"><span class="keyword">package</span></span></span><br></pre></td></tr></table></figure>
<p>如果一切顺利，即可在<code>target</code>目录下获得编译后自动打包的 jar。</p>
<h3 id="在-ide-中使用-maven">3.3.7 在 IDE 中使用 Maven</h3>
<p>几乎所有的 IDE 都内置了对 Maven 的支持。在 IDEA，Eclipse 中，可以直接创建或导入Maven 项目。如果导入后的 Maven 项目有错误，可以尝试选择项目后点击右键，选择 Maven - Update Project... 更新：</p>
<figure>
<img src="https://www.liaoxuefeng.com/files/attachments/1335694802812993/l" alt="update-maven-project" /><figcaption aria-hidden="true">update-maven-project</figcaption>
</figure>
<h3 id="maven-包依赖仓库分类">3.3.7 Maven 包依赖仓库分类</h3>
<h4 id="中央仓库">3.3.7.1 中央仓库</h4>
<p>其实我们使用的大多数第三方模块都是这个用法，例如，我们使用 commons logging、log4j 这些第三方模块，就是第三方模块的开发者自己把编译好的 jar 包发布到Maven的中央仓库中。</p>
<h4 id="私有仓库">3.3.7.2 私有仓库</h4>
<p>私有仓库是指公司内部如果不希望把源码和 jar 包放到公网上，那么可以搭建私有仓库。私有仓库总是在公司内部使用，它只需要在本地的<code>~/.m2/settings.xml</code>中配置好，使用方式和中央仓位没有任何区别。</p>
<h4 id="本地仓库">3.3.7.3 本地仓库</h4>
<p>本地仓库是指把本地开发的项目“发布”在本地，这样其他项目可以通过本地仓库引用它。</p>
<p>但是我们不推荐把自己的模块安装到 Maven 的本地仓库，因为每次修改某个模块的源码，都需要重新安装，非常容易出现版本不一致的情况。</p>
<p>更好的方法是使用模块化编译，在编译的时候，告诉 Maven 几个模块之间存在依赖关系，需要一块编译，Maven 就会自动按依赖顺序编译这些模块。</p>
<h2 id="build-构建流程">3.4 Build 构建流程</h2>
<p>使用 maven 构建的项目均可以直接使用 maven build 完成项目的编译测试打包，无需额外配置</p>
<p>Maven 是通过 pom.xml 来描述执行任务的，其中的 <build> 标签描述了如何来编译及打包项目，而具体的编译和打包工作是通过在 <build> 标签中配置的 <plugin> 标签来完成。当然 <plugin> 标签配置不是必须的，默认情况下，Maven 会绑定以下几个插件来完成基本操作。</p>
<p>要想了解 build 的执行过程，先得了解构建流程和插件</p>
<h3 id="构建流程">3.4.1 构建流程</h3>
<p>Maven 的 pom.xml 文件同时定义了一套标准化的构建流程，可以自动化实现编译，打包，发布，等等。</p>
<p>使用 Maven 时，我们首先要了解什么是 Maven 的生命周期（lifecycle）。</p>
<p>Maven 的生命周期由一系列阶段（phase）构成;</p>
<p>Maven 通过 lifecycle、phase 和 goal 来提供标准的构建流程。</p>
<p>最常用的构建命令是指定 phase，然后让 Maven 执行到指定的 phase：</p>
<ul>
<li>mvn clean</li>
<li>mvn clean compile</li>
<li>mvn clean test</li>
<li>mvn clean package</li>
</ul>
<p>通常情况，我们总是执行 phase 默认绑定的 goal，因此不必指定 goal。</p>
<h4 id="内置的生命周期-default">3.4.1.1 内置的生命周期 default</h4>
<p>为例，它包含以下 phase：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>validate</span><br><span class="line"><span class="bullet">- </span>initialize</span><br><span class="line"><span class="bullet">- </span>generate-sources</span><br><span class="line"><span class="bullet">- </span>process-sources</span><br><span class="line"><span class="bullet">- </span>generate-resources</span><br><span class="line"><span class="bullet">- </span>process-resources</span><br><span class="line"><span class="bullet">- </span>compile</span><br><span class="line"><span class="bullet">- </span>process-classes</span><br><span class="line"><span class="bullet">- </span>generate-test-sources</span><br><span class="line"><span class="bullet">- </span>process-test-sources</span><br><span class="line"><span class="bullet">- </span>generate-test-resources</span><br><span class="line"><span class="bullet">- </span>process-test-resources</span><br><span class="line"><span class="bullet">- </span>test-compile</span><br><span class="line"><span class="bullet">- </span>process-test-classes</span><br><span class="line"><span class="bullet">- </span>test</span><br><span class="line"><span class="bullet">- </span>prepare-package</span><br><span class="line"><span class="bullet">- </span>package</span><br><span class="line"><span class="bullet">- </span>pre-integration-test</span><br><span class="line"><span class="bullet">- </span>integration-test</span><br><span class="line"><span class="bullet">- </span>post-integration-test</span><br><span class="line"><span class="bullet">- </span>verify</span><br><span class="line"><span class="bullet">- </span>install</span><br><span class="line"><span class="bullet">- </span>deploy</span><br></pre></td></tr></table></figure>
<p>如果我们运行<code>mvn package</code>，Maven 就会执行<code>default</code>生命周期，它会从开始一直运行到<code>package</code>这个phase为止：</p>
<ul>
<li>validate</li>
<li>...</li>
<li>package</li>
</ul>
<p>如果我们运行<code>mvn compile</code>，Maven也会执行<code>default</code>生命周期，但这次它只会运行到<code>compile</code>，即以下几个phase：</p>
<ul>
<li>validate</li>
<li>...</li>
<li>compile</li>
</ul>
<h4 id="常用的生命周期是-clean">3.4.1.2 常用的生命周期是 clean</h4>
<p>Maven 另一个常用的生命周期是 <code>clean</code>，它会包含3个 phase：</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">- pre-<span class="built_in">clean</span></span><br><span class="line">- <span class="built_in">clean</span> （注意这个<span class="built_in">clean</span>不是 lifecycle 而是 phase）</span><br><span class="line">- post-<span class="built_in">clean</span></span><br></pre></td></tr></table></figure>
<p>所以，我们使用<code>mvn</code>这个命令时，后面的参数是phase，Maven自动根据生命周期运行到指定的phase。</p>
<h4 id="指定多个-phase">3.4.1.3 指定多个 phase</h4>
<p>更复杂的例子是指定多个phase，例如，运行<code>mvn clean package</code>，Maven先执行<code>clean</code>生命周期并运行到<code>clean</code>这个phase，然后执行<code>default</code>生命周期并运行到<code>package</code>这个phase，实际执行的phase如下：</p>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">-<span class="ruby"> <span class="number">1</span>. clean lifecycle</span></span><br><span class="line"><span class="ruby"></span>	-<span class="ruby"> pre-clean</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> clean （注意这个clean是phase）</span></span><br><span class="line"><span class="ruby"></span>    </span><br><span class="line">-<span class="ruby"> <span class="number">2</span>. default lifecycle</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> validate</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> ...</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> package</span></span><br></pre></td></tr></table></figure>
<h4 id="常用的命令">3.4.1.4 常用的命令</h4>
<p>在实际开发过程中，经常使用的命令有：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 清理所有生成的class和jar；</span></span><br><span class="line">mvn clean</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 先清理，再执行到`compile`；</span></span><br><span class="line">mvn clean compile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 先清理，再执行到`<span class="built_in">test</span>`，因为执行`<span class="built_in">test</span>`前必须执行`compile`，所以这里不必指定`compile`；</span></span><br><span class="line">mvn clean test</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 先清理，再执行到`package`</span></span><br><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>
<p>大多数 phase 在执行过程中，因为我们通常没有在 <code>pom.xml</code> 中配置相关的设置，所以这些 phase 什么事情都不做。</p>
<p>经常用到的phase其实只有几个：</p>
<ul>
<li>clean：清理</li>
<li>compile：编译</li>
<li>test：运行测试</li>
<li>package：打包</li>
</ul>
<h4 id="goal">3.4.1.4 Goal</h4>
<p>执行一个 phase 又会触发一个或多个 goal：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">执行的 Phase</th>
<th style="text-align: left;">对应执行的 Goal</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">compile</td>
<td style="text-align: left;">compiler: compile</td>
</tr>
<tr class="even">
<td style="text-align: left;">test</td>
<td style="text-align: left;">compiler: testCompile surefire: test</td>
</tr>
</tbody>
</table>
<p>goal 的命名总是<code>abc:xyz</code>这种形式。</p>
<p>看到这里，相信大家对 lifecycle、phase 和 goal 已经明白了吧？</p>
<p>其实我们类比一下就明白了：</p>
<ul>
<li>lifecycle 相当于 Java 的 package，它包含一个或多个 phase；</li>
<li>phase 相当于 Java 的 class，它包含一个或多个 goal；</li>
<li>goal 相当于 class 的 method，它其实才是真正干活的。</li>
</ul>
<p>大多数情况，我们只要指定phase，就默认执行这些 phase 默认绑定的 goal，只有少数情况，我们可以直接指定运行一个 goal，例如，启动 Tomcat 服务器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn tomcat:run</span><br></pre></td></tr></table></figure>
<h3 id="plugin-插件使用">3.4.2 plugin 插件使用</h3>
<p>我们在前面介绍了 Maven 的 lifecycle，phase 和 goal</p>
<p>使用Maven构建项目就是执行 lifecycle，执行到指定的 phase 为止。每个 phase 会执行自己默认的一个或多个 goal。goal 是最小任务单元。</p>
<p>我们以<code>compile</code>这个phase为例，如果执行：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mvn</span> compile</span><br></pre></td></tr></table></figure>
<p>Maven 将执行<code>compile</code>这个 phase，这个phase会调用<code>compiler</code>插件执行关联的<code>compiler:compile</code>这个 goal。</p>
<p>实际上：<font color="red">执行每个 phase，都是通过某个插件（plugin）来执行的。</font></p>
<p>Maven 本身其实并不知道如何执行<code>compile</code>，它只是负责找到对应的<code>compiler</code>插件，然后执行默认的<code>compiler:compile</code>这个 goal 来完成编译。</p>
<p>所以，使用 Maven，实际上就是配置好需要使用的插件，然后通过 phase 调用它们。</p>
<p>Maven已经内置了一些常用的标准插件：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">plugin 插件名称</th>
<th style="text-align: left;">对应执行的 phase</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">clean</td>
<td style="text-align: left;">clean</td>
</tr>
<tr class="even">
<td style="text-align: left;">compiler</td>
<td style="text-align: left;">compile</td>
</tr>
<tr class="odd">
<td style="text-align: left;">surefire</td>
<td style="text-align: left;">test</td>
</tr>
<tr class="even">
<td style="text-align: left;">jar</td>
<td style="text-align: left;">package</td>
</tr>
</tbody>
</table>
<p>如果标准插件无法满足需求，我们还可以使用自定义插件。使用自定义插件的时候，需要声明。</p>
<p>例如，使用<code>maven-shade-plugin</code>可以创建一个可执行的 jar，要使用这个插件，需要在<code>pom.xml</code>中声明它，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            ...</span><br><span class="line">						<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>自定义插件往往需要一些配置，例如，<code>maven-shade-plugin</code>需要指定 Java 程序的入口，它的配置是：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transformer</span> <span class="attr">implementation</span>=<span class="string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.itranswarp.learnjava.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意，Maven 自带的标准插件例如<code>compiler</code>是无需声明的，只有引入其它的插件才需要声明。</strong></p>
<p>下面列举了一些常用的插件：</p>
<ul>
<li>maven-shade-plugin：打包所有依赖包并生成可执行jar；</li>
<li>cobertura-maven-plugin：生成单元测试覆盖率报告；</li>
<li>findbugs-maven-plugin：对Java源码进行静态分析以找出潜在问题。</li>
</ul>
<h1 id="使用-mvnw">4. 使用 mvnw</h1>
<p><code>mvnw</code>是 Maven Wrapper 的缩写。</p>
<p>因为我们安装 Maven 时，默认情况下，系统所有项目都会使用全局安装的这个 Maven 版本。</p>
<p>但是，对于某些项目来说，它可能必须使用某个特定的 Maven 版本，这个时候，就可以使用 Maven Wrapper，它可以负责给这个特定的项目安装指定版本的 Maven，而其他项目不受影响。</p>
<p>简单地说，Maven Wrapper 就是给一个项目提供一个独立的，指定版本的 Maven 给它使用。</p>
<p>这有点类似于 Python 的虚拟环境</p>
<h2 id="安装-maven-wrapper">4.1 安装 Maven Wrapper</h2>
<p>安装Maven Wrapper最简单的方式是在项目的根目录（即<code>pom.xml</code>所在的目录）下运行安装命令：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">mvn -N io.takari:maven:<span class="number">0.7</span><span class="number">.6</span>:<span class="keyword">wrapper</span></span><br></pre></td></tr></table></figure>
<p>它会自动使用最新版本的Maven。注意<code>0.7.6</code>是Maven Wrapper的版本。最新的Maven Wrapper版本可以去<a href="https://github.com/takari/maven-wrapper">官方网站</a>查看。</p>
<p>如果要指定使用的Maven版本，使用下面的安装命令指定版本，例如<code>3.3.3</code>：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">mvn -N io.takari:maven:<span class="number">0.7</span><span class="number">.6</span>:<span class="keyword">wrapper</span> -Dmaven=<span class="number">3.3</span><span class="number">.3</span></span><br></pre></td></tr></table></figure>
<p>安装后，查看项目结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my-project</span><br><span class="line">├── .mvn</span><br><span class="line">│   └── wrapper</span><br><span class="line">│       ├── MavenWrapperDownloader.java</span><br><span class="line">│       ├── maven-wrapper.jar</span><br><span class="line">│       └── maven-wrapper.properties</span><br><span class="line">├── mvnw</span><br><span class="line">├── mvnw.cmd</span><br><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   ├── java</span><br><span class="line">    │   └── resources</span><br><span class="line">    └── test</span><br><span class="line">        ├── java</span><br><span class="line">        └── resources</span><br></pre></td></tr></table></figure>
<p>发现多了<code>mvnw</code>、<code>mvnw.cmd</code>和<code>.mvn</code>目录，我们只需要把<code>mvn</code>命令改成<code>mvnw</code>就可以使用跟项目关联的Maven。例如：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">mvnw clean <span class="class"><span class="keyword">package</span></span></span><br></pre></td></tr></table></figure>
<p>在Linux或macOS下运行时需要加上<code>./</code>：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">./mvnw clean <span class="class"><span class="keyword">package</span></span></span><br></pre></td></tr></table></figure>
<p>Maven Wrapper 的另一个作用是把项目的<code>mvnw</code>、<code>mvnw.cmd</code>和<code>.mvn</code>提交到版本库中，可以使所有开发人员使用统一的Maven版本。</p>
<h1 id="发布-artifact">5. 发布 Artifact</h1>
<p>当我们使用<code>commons-logging</code>这些第三方开源库的时候，我们实际上是通过 Maven 自动下载它的 jar包，并根据其<code>pom.xml</code>解析依赖，自动把相关依赖包都下载后加入到 classpath。</p>
<p>那么问题来了：当我们自己写了一个牛逼的开源库时，非常希望别人也能使用，总不能直接放个 jar 包的链接让别人下载吧？</p>
<p>如果我们把自己的开源库放到Maven的repo中，那么，别人只需按标准引用<code>groupId:artifactId:version</code>，即可自动下载 jar 包以及相关依赖。</p>
<p>因此，本节我们介绍如何发布一个库到Maven的repo中。</p>
<p>把自己的库发布到 Maven 的 repo 中有好几种方法，我们介绍3种最常用的方法。</p>
<h2 id="以静态文件发布">5.1 以静态文件发布</h2>
<p>如果我们观察一个中央仓库的Artifact结构，例如<a href="https://commons.apache.org/proper/commons-math/">Commons Math</a>，它的groupId是<code>org.apache.commons</code>，artifactId 是<code>commons-math3</code>，以版本<code>3.6.1</code>为例，发布在中央仓库的文件夹路径就是https://repo1.maven.org/maven2/org/apache/commons/commons-math3/3.6.1/，在此文件夹下，<code>commons-math3-3.6.1.jar</code>就是发布的jar包，<code>commons-math3-3.6.1.pom</code>就是它的<code>pom.xml</code>描述文件，<code>commons-math3-3.6.1-sources.jar</code>是源代码，<code>commons-math3-3.6.1-javadoc.jar</code>是文档。其它以<code>.asc</code>、<code>.md5</code>、<code>.sha1</code>结尾的文件分别是 GPG 签名、MD5 摘要和SHA-1 摘要。</p>
<p>我们只要按照这种目录结构组织文件，它就是一个有效的 Maven 仓库。</p>
<p>我们以广受好评的开源项目 <a href="https://github.com/michaelliao/how-to-become-rich">how-to-become-rich</a> 为例，先创建 Maven 工程目录结构如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">how-to-become-rich</span><br><span class="line">├── maven-repo        &lt;-- Maven本地文件仓库</span><br><span class="line">├── pom.xml           &lt;-- 项目文件</span><br><span class="line">├── src</span><br><span class="line">│   ├── main</span><br><span class="line">│   │   ├── java      &lt;-- 源码目录</span><br><span class="line">│   │   └── resources &lt;-- 资源目录</span><br><span class="line">│   └── test</span><br><span class="line">│       ├── java      &lt;-- 测试源码目录</span><br><span class="line">│       └── resources &lt;-- 测试资源目录</span><br><span class="line">└── target            &lt;-- 编译输出目录</span><br></pre></td></tr></table></figure>
<p>在<code>pom.xml</code>中添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>local-repo-release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>GitHub Release<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>file://$&#123;project.basedir&#125;/maven-repo<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-javadocs<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意到<code>&lt;distributionManagement&gt;</code>，它指示了发布的软件包的位置，这里的<code>&lt;url&gt;</code>是项目根目录下的<code>maven-repo</code>目录，在<code>&lt;build&gt;</code>中定义的两个插件<code>maven-source-plugin</code>和<code>maven-javadoc-plugin</code>分别用来创建源码和 javadoc，如果不想发布源码，可以把对应的插件去掉。</p>
<p>我们直接在项目根目录下运行Maven命令<code>mvn clean package deploy</code>，如果一切顺利，我们就可以在<code>maven-repo</code>目录下找到部署后的所有文件如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">maven-repo</span><br><span class="line">└── com</span><br><span class="line">    └── itranswarp</span><br><span class="line">        └── rich</span><br><span class="line">            └── how-to-become-rich</span><br><span class="line">                ├── 1.0.0</span><br><span class="line">                │   ├── how-to-become-rich-1.0.0-javadoc.jar</span><br><span class="line">                │   ├── how-to-become-rich-1.0.0-javadoc.jar.md5</span><br><span class="line">                │   ├── how-to-become-rich-1.0.0-javadoc.jar.sha1</span><br><span class="line">                │   ├── how-to-become-rich-1.0.0-sources.jar</span><br><span class="line">                │   ├── how-to-become-rich-1.0.0-sources.jar.md5</span><br><span class="line">                │   ├── how-to-become-rich-1.0.0-sources.jar.sha1</span><br><span class="line">                │   ├── how-to-become-rich-1.0.0.jar</span><br><span class="line">                │   ├── how-to-become-rich-1.0.0.jar.md5</span><br><span class="line">                │   ├── how-to-become-rich-1.0.0.jar.sha1</span><br><span class="line">                │   ├── how-to-become-rich-1.0.0.pom</span><br><span class="line">                │   ├── how-to-become-rich-1.0.0.pom.md5</span><br><span class="line">                │   └── how-to-become-rich-1.0.0.pom.sha1</span><br><span class="line">                ├── maven-metadata.xml</span><br><span class="line">                ├── maven-metadata.xml.md5</span><br><span class="line">                └── maven-metadata.xml.sha1</span><br></pre></td></tr></table></figure>
<p>最后一步，是把这个工程推到 GitHub上，并选择<code>Settings</code>-<code>GitHub Pages</code>，选择<code>master branch</code>启用Pages服务：</p>
<figure>
<img src="https://www.liaoxuefeng.com/files/attachments/1347989708734529/l" alt="enable-github-pages" /><figcaption aria-hidden="true">enable-github-pages</figcaption>
</figure>
<p>这样，把全部内容推送至 GitHub 后，即可作为静态网站访问 Maven 的 repo，它的地址是https://michaelliao.github.io/how-to-become-rich/maven-repo/。版本<code>1.0.0</code>对应的jar包地址是：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//mi</span>chaelliao.github.io<span class="regexp">/how-to-become-rich/m</span>aven-repo<span class="regexp">/com/i</span>transwarp<span class="regexp">/rich/</span>how-to-become-rich<span class="regexp">/1.0.0/</span>how-to-become-rich-<span class="number">1.0</span>.<span class="number">0</span>.jar</span><br></pre></td></tr></table></figure>
<p>现在，如果其他人希望引用这个Maven包，我们可以告知如下依赖即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itranswarp.rich<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>how-to-become-rich<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是，除了正常导入依赖外，对方还需要再添加一个<code>&lt;repository&gt;</code>的声明，即使用方完整的<code>pom.xml</code>如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>how-to-become-rich-usage<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>github-rich-repo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>The Maven Repository on Github<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://michaelliao.github.io/how-to-become-rich/maven-repo/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itranswarp.rich<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>how-to-become-rich<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在<code>&lt;repository&gt;</code>中，我们必须声明发布的Maven的repo地址，其中<code>&lt;id&gt;</code>和<code>&lt;name&gt;</code>可以任意填写，<code>&lt;url&gt;</code>填入GitHub Pages提供的地址+<code>/maven-repo/</code>后缀。现在，即可正常引用这个库并编写代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Millionaire millionaire = <span class="keyword">new</span> Millionaire();</span><br><span class="line">System.out.println(millionaire.howToBecomeRich());</span><br></pre></td></tr></table></figure>
<p>有的童鞋会问，为什么使用<code>commons-logging</code>等第三方库时，并不需要声明repo地址？这是因为这些库都是发布到Maven中央仓库的，发布到中央仓库后，不需要告诉Maven仓库地址，因为它知道中央仓库的地址默认是 https://repo1.maven.org/maven2/，也可以通过<code>~/.m2/settings.xml</code>指定一个代理仓库地址以替代中央仓库来提高速度（参考<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1309301178105890">依赖管理</a>的Maven镜像）。</p>
<p>因为 GitHub Pages 并不会把我们发布的 Maven 包同步到中央仓库，所以自然使用方必须手动添加一个我们提供的仓库地址。</p>
<p>此外，通过 GitHub Pages 发布 Maven repo 时需要注意一点，即不要改动已发布的版本。因为Maven的仓库是不允许修改任何版本的，对一个库进行修改的唯一方法是发布一个新版本。但是通过静态文件的方式发布 repo，实际上我们是可以修改 jar 文件的，但最好遵守规范，不要修改已发布版本。</p>
<h2 id="通过-nexus-发布到中央仓库">5.2 通过 Nexus 发布到中央仓库</h2>
<p>有的童鞋会问，能不能把自己的开源库发布到 Maven 的中央仓库，这样用户就不需要声明 repo 地址，可以直接引用，显得更专业。</p>
<p>当然可以，但我们不能直接发布到Maven中央仓库，而是通过曲线救国的方式，发布到<a href="https://central.sonatype.org/">central.sonatype.org</a>，它会定期自动同步到 Maven 的中央仓库。<a href="https://www.sonatype.com/nexus-repository-oss">Nexus</a> 是一个支持 Maven 仓库的软件，由 Sonatype 开发，有免费版和专业版两个版本，很多大公司内部都使用 Nexus 作为自己的私有Maven仓库，而这个 <a href="https://central.sonatype.org/">central.sonatype.org</a> 相当于面向开源的一个Nexus公共服务。</p>
<p>所以，第一步是在 <a href="https://central.sonatype.org/">central.sonatype.org</a> 上注册一个账号，注册链接非常隐蔽，可以自己先找找，找半小时没找到点 <a href="javascript:showSonatypeSignUpLink()">这里</a> 查看攻略。</p>
<p>如果注册顺利并审核通过，会得到一个登录账号，然后，通过<a href="https://central.sonatype.org/pages/apache-maven.html">这个页面</a>一步一步操作就可以成功地将自己的 Artifact 发布到 Nexus 上，再耐心等待几个小时后，你的 Artifact 就会出现在Maven的中央仓库中。</p>
<p>这里简单提一下发布重点与难点：</p>
<ul>
<li>必须正确创建 GPG 签名，Linux 和 Mac 下推荐使用 gnupg2；</li>
<li>必须在<code>~/.m2/settings.xml</code>中配置好登录用户名和口令，以及 GPG 口令：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>OSSRH-USERNAME<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>OSSRH-PASSWORD<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">gpg.executable</span>&gt;</span>gpg2<span class="tag">&lt;/<span class="name">gpg.executable</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">gpg.passphrase</span>&gt;</span>GPG-PASSWORD<span class="tag">&lt;/<span class="name">gpg.passphrase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在待发布的 Artifact 的<code>pom.xml</code>中添加 OSS 的 Maven repo 地址，以及<code>maven-jar-plugin</code>、<code>maven-source-plugin</code>、<code>maven-javadoc-plugin</code>、<code>maven-gpg-plugin</code>、<code>nexus-staging-maven-plugin</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Release Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://oss.sonatype.org/service/local/staging/deploy/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>test-jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-javadocs<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">additionalOption</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">additionalOption</span>&gt;</span>-Xdoclint:none<span class="tag">&lt;/<span class="name">additionalOption</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">additionalOption</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-gpg-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>sign-artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>sign<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.sonatype.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nexus-staging-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">serverId</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">serverId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">nexusUrl</span>&gt;</span>https://oss.sonatype.org/<span class="tag">&lt;/<span class="name">nexusUrl</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">autoReleaseAfterClose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">autoReleaseAfterClose</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最后执行命令<code>mvn clean package deploy</code>即可发布至 <a href="https://central.sonatype.org/">central.sonatype.org</a>。</p>
<p>此方法前期需要复杂的申请账号和项目的流程，后期需要安装调试GPG，但只要跑通流程，后续发布都只需要一行命令。</p>
<h2 id="发布到私有仓库">5.3 发布到私有仓库</h2>
<p>通过<code>nexus-staging-maven-plugin</code>除了可以发布到 <a href="https://central.sonatype.org/">central.sonatype.org</a> 外，也可以发布到私有仓库，例如，公司内部自己搭建的Nexus服务器。</p>
<p>如果没有私有 Nexus 服务器，还可以发布到 <a href="https://github.com/features/packages">GitHub Packages</a>。GitHub Packages是 GitHub 提供的仓库服务，支持 Maven、NPM、Docker 等。使用 GitHub Packages 时，无论是发布Artifact，还是引用已发布的 Artifact，都需要明确的授权 Token，因此，GitHub Packages 只能作为私有仓库使用。</p>
<p>在发布前，我们必须首先登录后在用户的<code>Settings</code>-<code>Developer settings</code>-<code>Personal access tokens</code>中创建两个Token，一个用于发布，一个用于使用。发布Artifact的Token必须有<code>repo</code>、<code>write:packages</code>和<code>read:packages</code>权限：</p>
<figure>
<img src="https://www.liaoxuefeng.com/files/attachments/1347999282233410/l" alt="token-scopes" /><figcaption aria-hidden="true">token-scopes</figcaption>
</figure>
<p>使用 Artifact 的Token只需要<code>read:packages</code>权限。</p>
<p>在发布端，把 GitHub 的用户名和发布Token写入<code>~/.m2/settings.xml</code>配置中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>github-release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>GITHUB-USERNAME<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>f052...c21f<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后，在需要发布的 Artifact 的<code>pom.xml</code>中，添加一个<code>&lt;repository&gt;</code>声明：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>github-release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>GitHub Release<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.pkg.github.com/michaelliao/complex<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意到<code>&lt;id&gt;</code>和<code>~/.m2/settings.xml</code>配置中的<code>&lt;id&gt;</code>要保持一致，因为发布时Maven根据id找到用于登录的用户名和Token，才能成功上传文件到GitHub。我们直接通过命令<code>mvn clean package deploy</code>部署，成功后，在GitHub用户页面可以看到该Artifact：</p>
<figure>
<img src="https://www.liaoxuefeng.com/files/attachments/1348000710393922/l" alt="github-packages" /><figcaption aria-hidden="true">github-packages</figcaption>
</figure>
<p>完整的配置请参考 <a href="https://github.com/michaelliao/complex/">complex</a> 项目，这是一个非常简单的支持复数运算的库。</p>
<p>使用该Artifact时，因为GitHub的Package只能作为私有仓库使用，所以除了在使用方的<code>pom.xml</code>中声明<code>&lt;repository&gt;</code>外：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>github-release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>GitHub Release<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.pkg.github.com/michaelliao/complex<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itranswarp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>complex<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>还需要把有读权限的Token配置到<code>~/.m2/settings.xml</code>文件中。</p>
]]></content>
      <categories>
        <category>工具</category>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
</search>
