<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git fetch 同时更新子模块</title>
    <url>/2021/12/02/Git-fetch-%E5%90%8C%E6%97%B6%E6%9B%B4%E6%96%B0%E5%AD%90%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h2><p>默认情况，git checkout;     git fetch   如果子模块 submodule 的版本不一致， git 是不会自动更新子模块；</p>
<span id="more"></span>

<h2 id="2-传统解决方法："><a href="#2-传统解决方法：" class="headerlink" title="2. 传统解决方法："></a>2. 传统解决方法：</h2><p>cd  submodules 文件夹；</p>
<p>git checkout / fetch；</p>
<h2 id="3-高级解决方法："><a href="#3-高级解决方法：" class="headerlink" title="3. 高级解决方法："></a>3. 高级解决方法：</h2><p>在全局进行 Git 设置：</p>
<table>
<thead>
<tr>
<th align="left">1</th>
<th align="left">git config –global submodule.recurse true</th>
</tr>
</thead>
</table>
<p>设置 submodule.recurse true 后，不仅仅 git checkout 会自动切换子模块，git fetch / pull 也会自动拉取子模块的更新</p>
<p>注意：这个设置对用户机器上安装的 git 版本有要求，详见下面说明</p>
<p>在发行说明中提到了这一点：<a href="https://github.com/git/git/commit/e1104a5ee539408b81566066aaa6963cb87d5cd6#diff-c24776ff22455a30fbb78e378b7df0b0R139">https://github.com/git/git/commit/e1104a5ee539408b81566066aaa6963cb87d5cd6#diff-c24776ff22455a30fbb78e378b7df0b0R139</a></p>
<p>submodule.recurse 选项已添加到 git 2.14</p>
]]></content>
      <categories>
        <category>Git 相关</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch 操作异常总结</title>
    <url>/2021/12/15/ElasticSearch-%E6%93%8D%E4%BD%9C%E5%BC%82%E5%B8%B8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="1-Index-写入数据-FORBIDDEN-问题"><a href="#1-Index-写入数据-FORBIDDEN-问题" class="headerlink" title="1. Index 写入数据 FORBIDDEN 问题"></a>1. Index 写入数据 FORBIDDEN 问题</h1><h2 id="1-1-问题描述"><a href="#1-1-问题描述" class="headerlink" title="1.1 问题描述"></a>1.1 问题描述</h2><p>在使用七牛云的 Logkit 往 ElasticSearch 发送数据的时候出现了以下异常信息；</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># SendError: bulk failed with last error</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;_index&quot;</span>:<span class="string">&quot;dev_cbim_tool_log&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_type&quot;</span>:<span class="string">&quot;cbim_tool_log&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;UhoDvX0B7FSmwLI_OPym&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;status&quot;</span>:<span class="number">403</span>,</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;cluster_block_exception&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;reason&quot;</span>:<span class="string">&quot;blocked by: [FORBIDDEN/12/index read-only / allow delete (api)];&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># failDatas size : <span class="number">33</span>	</span><br></pre></td></tr></table></figure>

<p>其核心异常提示是：[FORBIDDEN/12/index read-only / allow delete (api)]</p>
<span id="more"></span>

<h2 id="1-2-原因分析"><a href="#1-2-原因分析" class="headerlink" title="1.2 原因分析"></a>1.2 原因分析</h2><p>从字面意思看，ES 禁止数据写入；</p>
<p>联想到最近服务器发生的一系列问题，一切都能解释的通了；</p>
<p>最近发现：ES 集群的一个节点挂了（主要是因为服务器的磁盘坏了）；</p>
<p>在这样的情况下，触发了 ES 的保护机制，因此出现了上面的情况；</p>
<h2 id="1-3-解决方法"><a href="#1-3-解决方法" class="headerlink" title="1.3 解决方法"></a>1.3 解决方法</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -XPUT -H &quot;Content-Type: application/json&quot; http://localhost:9200/_all/_settings -d &#x27;&#123;&quot;index.blocks.read_only_allow_delete&quot;: null&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p> 参考链接：[如何修复 ElasticSearch <a href="https://techoverflow.net/2019/04/17/how-to-fix-elasticsearch-forbidden-12-index-read-only-allow-delete-api/">FORBIDDEN/12/index read-only / allow delete （api）] – TechOverflow</a></p>
<h1 id="2-ElasticSearch-启动参数问题"><a href="#2-ElasticSearch-启动参数问题" class="headerlink" title="2. ElasticSearch 启动参数问题"></a>2. ElasticSearch 启动参数问题</h1><p>通过 docker 启动 es 的时候，相关参数设置跟 es 的镜像版本有关；</p>
<p>这里主要说明常见的各种 es 设置问题</p>
<h2 id="2-1-unknown-setting-discovery-seed-hosts"><a href="#2-1-unknown-setting-discovery-seed-hosts" class="headerlink" title="2.1 unknown setting [discovery.seed_hosts]"></a>2.1 unknown setting [discovery.seed_hosts]</h2><h3 id="产生背景"><a href="#产生背景" class="headerlink" title="产生背景"></a>产生背景</h3><p>使用2019年的老脚本启动 es 的 docker 实例；</p>
<p>注：笔者是 2021.12.15 pull 最新的 es 镜像启动实例的，启动实例使用的参数是 2019 年底时的；</p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>2019 年底的 es 镜像和 2021 年的镜像文件参数设置不一致，</p>
<p>可以通过 dock inspect elasticsearch 查看</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>使用下面的配置替代</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">discovery.zen.ping.unicast.hosts:</span> [<span class="string">&quot;192.168.10.11:9300&quot;</span>,<span class="string">&quot;192.168.10.12:9300&quot;</span>,<span class="string">&quot;192.168.10.13:9300&quot;</span>]</span><br></pre></td></tr></table></figure>

<p><font color="red">注意：启动脚本，最好跟 docker 镜像配套使用</font></p>
<h3 id="类似的问题"><a href="#类似的问题" class="headerlink" title="类似的问题"></a>类似的问题</h3><p>unknown setting [cluster.initial_master_nodes] </p>
<h2 id="2-2-ES-缓存设置"><a href="#2-2-ES-缓存设置" class="headerlink" title="2.2 ES 缓存设置"></a>2.2 ES 缓存设置</h2><p>默认设置：ES_JAVA_OPTS=”-Xms256m -Xmx256m”</p>
<p>启动的时候可以加 -e 指定参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-e ES_JAVA_OPTS=&quot;-Xms1g -Xmx1g&quot;</span><br></pre></td></tr></table></figure>

<p>设置过大可能导致本机缓存不够，启动时有如下错误提示：</p>
<blockquote>
<p>max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</p>
</blockquote>
<p>解决方法：修改 centos 系统的缓存设置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. open and edit conf</span></span><br><span class="line">vi /etc/sysctl.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. add at last vm.max_map_count=262144</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. apply</span></span><br><span class="line">/sbin/sysctl -p</span><br></pre></td></tr></table></figure>



<h1 id="3-ElasticSearch-集群状态排查"><a href="#3-ElasticSearch-集群状态排查" class="headerlink" title="3. ElasticSearch 集群状态排查"></a>3. ElasticSearch 集群状态排查</h1><p><a href="https://blog.csdn.net/laoyang360/article/details/109699085">Elasticsearch 集群故障排查及修复指南_铭毅天下（公众号同名）-CSDN博客</a></p>
<h1 id="4-ES-索引-primary-shard-is-unassigned-解决方法"><a href="#4-ES-索引-primary-shard-is-unassigned-解决方法" class="headerlink" title="4. ES 索引 primary shard is unassigned 解决方法"></a>4. ES 索引 primary shard is unassigned 解决方法</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /_cluster/reroute</span><br><span class="line">&#123;</span><br><span class="line">  &quot;commands&quot; : [</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;allocate_stale_primary&quot; : &#123;</span><br><span class="line">    &quot;index&quot; : &quot;.monitoring-kibana-6-2021.12.17&quot;, </span><br><span class="line">    &quot;shard&quot; : 0,</span><br><span class="line">    &quot;node&quot; : &quot;es-node-2&quot;,</span><br><span class="line">    &quot;accept_data_loss&quot; : true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/weixin_34050519/article/details/85936609">ES 遇到 unassigned shard如何处理？_weixin_34050519的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/dlm_bk/article/details/102840031">解决elasticsearch分片unassigned的3个方法_dlm_bk的博客-CSDN博客_es分片unassigned</a></p>
]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 集成 PicGo Github 图床</title>
    <url>/2022/01/20/Hexo-%E9%9B%86%E6%88%90-PicGo-Github-%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h1 id="0、背景说明"><a href="#0、背景说明" class="headerlink" title="0、背景说明"></a>0、背景说明</h1><p>博主原来使用七牛云图床，好处：10G 免费空间；坏处：域名有效期一个月；超出一个月就没法使用了；</p>
<p>因而转向了其他图床，发现 PicGo 中支持的图床有 Github，觉得是一个不错的选择</p>
<p>使用 Github 图床的好处：</p>
<ol>
<li>没有域名限制；</li>
<li>仓库虽然空间有限（1G），但是满了可以再新建一个仓库，因此相当于无限</li>
<li>有人说慢，但是可以设置加速</li>
<li>稳定，不用担心挂了或者失效</li>
</ol>
<span id="more"></span>

<p>参考：</p>
<p><a href="https://www.cnblogs.com/52duan/p/12551393.html">MarkDown、Hexo博客、Coding托管、GitHub做图床、CDN加速 - 段十三 - 博客园 (cnblogs.com)</a></p>
<h1 id="1、新建一个仓库"><a href="#1、新建一个仓库" class="headerlink" title="1、新建一个仓库"></a>1、新建一个仓库</h1><ol>
<li>名字自定义，例如：pic_bed</li>
<li>选择 Public</li>
<li>勾选初始化复选框： Initialize this repository with a README</li>
<li>点击 Create repository 创建成功</li>
<li> <a href="https://github.com/settings/tokens/new">New personal access token (github.com)</a> 配置图床的时候要用：</li>
<li>Note下面的文本框内容自定义</li>
<li>下面很多复选框，只需要勾选 repo 也就是第一个复选框</li>
<li>最下面点击Generate token即可生成</li>
<li>下面要用，如果忘记了可以在重新生成</li>
</ol>
<h1 id="2、安装配置-PicGo"><a href="#2、安装配置-PicGo" class="headerlink" title="2、安装配置 PicGo"></a>2、安装配置 <a href="https://molunerfinn.com/PicGo/">PicGo</a></h1><p>下载安装，这里不再说明，</p>
<p>安装后启动 PicGo，找到 Github 图床，如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220120182829709.png" alt="image-20220120182829709"></p>
<p>填写第一步中创建的 仓库名，分支名，以及 Token </p>
<p>然后“确定”，并设置为默认图床即可</p>
<h1 id="3、配置-JsDeliv，给图片镶上加速器"><a href="#3、配置-JsDeliv，给图片镶上加速器" class="headerlink" title="3、配置 JsDeliv，给图片镶上加速器"></a>3、配置 JsDeliv，给图片镶上加速器</h1><ul>
<li>比如在GitHub的图片路径是：<a href="https://github.com/user/pic_bed/img/test_image.png">https://github.com/user/pic_bed/img/test_image.png</a></li>
<li>拼接链接方法1：<a href="https://cdn.jsdelivr.net/gh/user/pic_bed@latest/img/test_image.png">https://cdn.jsdelivr.net/gh/user/pic_bed@latest/img/test_image.png</a></li>
<li>拼接链接方法2：<a href="https://cdn.jsdelivr.net/gh/user/pic_bed/img/test_image.png">https://cdn.jsdelivr.net/gh/user/pic_bed/img/test_image.png</a></li>
</ul>
<p><strong>将方法1和方法2拼接起来的链接前缀输入到上图第5步的自定义域名中即可</strong></p>
<ul>
<li>拼接链接方法1：<a href="https://cdn.jsdelivr.net/gh/user/pic_bed@latest/">https://cdn.jsdelivr.net/gh/user/pic_bed@latest/</a></li>
<li>拼接链接方法2：<a href="https://cdn.jsdelivr.net/gh/user/pic_bed/">https://cdn.jsdelivr.net/gh/user/pic_bed/</a></li>
</ul>
<h1 id="4、再-Typora-中选择-PicGo-app-作为图片上传服务"><a href="#4、再-Typora-中选择-PicGo-app-作为图片上传服务" class="headerlink" title="4、再 Typora 中选择 PicGo app 作为图片上传服务"></a>4、再 Typora 中选择 PicGo app 作为图片上传服务</h1><p><a href="https://buctllx.github.io/2021/12/06/Typora-%E8%AE%BE%E7%BD%AE%E5%85%B3%E8%81%94%E4%B8%83%E7%89%9B%E4%BA%91%E5%9B%BE%E5%BA%8A/#3-Typora-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8%E8%AE%BE%E7%BD%AE">Typora 设置关联七牛云图床 | ConorLuo 博客 (buctllx.github.io)</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>PicGo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>PicGo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next Theme 使用问题总结</title>
    <url>/2021/12/21/Hexo-Next-Theme-%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="note info"><p>两个路径说明：</p>
<p>site root directory：博客站点根目录</p>
<p>theme root directory：博客主题根目录</p>
<p>后面说明问题会一直沿用这中叫法；</p>
</div>

<h1 id="1-部署后“搜索”功能无法使用"><a href="#1-部署后“搜索”功能无法使用" class="headerlink" title="1. 部署后“搜索”功能无法使用"></a>1. 部署后“搜索”功能无法使用</h1><p><strong>原因</strong></p>
<p>使用了最新的 master 版本，master 分支是主题作者的开发分支，每周都会更新，当时不稳定</p>
<span id="more"></span>

<p><strong>解决方法</strong></p>
<p>拉去稳定版本的分支，主要看最新的 Tag</p>
<p>参考 Issues 链接：<a href="https://github.com/hexojs/hexo/issues/4654">https://github.com/hexojs/hexo/issues/4654</a></p>
<h1 id="2-替换图片资源路径"><a href="#2-替换图片资源路径" class="headerlink" title="2. 替换图片资源路径"></a>2. 替换图片资源路径</h1><p>主题涉及到的，各种图片资源都是可以替换的，</p>
<p><strong>替换路径：theme root directory\theme\next\source\images</strong></p>
<p>为了显示效果，注意替换的图片最好是对应像素的，而且不易过大，图片类型可以自己修改</p>
<p>可替换图片说明：</p>
<table>
<thead>
<tr>
<th>图片名称</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>avatar</td>
<td>博主图像</td>
</tr>
<tr>
<td>favicon-16x16-next</td>
<td>网站图标 16x16 像素</td>
</tr>
<tr>
<td>favicon-32x32-next</td>
<td>网站图标 32x32 像素</td>
</tr>
<tr>
<td>logo</td>
<td>log</td>
</tr>
<tr>
<td>apple-touch-icon-next</td>
<td>触摸图标</td>
</tr>
<tr>
<td>alipay</td>
<td>支付宝收款二维码</td>
</tr>
<tr>
<td>weixin</td>
<td>微信收款二维码</td>
</tr>
</tbody></table>
<h1 id="3-增加自定义的“标签”，“分类”页面"><a href="#3-增加自定义的“标签”，“分类”页面" class="headerlink" title="3. 增加自定义的“标签”，“分类”页面"></a>3. 增加自定义的“标签”，“分类”页面</h1><p>默认安装好的 next 主题，是没有“标签”，“分类”页面的；</p>
<p>需要使用者自己新增页面：</p>
<p>新增方法：以“标签”也为例说明：</p>
<ol>
<li><p>使用 hexo 命令新建 tags.md页面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> site root directory</span></span><br><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure></li>
<li><p>打开 tags.md 并修改页面类型 type 信息</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">title</span>: Tags</span><br><span class="line"><span class="attribute">date</span>: <span class="number">2021</span>-<span class="number">12</span>-<span class="number">22</span> <span class="number">12</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="attribute">type</span>: tags</span><br></pre></td></tr></table></figure></li>
<li><p>修改主题配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd next/_config.yml</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="4-开启首页文章部分显示"><a href="#4-开启首页文章部分显示" class="headerlink" title="4. 开启首页文章部分显示"></a>4. 开启首页文章部分显示</h1><p>next 主题默认的是将你的文章全篇显示在自己的首页上，这就会导致一个问题，首页各个文章太长了不利于翻阅</p>
<p>想要让文章部分显示，并出现“阅读全文的按钮”，只需要在个人的文章 Markdown 源文件中添加一行代码就行</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--more--&gt;</span></span><br></pre></td></tr></table></figure>

<p>具体位置，自己确定，在自己想要显示的文章部分下面加上即可只在首页显示所需的文章部分。</p>
<p>参考文档：</p>
<p><a href="https://theme-next.js.org/docs/theme-settings/custom-pages.html?highlight=categories#Adding-%C2%ABTags%C2%BB-Page">Custom Pages | NexT (theme-next.js.org)</a></p>
<p><a href="https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA%E5%88%86%E7%B1%BB%E9%A1%B5%E9%9D%A2">创建分类页面 · iissnan/hexo-theme-next Wiki (github.com)</a></p>
<p><a href="https://knner.wang/2019/11/03/Hexo-ThemeNext-Writing.html">Hexo + Theme Next – 写作 | Knner.Wang’s Blog</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>Hexo Theme</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Theme</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora 设置关联七牛云图床</title>
    <url>/2021/12/06/Typora-%E8%AE%BE%E7%BD%AE%E5%85%B3%E8%81%94%E4%B8%83%E7%89%9B%E4%BA%91%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h1 id="1-七牛云存储环境准备"><a href="#1-七牛云存储环境准备" class="headerlink" title="1. 七牛云存储环境准备"></a>1. 七牛云存储环境准备</h1><h2 id="1-1-注册"><a href="#1-1-注册" class="headerlink" title="1.1 注册"></a>1.1 注册</h2><p>七牛云官网：<a href="https://www.qiniu.com/">七牛云 - 国内领先的企业级云服务商 (qiniu.com)</a></p>
<p>注册流程不在这里详细说明；</p>
<p>说一下注意事项：</p>
<ol>
<li>注册后，需要实名认证</li>
<li>个人认证 即可</li>
</ol>
<span id="more"></span>

<h2 id="1-2-新建图床存储空间"><a href="#1-2-新建图床存储空间" class="headerlink" title="1.2 新建图床存储空间"></a>1.2 新建图床存储空间</h2><ol>
<li>登录后，通过“管理控制台”进入管理页面；</li>
<li>点击“对象存储 Kodo”；</li>
<li>点击“空间管理” -&gt; “新建空间” 进行图床空间创建；</li>
<li>如下图所示，设置完相关参数，即可创建一个图床存储空间；</li>
</ol>
<p><img src="http://r3oaewll2.hb-bkt.clouddn.com/image-20211207135828755.png" alt="image-20211207135828755"></p>
<p>注意事项：</p>
<ol>
<li>访问权限选择“公开”</li>
<li>存储区域一般选择“距离自己比较近的”，并且不同区域有不同的代号，后面会用到</li>
</ol>
<h1 id="2-PicGo-安装"><a href="#2-PicGo-安装" class="headerlink" title="2. PicGo 安装"></a>2. PicGo 安装</h1><p>PicGo  有两种类型；</p>
<ol>
<li>PicGo App（应用程序）</li>
<li>PicGo-Core（命令行版本）</li>
</ol>
<h2 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h2><h3 id="2-1-1-图形界面版本"><a href="#2-1-1-图形界面版本" class="headerlink" title="2.1.1 图形界面版本"></a>2.1.1 图形界面版本</h3><p><a href="https://github.com/Molunerfinn/PicGo/releases">PicGo图形</a></p>
<p>选择对应系统的安装包安装即可</p>
<h3 id="2-1-2-命令行版本"><a href="#2-1-2-命令行版本" class="headerlink" title="2.1.2 命令行版本"></a>2.1.2 命令行版本</h3><p><a href="https://github.com/PicGo/PicGo-Core">PicGo-core</a></p>
<ul>
<li>没有nodejs环境，使用typora一键安装即可</li>
<li>本机有nodjs环境，直接npm全局安装</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install picgo -g</span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">yarn global add picgo</span><br></pre></td></tr></table></figure>



<p>插件安装</p>
<p><a href="https://github.com/yuki-xin/picgo-plugin-web-uploader">picgo-plugin-web-uploader</a></p>
<p>这是一款可以上传自定义图床的插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">picgo install web-uploader</span><br></pre></td></tr></table></figure>



<h2 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h2><p>关于存储区域的填写跟在七牛云上新建空间的地理位置有关；</p>
<p>具体参考：<a href="https://developer.qiniu.com/kodo/1671/region-endpoint-fq">存储区域_产品简介_对象存储 - 七牛开发者中心 (qiniu.com)</a></p>
<p><img src="http://r3oaewll2.hb-bkt.clouddn.com/image-20211206144124515.png" alt="image-20211206144124515"></p>
<h3 id="2-2-1-图形版直接图形界面配置"><a href="#2-2-1-图形版直接图形界面配置" class="headerlink" title="2.2.1 图形版直接图形界面配置"></a>2.2.1 图形版直接图形界面配置</h3><p>参考配置</p>
<p><img src="http://r3oaewll2.hb-bkt.clouddn.com/image-20211208133520184.png" alt="image-20211208133520184"></p>
<h3 id="2-2-2-图形版直接图形界面配置"><a href="#2-2-2-图形版直接图形界面配置" class="headerlink" title="2.2.2 图形版直接图形界面配置"></a>2.2.2 图形版直接图形界面配置</h3><p>参考配置文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;picBed&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;uploader&quot;</span>: <span class="string">&quot;qi_niu&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;current&quot;</span>: <span class="string">&quot;qi_niu&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;qi_niu&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;accessKey&quot;</span>: <span class="string">&quot;you-access-key&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;secretKey&quot;</span>: <span class="string">&quot;you-secret-key&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;bucket&quot;</span>: <span class="string">&quot;blog-pic-resp&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;http://you-url&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;area&quot;</span>: <span class="string">&quot;z1&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;options&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;picgoPlugins&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;picgo-plugin-web-uploader&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="3-Typora-图片存储设置"><a href="#3-Typora-图片存储设置" class="headerlink" title="3. Typora 图片存储设置"></a>3. Typora 图片存储设置</h1><p>设置入口：设置 - 偏好设置 - 图像；</p>
<p>如下图所示：</p>
<p><img src="http://r3oaewll2.hb-bkt.clouddn.com/image-20211207102745086.png" alt="image-20211207102745086"></p>
<p><img src="http://r3oaewll2.hb-bkt.clouddn.com/image-20211207102901759.png" alt="image-20211207102901759"></p>
<ol>
<li>插入图片时：选择：上传图片；</li>
<li>上传服务设定<ol>
<li>上传服务：选择：PicGo（app）</li>
<li>PicGo 路径：选择：自己安装时候的路径</li>
</ol>
</li>
</ol>
<p>当上述两大项设置完毕后，点击：“验证图片上传选项”</p>
<p>设置成功后，会出现“验证成功”的提示，如下图：</p>
<p>如果你的主题设置是 Onedark 一类的黑色主题，这个提示可能会不明显，需要仔细查看才能看到；</p>
<p><img src="http://r3oaewll2.hb-bkt.clouddn.com/image-20211207103956991.png" alt="image-20211207103956991"></p>
<p><img src="http://r3oaewll2.hb-bkt.clouddn.com/image-20211207104327148.png" alt="image-20211207104327148"></p>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>PicGo</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>Revit 构件参数体系说明</title>
    <url>/2022/01/20/Revit-%E6%9E%84%E4%BB%B6%E5%8F%82%E6%95%B0%E4%BD%93%E7%B3%BB%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h1 id="1、Revit-构件分类说明"><a href="#1、Revit-构件分类说明" class="headerlink" title="1、Revit 构件分类说明"></a>1、Revit 构件分类说明</h1><p>从不同的维度 Revit 构件（图元）有不同的分类；</p>
<p>对用用户来说：最为熟悉的就是“项目浏览器”中“族”节点的三级分类：</p>
<p>这里主要介绍以下几种分类维度；</p>
<span id="more"></span>

<h2 id="1-1-常见的三级分类"><a href="#1-1-常见的三级分类" class="headerlink" title="1.1 常见的三级分类"></a>1.1 常见的三级分类</h2><p>三级分类，一般用于用户分类管理各种构件，方便用户快速检索使用；</p>
<p>每一级分类都有自己的参数，只不过用户经常关注的时：类型参数、实例参数而已</p>
<p><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220121142116181.png" alt="image-20220121142116181"></p>
<h3 id="1-1-1-一级分类-类别"><a href="#1-1-1-一级分类-类别" class="headerlink" title="1.1.1 一级分类 - 类别"></a>1.1.1 一级分类 - 类别</h3><p>英文名字也是 API 的名字：Category</p>
<p>Category 是 Revit 软件内置的基础数据，不能被用户和开发者“增删改”，用户只有使用权限；</p>
<p>对于某个确定的 Revit 版本 Category 数量是固定的，只有在 Revit 版本的变化的时候 Category 才可能变化（一般是新增）</p>
<p>Category 内部也是有联系的，具体变现为子类别 SubCategory，这一点一般用户是看不到的；</p>
<p>下面是 Revit API 暴露出来的所有的 Category，可以通过切花版本查看；</p>
<p><a href="https://www.revitapidocs.com/2020/ba1c5b30-242f-5fdc-8ea9-ec3b61e6e722.htm">Revit API BuiltInCategory Enumeration (revitapidocs.com)</a></p>
<p>经过个人统计 Category 发现：</p>
<p>总数：2000+</p>
<p>一般项目中用到的：900左右</p>
<p>实际建模常用的：不超过100</p>
<h3 id="1-1-2-二级分类-族"><a href="#1-1-2-二级分类-族" class="headerlink" title="1.1.2 二级分类 - 族"></a>1.1.2 二级分类 - 族</h3><p>Family</p>
<p>在类别之下的二级分类；</p>
<p>所有添加到 Revit 项目中的图元都是使用族创建的。</p>
<p>族 在 Revit 中也分为多种类型，具有一定的可扩展性，但并不是所有的族都能扩展，后面 1.2 章节会说明</p>
<p>这里需要特殊说明的是：族并不是单一的构件，它是可以嵌套，复合的，从而生成更加复杂高级的族；</p>
<p>更多详细说明参见 Autodesk Revit 官方文档：<a href="https://help.autodesk.com/view/RVT/2016/CHS/?guid=GUID-4EBB97AD-C7B6-4828-91EB-BC0E99B81E43">帮助: Revit 族 (autodesk.com)</a></p>
<h3 id="1-1-3-三级分类-类型"><a href="#1-1-3-三级分类-类型" class="headerlink" title="1.1.3 三级分类 - 类型"></a>1.1.3 三级分类 - 类型</h3><p>xxx_Type，FamilySymbol</p>
<p>一个族，可以有多个类型；一般叫：族类型；</p>
<p>类型是用户建模的时候必须指定的信息，</p>
<p>指定了类型，就只定了族和类别；</p>
<p>类型下面就是“图元”了，也可以叫构件；所谓图元，就是在模型视图中实实在在看到的对象，但被选中时，会高亮显示，并且会在“属性”窗口中显示图元的参数信息；</p>
<p><font color="red">“属性”窗口中显示的并不是图元所有的属性信息</font></p>
<h2 id="1-2-按族类型分类"><a href="#1-2-按族类型分类" class="headerlink" title="1.2 按族类型分类"></a>1.2 按族类型分类</h2><h3 id="1-2-1-系统族"><a href="#1-2-1-系统族" class="headerlink" title="1.2.1 系统族"></a>1.2.1 系统族</h3><p>特点：</p>
<ol>
<li>Revit 软件内置的，所有的 rvt 文件都是一样的；</li>
<li>有限的；</li>
<li>用户不能自己添加 / 删除（Revit 升级的时候或许会新增）；</li>
</ol>
<p>常见的系统族：墙，楼板、各种管线、屋顶、……</p>
<h3 id="1-2-2-载入族"><a href="#1-2-2-载入族" class="headerlink" title="1.2.2 载入族"></a>1.2.2 载入族</h3><p>特点：</p>
<ol>
<li>以 rfa 文件的形式存在；</li>
<li>可以载入不同的 rvt 文件中复用；</li>
<li>用户可以自己新增或者删除；</li>
</ol>
<p>常见的系统族：梁、柱、管件、管道附件、末端、家具、设备……</p>
<h3 id="1-2-3-内建族"><a href="#1-2-3-内建族" class="headerlink" title="1.2.3 内建族"></a>1.2.3 内建族</h3><p>特点：</p>
<ol>
<li>只存在于某一个 rvt 文件内，不能被复用；</li>
<li>只包含一个类型且类型名称和族名称一样</li>
<li>用户可以自己新增或者删除；</li>
</ol>
<p>可以随意指定，创建的时候只需要指定 类别，输入一个族名称，Revit 就会自动创建一个内建族</p>
<h2 id="1-3-按-Category-类型分类"><a href="#1-3-按-Category-类型分类" class="headerlink" title="1.3 按 Category 类型分类"></a>1.3 按 Category 类型分类</h2><p>这种分类是按照 Category 的属性信息 Category Type 进行划分的</p>
<p>一般较少关注</p>
<h3 id="1-3-1-模型类构件-模型族"><a href="#1-3-1-模型类构件-模型族" class="headerlink" title="1.3.1 模型类构件(模型族)"></a>1.3.1 模型类构件(模型族)</h3><p>可以在三维视图中进行查看的；</p>
<p>例如：墙、梁、板、柱、……</p>
<h3 id="1-3-2-详图类构件-注释族"><a href="#1-3-2-详图类构件-注释族" class="headerlink" title="1.3.2 详图类构件(注释族)"></a>1.3.2 详图类构件(注释族)</h3><p>在平面视图中进行辅助查看，不能在三维视图中看到；</p>
<p>例如：标记、尺寸标注、……</p>
<h3 id="1-3-3-分析类构件-分析族"><a href="#1-3-3-分析类构件-分析族" class="headerlink" title="1.3.3 分析类构件(分析族)"></a>1.3.3 分析类构件(分析族)</h3><p>Revit 中有一个单独的分析模块，分析族用来展示分析结果的</p>
<p>例如：分析墙、分析柱、……</p>
<h3 id="1-3-4-内部类构件-内部族"><a href="#1-3-4-内部类构件-内部族" class="headerlink" title="1.3.4 内部类构件(内部族)"></a>1.3.4 内部类构件(内部族)</h3><p>Revit 内部使用的；</p>
<p>用户一般不直接使用，通常起到辅助类的构件；</p>
<p>例如：结构连接处理程序、部件、……</p>
<h1 id="2、Revit-参数分类说明"><a href="#2、Revit-参数分类说明" class="headerlink" title="2、Revit 参数分类说明"></a>2、Revit 参数分类说明</h1><p>Revit 参数也有多个分类的维度，</p>
<p>这里主要介绍以下几种分类维度</p>
<h2 id="2-1-按作用的层级"><a href="#2-1-按作用的层级" class="headerlink" title="2.1 按作用的层级"></a>2.1 按作用的层级</h2><p>作用层级包含了三级分类，在 1.1 中说明过，每一级都有自己的描述参数；</p>
<p>除了三级分类，这里补充说明了“项目参数”和“实例参数”</p>
<h3 id="2-1-1-项目级参数"><a href="#2-1-1-项目级参数" class="headerlink" title="2.1.1 项目级参数"></a>2.1.1 项目级参数</h3><p>这里项目有别于建筑设计的项目，意思是 rvt 文件，Revit 默认一个 rvt 文件就是一个项目文件，rvt 文件级别的参数就是项目参数，不同的 rvt 文件可以定义不同数量的参数；</p>
<p>所有的项目参数集合在一起，叫做“项目信息”，也是一个 Category 类别</p>
<p>符合 Revit 添加参数的统一流程</p>
<p>除此之外还有一种特殊的项目参数叫“全局参数”，是 2016 R2 以后新增的，具体参见 2.2</p>
<h3 id="2-1-2-族级参数"><a href="#2-1-2-族级参数" class="headerlink" title="2.1.2 族级参数"></a>2.1.2 族级参数</h3><p>被用来描述族 Family 的相关信息；</p>
<p>一边较少使用，且不能增删改</p>
<p><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220121181936225.png" alt="image-20220121181936225"></p>
<h3 id="2-1-3-类型级参数"><a href="#2-1-3-类型级参数" class="headerlink" title="2.1.3 类型级参数"></a>2.1.3 类型级参数</h3><p>一个族一般有多个类型，一个类型之所以区别于另一个类型，就是因为类型参数的参数值不一样（如果一样，那么就可以认为是相同的类型，就没必要新建这个类型了）</p>
<p>为了描述族下面的多个类型，因此产生了类型参数；</p>
<p><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220121182705093.png" alt="image-20220121182705093"></p>
<h3 id="2-1-4-实例级参数"><a href="#2-1-4-实例级参数" class="headerlink" title="2.1.4 实例级参数"></a>2.1.4 实例级参数</h3><p>视图中看到的每一个图元，都有自己的属性信息，这些属性信息都是通过实例参数描述的；</p>
<p>具体变现为：Revit “属性”窗口中看到的参数（上面截图，左侧部分）</p>
<h2 id="2-2-按参数的定义"><a href="#2-2-按参数的定义" class="headerlink" title="2.2 按参数的定义"></a>2.2 按参数的定义</h2><p>这种分类方式，只关心参数是如何定义的，不关心这个参数将会被用于描述哪个对象；</p>
<p>通过不同不同的定义方式，可以将参数分为以下几类；</p>
<h3 id="2-2-1-内置参数"><a href="#2-2-1-内置参数" class="headerlink" title="2.2.1 内置参数"></a>2.2.1 内置参数</h3><p>BuiltinParameter</p>
<p>在 Revit 中通过枚举的方式暴露出来，用户不能做任何修改；</p>
<p><a href="https://www.revitapidocs.com/2020/fb011c91-be7e-f737-28c7-3f1e1917a0e0.htm">BuiltInParameter Enumeration (revitapidocs.com)</a></p>
<h3 id="2-2-2-共享参数"><a href="#2-2-2-共享参数" class="headerlink" title="2.2.2 共享参数"></a>2.2.2 共享参数</h3><p>用户通过共享参数文件定义；</p>
<p>一般情况下一个用户定义并使用一个共享参数文件，也可以做到多个用户使用同一个共享参数文件；</p>
<h3 id="2-2-3-族参数"><a href="#2-2-3-族参数" class="headerlink" title="2.2.3 族参数"></a>2.2.3 族参数</h3><p>在编辑 rfa 文件过程中定义的参数；</p>
<p><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220121185129566.png" alt="image-20220121185129566"></p>
<p>根据创建方式的不同，还可以划分为：</p>
<ol>
<li>共享参数</li>
<li>一般族参数<ol>
<li>这类参数比较特殊，该类型的参数只能在族文件范围内定义，</li>
<li>简单来说就是，只能在编辑 rfa 文件的时候进行定义；且有效的使用范围只能在 rfa 文件内部；</li>
<li>这中参数是造成 revit 参数被滥用的一个原因</li>
</ol>
</li>
</ol>
<p>族参数，在族内部作用的层级，还可以划分为：</p>
<ul>
<li>类型参数</li>
<li>实例参数；</li>
</ul>
<p>参考：2.1 中的类型参数和实例参数；</p>
<h3 id="2-2-4-全局参数"><a href="#2-2-4-全局参数" class="headerlink" title="2.2.4 全局参数"></a>2.2.4 全局参数</h3><p><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220124162335058.png" alt="image-20220124162335058"></p>
<p>全局参数是 Autodesk 在 Revit 2016 R2 版本（17 及其以后的版本都有）增加的内容，是继共享参数与项目参数之后新增加的一种参数。</p>
<p>全局参数特定于单个项目文件，但未像项目参数那样指定给类别。全局参数可以是简单值、来自表达式的值或使用其他全局参数从模型获取的值。</p>
<p>有点类似于族文件里的“一般族参数”</p>
<p>详细的使用方式和案例，参见官方文档：<a href="https://help.autodesk.com/view/RVT/2016/CHS/?guid=GUID-1AA9B2DC-C08B-458E-BA93-C72C109D61C8">帮助: 全局参数 (autodesk.com)</a></p>
<h1 id="3、Revit-参数管理体系"><a href="#3、Revit-参数管理体系" class="headerlink" title="3、Revit 参数管理体系"></a>3、Revit 参数管理体系</h1><p>Revit 中的参数主要有两类：</p>
<p>常规参数</p>
<p>材质类参数</p>
<h2 id="3-1-常规参数的定义管理体系"><a href="#3-1-常规参数的定义管理体系" class="headerlink" title="3.1 常规参数的定义管理体系"></a>3.1 常规参数的定义管理体系</h2><p>在 Revit 中所有的参数都必须先定义，然后才能被使用；</p>
<p>关于参数定义，Revit 有自己的一套管理体系；</p>
<p>下面截图是各种参数的定义截图</p>
<div class="tabs" id="各种参数定义"><ul class="nav-tabs"><li class="tab active"><a href="#各种参数定义-1">[共享参数定义]</a></li><li class="tab"><a href="#各种参数定义-2">[项目参数定义]</a></li><li class="tab"><a href="#各种参数定义-3">[项目参数使用共享参数定义]</a></li><li class="tab"><a href="#各种参数定义-4">[族参数定义]</a></li></ul><div class="tab-content"><div class="tab-pane active" id="各种参数定义-1"><p><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220121145632974.png" alt="image-20220121145632974"></p></div><div class="tab-pane" id="各种参数定义-2"><p><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220121150553052.png" alt="image-20220121150553052"></p></div><div class="tab-pane" id="各种参数定义-3"><p><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220121151733095.png" alt="image-20220121151733095"></p></div><div class="tab-pane" id="各种参数定义-4"><p><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220121151930344.png" alt="image-20220121151930344"></p></div></div></div>



<p>从上面的截图可以看出来，用于参数管理的主要有以下几个信息：</p>
<ul>
<li>规程</li>
<li>参数类型</li>
<li>参数分组</li>
<li>参数分组方式</li>
<li>类型 or 实例</li>
<li>是否报告参数</li>
</ul>
<p>这些信息，主要用于描述一个参数，方便 Revit 对参数进行管理；</p>
<p><font color="red">“参数定义”并不关注这个参数将会被用于描述什么对象，或者单位是什么；</font>参数的 描述对象，单位信息，则是通过一种关联关系进行使用</p>
<p>因为：</p>
<ol>
<li>一个参数的定义可以被用于描述一个或者多个对象，在给对象添加参数的时候，去选择已经定义好的参数就行了；【添加项目参数的后最右侧会有关联对象的选择】</li>
<li>一个参数可能没有单位或者有多个单位；具体选择哪个单位，在显示或者使用的时候确定就可以了，如下图所示；</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220121174516331.png" alt="image-20220121174516331"></p>
<h2 id="3-2-材质类参数管理体系"><a href="#3-2-材质类参数管理体系" class="headerlink" title="3.2 材质类参数管理体系"></a>3.2 材质类参数管理体系</h2><p>材质类参数，因为涉及到渲染、显示，因此十分复杂；Autodesk 的很多建模软件使用的材质库都是独立的，并不共享；</p>
<p>因为材质相关的参数体系太过复杂，API暴露有是有限的，所以下面主要以介绍为主；</p>
<p>功能入口：管理 -&gt; 设置 -&gt; 材质</p>
<p>在这里用户可以自己创建、定义、编辑、修改与材质相关的各种信息；</p>
<div class="tabs" id="材质-示例"><ul class="nav-tabs"><li class="tab active"><a href="#材质-示例-1">[土建材质 - 示例]</a></li><li class="tab"><a href="#材质-示例-2">[机电材质 - 示例]</a></li></ul><div class="tab-content"><div class="tab-pane active" id="材质-示例-1"><p><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220124163727041.png" alt="image-20220124163727041"></p></div><div class="tab-pane" id="材质-示例-2"><p><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220124163317836.png" alt="image-20220124163317836"></p></div></div></div>

<p>从上面的截图看，材质信息主要包含以下几类信息：</p>
<ul>
<li>标识</li>
<li>图形</li>
<li>外观</li>
<li>物理（可选）</li>
<li>热度（可选）</li>
</ul>
<p>每一类，都包含若干参数，并且通过分组进行管理</p>
<h2 id="3-3-通用参数值的管理"><a href="#3-3-通用参数值的管理" class="headerlink" title="3.3 通用参数值的管理"></a>3.3 通用参数值的管理</h2><p>上面说完了参数定义，另外一个话题就是参数值；</p>
<h3 id="3-3-1-通用参数-值-特点"><a href="#3-3-1-通用参数-值-特点" class="headerlink" title="3.3.1 通用参数(值)特点"></a>3.3.1 通用参数(值)特点</h3><p>因为存在这样一部分参数，他们对于参数值的填写是有一些基本要求的；</p>
<p>比如说：颜色，只能在 0 ~ 255 之间；</p>
<p>还有一类：提供一些基本的参数值，让用户进行选择；同时可以暴露一些参数值定义的接口，让用户可以先定义参数值，然后再选择参数值进行使用。</p>
<p>这类参数值都有一些特点：</p>
<ol>
<li>有限</li>
<li>可枚举</li>
<li>比较常见、通用</li>
<li>跟其他参数或者对象有关联关系</li>
</ol>
<p>这类参数，主要集中在 <strong>管理 -&gt; 设置</strong> 面板中</p>
<h3 id="3-3-2-例子"><a href="#3-3-2-例子" class="headerlink" title="3.3.2 例子"></a>3.3.2 例子</h3><h4 id="（1）规程类参数："><a href="#（1）规程类参数：" class="headerlink" title="（1）规程类参数："></a>（1）规程类参数：</h4><p>规程参数各处都有用，参数值是 Revit 规定的有限的几个，与其他参数有关联，比如说：参数分组，子规程等</p>
<h4 id="（2）建筑-空间-类型参数"><a href="#（2）建筑-空间-类型参数" class="headerlink" title="（2）建筑/空间 类型参数"></a>（2）建筑/空间 类型参数</h4><p><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220124171308987.png" alt="image-20220124171308987"></p>
<h4 id="（3）机电-系统类型-参数"><a href="#（3）机电-系统类型-参数" class="headerlink" title="（3）机电 - 系统类型 参数"></a>（3）机电 - 系统类型 参数</h4><p><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220124170329124.png" alt="image-20220124170329124"></p>
<h4 id="（4）显示类参数-值"><a href="#（4）显示类参数-值" class="headerlink" title="（4）显示类参数(值)"></a>（4）显示类参数(值)</h4><ul>
<li>填充样式</li>
<li>线样式</li>
<li>线宽</li>
<li>线型图案</li>
<li>材质资源</li>
</ul>
<p>这些跟材质或者显示类的参数都有关系，主要影响的就是渲染显示。</p>
]]></content>
      <categories>
        <category>Revit</category>
      </categories>
      <tags>
        <tag>Revit</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio *.sln file 编辑 bug 记录</title>
    <url>/2022/03/03/Visual-Studio-sln-file-%E7%BC%96%E8%BE%91-bug-%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>sln 是 Visual Studio 20xx 自动创建的解决方案文件，里面存放了有关解决方案的设置信息，以及有关解决方案下项目文件的组织、结构、配置信息；</p>
<p>一般情况下，我们都是通过 Visual Studio 的可视化操作 对 sln 文件间接进行编辑修改的，但是有时候为了提高效果，需要手动进行编辑操作；</p>
<p>这里主要记录手动编辑 sln 文件遇到的问题：</p>
<span id="more"></span>

<h1 id="0-有关-sln-文件的介绍"><a href="#0-有关-sln-文件的介绍" class="headerlink" title="0. 有关 sln 文件的介绍"></a>0. 有关 sln 文件的介绍</h1><p>这里假设读者对 sln 文件有一定了解，因此不在详细说明，主要用来说明遇到的问题</p>
<p>有关 sln 文件可以参考官方文档：<a href="https://docs.microsoft.com/zh-cn/visualstudio/extensibility/internals/solution-dot-sln-file?view=vs-2022">解决方案 (。Sln) 文件 - Visual Studio (Windows) | Microsoft Docs</a></p>
<p><a href="https://blog.walterlv.com/post/understand-the-sln-file">理解 Visual Studio 解决方案文件格式（.sln） - walterlv</a></p>
<h1 id="1-sln-修改后不起效的-bug"><a href="#1-sln-修改后不起效的-bug" class="headerlink" title="1. sln 修改后不起效的 bug"></a>1. sln 修改后不起效的 bug</h1><p>软件环境：visual studio 2022，sublime 3</p>
<h2 id="1-1-问题描述"><a href="#1-1-问题描述" class="headerlink" title="1.1 问题描述"></a>1.1 问题描述</h2><p>使用 sublime 打开 sln 文件，然后编辑 GlobalSection(SolutionConfigurationPlatforms) = preSolution 信息，如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220303141026555.png" alt="image-20220303141026555"></p>
<p>红框里面是新增的内容；</p>
<p>修改后保存，然后再 visual studio 中重新载入，发现：新增的解决方案配置项，并没有出现，如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220303141324034.png" alt="image-20220303141324034"></p>
<p>注：一开始编辑，全部没有出现，这里为了说明问题，故意显示 出 Release R21 Store，便于后面分析问题</p>
<h2 id="1-2-问题分析"><a href="#1-2-问题分析" class="headerlink" title="1.2 问题分析"></a>1.2 问题分析</h2><p>根据 1.1 中的现象发现，已经显示的配置项是 Release R21 Store，对应 sln 文件中的是 31 行，没有显示的是 32~40 行，这其中有什么区别不难发现。</p>
<p>唯一的区别是：31 行使用的 缩进是 tab 键，32~40 行使用的是空格 space；</p>
<p>注释：截图中的 ——  代表 Tab 键，……  代表 Space 空格键 </p>
<p>难道竟然是缩进符号的问题？？？</p>
<p>通过验证发现：果然是缩进符号导致的</p>
<h2 id="1-3-问题总结"><a href="#1-3-问题总结" class="headerlink" title="1.3 问题总结"></a>1.3 问题总结</h2><p>产生问题的原因：</p>
<p>笔者再根据 githu 上一篇技术文档的介绍，进行 sln 文件的编辑修改，文档中建议使用编辑器打开手动修改，而且附加上了修改的内容，于是我便很轻易的点击 copy 按钮，进行复制、粘贴，发现没有任何效果。</p>
<p>浪费了半天的事件才发现是 缩进符号导致的，</p>
<p>而且还是在 Sublime 中选中状态下才能发现的</p>
<p>复制粘贴代码害死人，一定要注意。</p>
]]></content>
      <categories>
        <category>VisualStudio</category>
      </categories>
      <tags>
        <tag>VisualStudio</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio 代码格式化工具</title>
    <url>/2022/03/01/Visual-Studio-%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>Visual Studio 设置 - &gt; 选项 里面自身包含有部分代码格式化的功能，但是比较弱，面对复杂的项目代码，尤其是团队开发的时候，依然存在一些问题，不能够很好的规范，格式化项目代码；比如说 XAML 文件等。</p>
<p>本篇文章，结合 Visual Studio 的基础设置，同时配合 Visual Studio 扩展相关的代码格式化工具进行项目级别代码格式化规范的统一说明。</p>
<span id="more"></span> 

<h1 id="Visual-Studio-代码格式化基础设置"><a href="#Visual-Studio-代码格式化基础设置" class="headerlink" title="Visual Studio 代码格式化基础设置"></a>Visual Studio 代码格式化基础设置</h1><p>vs 自带的文件格式化设置功能位于：工具 -&gt; 选项 -&gt; 文本编辑器</p>
<p><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220303115418833.png" alt="image-20220303115418833"></p>
<p>在这里，既可以按照编程语言设置，也可以在“所有语言”中进行统一设置；</p>
<p>这里的设置都是一些基本的设置，比如说：行号，自动补全，缩进等；</p>
<p>以C#为例，在写代码的过程中一般只有在 补全 {} 的时候才会进行自动格式化，如果实在 {} 内部写代码，比如说缩进不对，没有加空格等，那么在保存的时候就不会自动格式化（除非使用了手动/快捷键格式化或者高级插件）</p>
<p>还有，在进行 XAML 开发的时候，由于其标签语言的特性，属性有时候会比较多，尤其实在团队开发的过程中，每个人都有自己的习惯，有些人喜欢一行写下去不带换行，有些喜欢加换行（换行的时候属性的数量也不同，极端的一个属性就换行，或者三五个属性后再换行），而且相同标签的空间在一起，属性的顺序也可能不一样，这就给代码的可读性增加了困难；</p>
<p>如何解决这些问题，下面将会结合高级工具进行说明； </p>
<h1 id="1-Format-Document-On-Save-扩展插件"><a href="#1-Format-Document-On-Save-扩展插件" class="headerlink" title="1. Format Document On Save 扩展插件"></a>1. Format Document On Save 扩展插件</h1><p>主要用户解决，再保存代码的时候进行自动格式化；</p>
<p>保存操作支持</p>
<ol>
<li>ctrl+s</li>
<li>vs ide 中保存按钮</li>
</ol>
<h2 id="1-1-安装设置"><a href="#1-1-安装设置" class="headerlink" title="1.1 安装设置"></a>1.1 安装设置</h2><p>插件链接：<a href="https://marketplace.visualstudio.com/items?itemName=mynkow.FormatdocumentonSave">Format document on Save - Visual Studio Marketplace</a></p>
<p><a href="https://github.com/Elders/VSE-FormatDocumentOnSave">Elders/VSE-FormatDocumentOnSave: Visual Studio - Format Document on Save (github.com)</a></p>
<p>安装后，可以在 工具 -&gt; 选项 -&gt; Format Document On Save 中进行格式化的一些设置，操作；</p>
<p><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220303120914539.png" alt="image-20220303120914539"></p>
<p>设置项比较简单，也有注释，这里就不在一一说明了；</p>
<h2 id="1-2-项目级使用"><a href="#1-2-项目级使用" class="headerlink" title="1.2 项目级使用"></a>1.2 项目级使用</h2><p>上面介绍的使用方法，可以满足一般个人的使用，但是在团队开发的过程中，每个人的设置可能不一样，如何解决这个问题能，这里就要使用到项目级的文件格式化配置 EditConfig。</p>
<p>项目级的文件格式化配置 EditConfig，不是针对某个人的；具有以下特点：</p>
<ol>
<li>一个项目（sln）一个配置文件；</li>
<li>项目配置的优先级高于 工具 -&gt; 选项 -&gt; Format Document On Save 插件中的配置；</li>
</ol>
<p>这样，有了<a href="https://editorconfig.org/">EditorConfig</a> 即便团队中的人员插件设置不一样，也能使用相同的格式化配置；</p>
<p>有关 <a href="https://editorconfig.org/">EditorConfig</a> 的详细信息可以查看链接，这里不详细说明了。</p>
<p>有了这个插件，可以很好的解决 99% 的代码格式问题，唯一例外的就是 xaml 文件不能格式化，这个会在下面单独说明。</p>
<h1 id="2-XAML-Styler-扩展插件"><a href="#2-XAML-Styler-扩展插件" class="headerlink" title="2. XAML Styler 扩展插件"></a>2. XAML Styler 扩展插件</h1><p>在 .Net 开发中，有一种特殊的代码文件：XAML，是前面讲的代码格式化插件所不能格式的；</p>
<p>而 XAML Styler 就是专门针对 xaml 文件进行格式化，这一点从名字上就能看出来。</p>
<p>参考链接：<a href="https://www.cnblogs.com/dino623/p/XAML_Styler.html">使用 XAML 格式化工具：XAML Styler - dino.c - 博客园 (cnblogs.com)</a></p>
<h2 id="2-1-XAML-的问题"><a href="#2-1-XAML-的问题" class="headerlink" title="2.1 XAML 的问题"></a>2.1 XAML 的问题</h2><p>XAML 格式化主要的难题是下面几个：</p>
<ul>
<li>如果所有属性都写在同一行，它太宽了很难看到后面的属性</li>
<li>如果每个属性单独一行，它又太长了很难看清楚它的结构</li>
<li>属性之间没有排序，重要属性的属性找起来很困难</li>
<li>团队没有统一的标准，不小心格式化一下代码的话全部都会变，CodeReview 烦死人</li>
</ul>
<p>如果不想得过且过忍受上述这些问题的话，可以试试用 XAML Styler 这个工具，它正好解决了这些问题。</p>
<h2 id="2-2-安装使用"><a href="#2-2-安装使用" class="headerlink" title="2.2 安装使用"></a>2.2 安装使用</h2><p>XAML Styler 是一个 VisualStudio插件（也可用于其它 IDE），这是它在  Visual Studio Marketplace 和 Github 上的地址：</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=NicoVermeir.XAMLStyler">XAML Styler - Visual Studio Marketplace</a></p>
<p><a href="https://github.com/Xavalon/XamlStyler">Xavalon/XamlStyler: Visual Studio extension to help format your XAML source code (github.com)</a></p>
<p><a href="https://github.com/Xavalon/XamlStyler/wiki">Home · Xavalon/XamlStyler Wiki (github.com)</a></p>
<p>在 VisualStudio 的管理扩展窗口中，输入 XamlStyle 搜索，点击“下载”然后关闭 VisualStudio 即可完成安装。</p>
<p>具体安装步骤不在这里说明了。</p>
<p>安装完成后重启 Visual Studio，可以在“选项”窗口中看到它的配置：</p>
<p><a href="https://img2020.cnblogs.com/blog/38937/202101/38937-20210120232810578-324783095.png"><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/38937-20210120232810578-324783095.png" alt="img"></a></p>
<p>之后，每次在 XAML 编辑器中执行保存都会自动进行格式化操作。你也可以在 XAML 编辑器的右键菜单选择 Format XAML 或使用快捷键进行格式化。</p>
<h2 id="2-3-关键格式化设置项说明"><a href="#2-3-关键格式化设置项说明" class="headerlink" title="2.3 关键格式化设置项说明"></a>2.3 关键格式化设置项说明</h2><p>XAML 的格式主要有两种方式：所有属性放一行和每个属性单独一行。</p>
<p>如果选择所有属性放一行的时候，XAML 结构清晰，结构严谨，段落分明，而且文件也很短。</p>
<p>可是万一很多属性问题就出来了，一行 XAML 会变得很长。而且看看下面两个 ContentPresenter，同样都有 Margin 属性、HorizontalAlignment 属性，VerticalAlignment 属性，RecognizesAccessKey 属性，SnapsToDevicePixels 顺序ing，但你能看到第二个 ContentPresenter 后面偷偷塞了个 Margin 吗：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Copy<span class="tag">&lt;<span class="name">ContentPresenter</span> <span class="attr">Margin</span>=<span class="string">&quot;&#123;TemplateBinding Padding&#125;&quot;</span> <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding HorizontalContentAlignment&#125;&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding VerticalContentAlignment&#125;&quot;</span> <span class="attr">RecognizesAccessKey</span>=<span class="string">&quot;True&quot;</span> <span class="attr">SnapsToDevicePixels</span>=<span class="string">&quot;&#123;TemplateBinding SnapsToDevicePixels&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ContentPresenter</span> <span class="attr">Margin</span>=<span class="string">&quot;&#123;TemplateBinding Padding&#125;&quot;</span> <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding HorizontalContentAlignment&#125;&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding VerticalContentAlignment&#125;&quot;</span> <span class="attr">RecognizesAccessKey</span>=<span class="string">&quot;True&quot;</span> <span class="attr">SnapsToDevicePixels</span>=<span class="string">&quot;&#123;TemplateBinding SnapsToDevicePixels&#125;&quot;</span> <span class="attr">Margin</span>=<span class="string">&quot;40&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果在 VisualStudio 中“文本编辑器-&gt;XAML-&gt;格式化-&gt;间距-&gt;特性间距”这个选项中选择了“将各个属性分别放置”：</p>
<p><a href="https://img2020.cnblogs.com/blog/38937/202101/38937-20210120232837859-1653416211.png"><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/38937-20210120232837859-1653416211.png" alt="img"></a></p>
<p>格式化文档后上面的 XAML 就会变成这样：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ContentPresenter</span> <span class="attr">Margin</span>=<span class="string">&quot;&#123;TemplateBinding Padding&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding HorizontalContentAlignment&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">VerticalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding VerticalContentAlignment&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">RecognizesAccessKey</span>=<span class="string">&quot;True&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">SnapsToDevicePixels</span>=<span class="string">&quot;&#123;TemplateBinding SnapsToDevicePixels&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ContentPresenter</span> <span class="attr">Margin</span>=<span class="string">&quot;&#123;TemplateBinding Padding&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding HorizontalContentAlignment&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">VerticalAlignment</span>=<span class="string">&quot;&#123;TemplateBinding VerticalContentAlignment&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">RecognizesAccessKey</span>=<span class="string">&quot;True&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">SnapsToDevicePixels</span>=<span class="string">&quot;&#123;TemplateBinding SnapsToDevicePixels&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">Margin</span>=<span class="string">&quot;40&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>每个属性单独一行不仅不会看漏属性，而且编辑器本身也不会有横向和纵向两种方向的移动，只有从上到下的移动，这就舒服多了。</p>
<p>可是大部分情况下每个属性分行放置会破坏原本清晰的 XAML 层次结构，例如下面这种本来好好的 XAML:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontWeight&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;Normal&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;UseSystemFocusVisuals&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FocusVisualMargin&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;-3&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Height&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Width&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Maximum&quot;</span> <span class="attr">Value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>变成这样：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FontWeight&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Value</span>=<span class="string">&quot;Normal&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;UseSystemFocusVisuals&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Value</span>=<span class="string">&quot;True&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;FocusVisualMargin&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Value</span>=<span class="string">&quot;-3&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Height&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Value</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Width&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Value</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">&quot;Maximum&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>这种风格优雅得像诗歌<br>我偶尔称为豆瓣风<br>一行变两行<br>两行变四行<br>本来<br>一页看得完<br>的代码<br>变成<br>两页才看得完<br>也是够<br>麻烦的。</p>
<p>XAML Styler 很好地解决了这个问题，它通过 “Attribute tolerance” 属性控制每一行的容许的最多的属性数量，如果一个元素的属性数量少于设定值，那就放在一行，如果超过就所有属性单独一行。通常我将这个属性设置为 <code>2</code>，再配合 “Keep first attribute on same line = true” 的设置，可以做到下面这种格式化效果：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">x:Key</span>=<span class="string">&quot;NormalTextColor&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;#2E2F33&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">x:Key</span>=<span class="string">&quot;PrimaryColor&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;#FFED5B8C&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">x:Key</span>=<span class="string">&quot;LineColor&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;#E1E1E1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SolidColorBrush</span> <span class="attr">x:Key</span>=<span class="string">&quot;TransparentBackground&quot;</span> <span class="attr">Color</span>=<span class="string">&quot;Transparent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">x:Key</span>=<span class="string">&quot;CompletedTemplate&quot;</span> <span class="attr">TargetType</span>=<span class="string">&quot;ContentControl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">x:Name</span>=<span class="string">&quot;CompletedElement&quot;</span> <span class="attr">Margin</span>=<span class="string">&quot;-2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">control:DropShadowPanel</span> <span class="attr">HorizontalContentAlignment</span>=<span class="string">&quot;Stretch&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">VerticalContentAlignment</span>=<span class="string">&quot;Stretch&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">BlurRadius</span>=<span class="string">&quot;8&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">OffsetX</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">OffsetY</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">Color</span>=<span class="string">&quot;#FFED5B8C&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Ellipse</span> <span class="attr">x:Name</span>=<span class="string">&quot;CompletedRectangle&quot;</span> <span class="attr">Fill</span>=<span class="string">&quot;&#123;StaticResource PrimaryColor&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">control:DropShadowPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样就可以兼顾两种格式化的优点。</p>
<h2 id="2-4-排序"><a href="#2-4-排序" class="headerlink" title="2.4 排序"></a>2.4 排序</h2><p>如果元素有多个属性，要找到它的主要属性（通常是 Name 和 Grid.Row）需要颇费一番功夫。XAML Styler 根据一个可设定的规则自动将元素的各个属性排序，这个规则如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;AttributeOrderingRuleGroups&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;x:Class&quot;</span>,</span><br><span class="line">    <span class="string">&quot;xmlns, xmlns:x&quot;</span>,</span><br><span class="line">    <span class="string">&quot;xmlns:*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;x:Key, Key, x:Name, Name, x:Uid, Uid, Title&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Grid.Row, Grid.RowSpan, Grid.Column, Grid.ColumnSpan, Canvas.Left, Canvas.Top, Canvas.Right, Canvas.Bottom&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Width, Height, MinWidth, MinHeight, MaxWidth, MaxHeight&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Margin, Padding, HorizontalAlignment, VerticalAlignment, HorizontalContentAlignment, VerticalContentAlignment, Panel.ZIndex&quot;</span>,</span><br><span class="line">    <span class="string">&quot;*:*, *&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PageSource, PageIndex, Offset, Color, TargetName, Property, Value, StartPoint, EndPoint&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mc:Ignorable, d:IsDataSource, d:LayoutOverrides, d:IsStaticText&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Storyboard.*, From, To, Duration&quot;</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<p>排序结果大致如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">&quot;Show&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Padding</span>=<span class="string">&quot;40,20&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Background</span>=<span class="string">&quot;#00aef1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Content</span>=<span class="string">&quot;Show&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Foreground</span>=<span class="string">&quot;White&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Style</span>=<span class="string">&quot;&#123;StaticResource BubbleButtonStyle&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-5-项目级使用"><a href="#2-5-项目级使用" class="headerlink" title="2.5 项目级使用"></a>2.5 项目级使用</h2><p>最后，就算自己做好了格式化，团队中的其它成员使用了不同的格式化标准也会引起很多问题。针对这个问题 Xaml Styler 也提供了解决方案。</p>
<p>在项目的根目录创建一个名为“Settings.XamlStyler”的文件，内容参考这个网址：<a href="https://github.com/Xavalon/XamlStyler/wiki/External-Configurations">https://github.com/Xavalon/XamlStyler/wiki/External-Configurations</a> 中的 <strong>Default Configuration</strong>。有了这个配置文件，XAML Styler 就会根据它而不是全局配置进行格式化，作为项目的统一格式化标准。</p>
<h2 id="2-6-ctrl-s-保存时的冲突问题解决"><a href="#2-6-ctrl-s-保存时的冲突问题解决" class="headerlink" title="2.6 ctrl+s 保存时的冲突问题解决"></a>2.6 ctrl+s 保存时的冲突问题解决</h2><p>设置完这两个插件后，在实际使用的过程中可能会发现：在使用 ctrl + s 保存的时候会达不到效果</p>
<h3 id="现象分析"><a href="#现象分析" class="headerlink" title="现象分析"></a>现象分析</h3><p>在 xaml 中按 ctrl + s 保存的时候，仔细查看画面，会发现 xaml 文件被保存了两次，而且第一一闪而过的结果好像还是正确的，最初呈现的第二次保存解决却不对了，</p>
<h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>根据现象可以分析出来，不止一个插件触发了xaml 的保存操作，那个捣乱者是谁，很容易想到是 Format Document On Save</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>从现象中我们看到，保存了两次导致解结果不对；</p>
<p>那么就有两个解决方案：</p>
<ol>
<li>让 xaml styler 最后保存，</li>
<li>不然 Format Document On Save 保存 xaml；</li>
</ol>
<p>方案 1 我们无法控制保存顺序，暂时无解；</p>
<p>方案 2 如果我们在设置中可以设置 不存在 xaml 文件就可以了，或许可行</p>
<p>打开 Format Document On Save  设置信息，我们仔细查看，有一个叫 <strong>Denied Extensions</strong> 的设置项，我们可以通过它设置不格式化 xaml 文件，设置后试了一些，依然达不到效果，查看那里除了问题，仔细看 <strong>Denied Extensions</strong> 设置项的说明发现：</p>
<p> <strong>Denied Extensions</strong> 设置项，只有在  <strong>Allowed Extensions</strong> 设置项为空的情况下才能生效，于是赶紧删除试一下，果然成功了。</p>
]]></content>
      <categories>
        <category>VisualStudio</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>VisualStudio</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF 在 Trigger 中修改 Button Content 注意事项</title>
    <url>/2021/12/02/WPF-%E5%9C%A8-Trigger-%E4%B8%AD%E4%BF%AE%E6%94%B9-Button-Content-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h2><p>xaml 代码块如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Button Content=&quot;333&quot;&gt;</span><br><span class="line">                &lt;Button.Style&gt;</span><br><span class="line">                    &lt;Style TargetType=&quot;Button&quot;&gt;</span><br><span class="line">                        &lt;Setter Property=&quot;Width&quot; Value=&quot;70&quot;/&gt;</span><br><span class="line">                        &lt;Setter Property=&quot;Height&quot; Value=&quot;27&quot;/&gt;</span><br><span class="line">                        &lt;Style.Triggers&gt;</span><br><span class="line">                            &lt;DataTrigger Binding=&quot;&#123;Binding ElementName=listBox, Path=SelectedIndex&#125;&quot; Value=&quot;2&quot;&gt;</span><br><span class="line">                                &lt;Setter Property=&quot;Content&quot; Value=&quot;three&quot; /&gt;</span><br><span class="line">                            &lt;/DataTrigger&gt;</span><br><span class="line">                        &lt;/Style.Triggers&gt;</span><br><span class="line">                    &lt;/Style&gt;</span><br><span class="line">                &lt;/Button.Style&gt;</span><br><span class="line">            &lt;/Button&gt;</span><br></pre></td></tr></table></figure>

<p>运行后，触发 DataTrigger 发现 Button 的 Content 没有变化</p>
<span id="more"></span>

<h2 id="2-原因和解决方法"><a href="#2-原因和解决方法" class="headerlink" title="2. 原因和解决方法"></a>2. 原因和解决方法</h2><p>原因：定义 Button 的时候直接指定 Content 相当于定死了 Button 的 Content ，所以在 Style 的 Trigger 中就无法修改了；</p>
<p>注意： 这个时候如果指定有默认的 Button Style，默认样式也会失效；原因是重写了 Style；</p>
<p>解决方案：将 Content 的默认值，写进 Button.Style，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Button&gt;</span><br><span class="line">     &lt;Button.Style&gt;</span><br><span class="line">         &lt;Style TargetType=&quot;Button&quot;&gt;</span><br><span class="line">             &lt;Setter Property=&quot;Content&quot; Value=&quot;333&quot;/&gt;</span><br><span class="line">             &lt;Setter Property=&quot;Width&quot; Value=&quot;70&quot;/&gt;</span><br><span class="line">             &lt;Setter Property=&quot;Height&quot; Value=&quot;27&quot;/&gt;</span><br><span class="line">             &lt;Style.Triggers&gt;</span><br><span class="line">                 &lt;DataTrigger Binding=&quot;&#123;Binding ElementName=listBox, Path=SelectedIndex&#125;&quot; Value=&quot;2&quot;&gt;</span><br><span class="line">                     &lt;Setter Property=&quot;Content&quot; Value=&quot;three&quot; /&gt;</span><br><span class="line">                 &lt;/DataTrigger&gt;</span><br><span class="line">             &lt;/Style.Triggers&gt;</span><br><span class="line">         &lt;/Style&gt;</span><br><span class="line">     &lt;/Button.Style&gt;</span><br><span class="line"> &lt;/Button&gt;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>WPF</category>
      </categories>
      <tags>
        <tag>.Net</tag>
        <tag>C#</tag>
        <tag>WPF</tag>
        <tag>Style</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Terminal 集成 Oh My Posh</title>
    <url>/2021/12/29/Windows-Terminal-%E9%9B%86%E6%88%90-Oh-My-Posh/</url>
    <content><![CDATA[<h1 id="1-准备安装环境"><a href="#1-准备安装环境" class="headerlink" title="1. 准备安装环境"></a>1. 准备安装环境</h1><p>Windows Termianl, PowerShell 都可以从 Microsoft Store 中下载</p>
<ul>
<li><a href="https://www.microsoft.com/store/productId/9N0DX20HK701">Windows Terminal</a> (Windows 自带)</li>
<li> <a href="https://www.microsoft.com/store/productId/9MZ1SNWT0N5D">PowerShell</a></li>
</ul>
<p>具体安装这里不做详细说明</p>
<span id="more"></span>

<h1 id="2-安装-Oh-My-Posh"><a href="#2-安装-Oh-My-Posh" class="headerlink" title="2. 安装 Oh My Posh"></a>2. 安装 Oh My Posh</h1><div class="note info"><p>这里推荐去 Oh My Posh 官方网站查看最新的安装方法；</p>
<p>网上的大部分教程，存在时效性问题，因为  Oh My Posh 是不断更新的，不同时间不同版本的安装方法可能不一样</p>
<p>因此搜索到的二手安装教程不一定使用目前安装的你</p>
</div>

<p><a href="https://ohmyposh.dev/">Home | Oh My Posh</a></p>
<p><a href="https://ohmyposh.dev/docs/">Introduction | Oh My Posh</a></p>
<h2 id="2-1-参考文档："><a href="#2-1-参考文档：" class="headerlink" title="2.1 参考文档："></a>2.1 参考文档：</h2><p><a href="https://blog.walterlv.com/post/beautify-powershell-like-zsh.html">将美化进行到底，使用 Oh My Posh 把 PowerShell 做成 oh-my-zsh 的样子 - walterlv</a></p>
<h2 id="2-2-可能使用到的命令"><a href="#2-2-可能使用到的命令" class="headerlink" title="2.2 可能使用到的命令"></a>2.2 可能使用到的命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看已经安装的模块</span></span><br><span class="line">Get-InstalledModule</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当前用户安装一个模块 （-Verbose 参数显示细节）全局使用 AllUsers</span> </span><br><span class="line">Install-Module oh-my-posh -Scope CurrentUser -Verbose</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导入加载一个模块 （-Verbose 参数显示细节）</span></span><br><span class="line">Import-Module oh-my-posh -Verbose</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载一个模块</span></span><br><span class="line">Uninstall-Module -Name  oh-my-posh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 PowerShell 安装源 Gallery</span></span><br><span class="line">Get-PSRepository</span><br></pre></td></tr></table></figure>

<p>参考链接：</p>
<p><a href="https://docs.microsoft.com/zh-cn/powershell/module/powershellget/install-module?view=powershell-7">Install-Module (PowerShellGet) - PowerShell | Microsoft Docs</a></p>
<p><a href="https://docs.microsoft.com/zh-cn/powershell/module/powershellget/get-psrepository?view=powershell-7">Get-PSRepository (PowerShellGet) - PowerShell | Microsoft Docs</a></p>
<p><a href="https://www.powershellgallery.com/">PowerShell Gallery | Home</a></p>
<h2 id="2-3-字体选择"><a href="#2-3-字体选择" class="headerlink" title="2.3 字体选择"></a>2.3 字体选择</h2><p>官方推荐 <a href="https://www.nerdfonts.com/font-downloads">Nerd Fonts - Iconic font aggregator, glyphs/icons collection, &amp; fonts patcher</a> </p>
<p>下载自定后安装方法：</p>
<p>解压、进入字体目录、全选、右键、安装 即可</p>
<h1 id="3-Posh-Git-安装"><a href="#3-Posh-Git-安装" class="headerlink" title="3. Posh-Git 安装"></a>3. Posh-Git 安装</h1><p><a href="https://github.com/dahlbyk/posh-git">dahlbyk/posh-git: A PowerShell environment for Git (github.com)</a></p>
<p>Posh-Git 提供了强大的 tab 补全功能， 并针对提示符进行了增强；可以在 Terminal 中使用</p>
<p>官方文档安装方法： <a href="https://git-scm.com/book/zh/v2/%E9%99%84%E5%BD%95-A%3A-%E5%9C%A8%E5%85%B6%E5%AE%83%E7%8E%AF%E5%A2%83%E4%B8%AD%E4%BD%BF%E7%94%A8-Git-Git-%E5%9C%A8-PowerShell-%E4%B8%AD%E4%BD%BF%E7%94%A8-Git">Git - Git 在 PowerShell 中使用 Git (git-scm.com)</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> posh<span class="literal">-git</span> <span class="literal">-Scope</span> CurrentUser <span class="literal">-Force</span></span><br></pre></td></tr></table></figure>

<p>这里不做详细说明</p>
]]></content>
      <categories>
        <category>Termianl</category>
        <category>PowerShell</category>
      </categories>
      <tags>
        <tag>Termianl,PowerShell,Oh-My-Posh</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF 窗口控件默认键盘焦点设置</title>
    <url>/2022/03/14/WPF-%E7%AA%97%E5%8F%A3%E6%8E%A7%E4%BB%B6%E9%BB%98%E8%AE%A4%E9%94%AE%E7%9B%98%E7%84%A6%E7%82%B9%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>大家经常能够看到 WPF 窗口加载显示后，用户按 Tab 键，就会有一个控价获得焦点，如果这个控件是 Button，那么表现为：在 Button 文本周围有个虚线框；如果是 TextBox，那么表现为：在 TextBox 内部会有光标在闪烁。那么如何在 View 加载后设置默认显示这个效果，本文将会说明。</p>
<p><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/image-20220314142837858.png" alt="image-20220314142837858"></p>
<span id="more"></span>

<h1 id="一、关于-焦点-的-基本知识"><a href="#一、关于-焦点-的-基本知识" class="headerlink" title="一、关于 焦点 的 基本知识"></a>一、关于 焦点 的 基本知识</h1><p><a href="https://docs.microsoft.com/zh-cn/dotnet/desktop/wpf/advanced/focus-overview?view=netframeworkdesktop-4.8">焦点概述 - WPF .NET Framework | Microsoft Docs</a></p>
<p><a href="https://docs.microsoft.com/zh-cn/dotnet/desktop/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle?redirectedfrom=MSDN&view=netframeworkdesktop-4.8">为控件中的焦点设置样式以及 FocusVisualStyle - WPF .NET Framework | Microsoft Docs</a></p>
<p>两种焦点：</p>
<ol>
<li>键盘焦点</li>
<li>逻辑焦点</li>
</ol>
<p>这里有一段话明确说明了虚线框是键盘焦点的由来</p>
<blockquote>
<p><em>Focus visual styles act only when the focus action was initiated by the keyboard. Any mouse action or programmatic focus change disables the mode for focus visual styles.</em></p>
</blockquote>
<p>意思是：虚线框这种焦点效果，只能通过按 Tab 键进行触发</p>
<h1 id="二、实现方案"><a href="#二、实现方案" class="headerlink" title="二、实现方案"></a>二、实现方案</h1><p>明白了焦点效果产生的缘由，我们就可以思考如何实现</p>
<p>这里主要介绍如下实现方式；</p>
<h2 id="2-1-模拟按键实现"><a href="#2-1-模拟按键实现" class="headerlink" title="2.1 模拟按键实现"></a>2.1 模拟按键实现</h2><p>既然只能通过按 Tab 键触发产生想要的效果，最直接的方法就是：</p>
<p>在 View 加载后，通过编码实现模拟用户按键到达想要的键盘焦点效果；</p>
<p>具体实现方式编码，可以通过 PInvoke SendInput 实现，</p>
<p>也可以使用封装好的第三方包，<a href="https://www.nuget.org/packages/InputSimulator/">NuGet Gallery | InputSimulator 1.0.4</a></p>
<p>缺点：</p>
<p>要提前计算好要按几次才能达到指定的控件；</p>
<h2 id="2-2-重写键盘焦点样式"><a href="#2-2-重写键盘焦点样式" class="headerlink" title="2.2 重写键盘焦点样式"></a>2.2 重写键盘焦点样式</h2><p>在第一章节中了解了：想要的样式是通过那种 Style 控制产生的，那么我们就可以重新实现一种新的样式，默认显示我们想要的效果。</p>
<p>确定：</p>
<p>复杂，需要重写想过控件的样式</p>
<h2 id="2-3-辅助方法实现"><a href="#2-3-辅助方法实现" class="headerlink" title="2.3 辅助方法实现"></a>2.3 辅助方法实现</h2><p>通过反射的方法，调用 ShowFocusVisual Internal 方法实现。</p>
<p>笔者用的就是这种方法，因为我的需要没有复杂的样式要求，只需要显示默认的键盘焦点样式即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public sealed class KeyboardHelper</span><br><span class="line">&#123;</span><br><span class="line">    private static KeyboardHelper _Instance;</span><br><span class="line"></span><br><span class="line">    private readonly PropertyInfo _AlwaysShowFocusVisual;</span><br><span class="line">    private readonly MethodInfo _ShowFocusVisual;</span><br><span class="line"></span><br><span class="line">    // Explicit static constructor to tell C# compiler</span><br><span class="line">    // not to mark type as beforefieldinit</span><br><span class="line">    static KeyboardHelper()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private KeyboardHelper()</span><br><span class="line">    &#123;</span><br><span class="line">        var type = typeof(KeyboardNavigation);</span><br><span class="line"></span><br><span class="line">        _AlwaysShowFocusVisual = type.GetProperty(&quot;AlwaysShowFocusVisual&quot;, BindingFlags.NonPublic | BindingFlags.Static);</span><br><span class="line">        _ShowFocusVisual = type.GetMethod(&quot;ShowFocusVisual&quot;, BindingFlags.NonPublic | BindingFlags.Static);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    internal static KeyboardHelper Instance =&gt; _Instance ?? (_Instance = new KeyboardHelper());</span><br><span class="line"></span><br><span class="line">    internal void ShowFocusVisualInternal()</span><br><span class="line">    &#123;</span><br><span class="line">        _ShowFocusVisual.Invoke(null, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    internal bool AlwaysShowFocusVisualInternal</span><br><span class="line">    &#123;</span><br><span class="line">        get &#123; return (bool)_AlwaysShowFocusVisual.GetValue(null, null); &#125;</span><br><span class="line">        set &#123; _AlwaysShowFocusVisual.SetValue(null, value, null); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void Focus(UIElement element)</span><br><span class="line">    &#123;</span><br><span class="line">        element?.Dispatcher.BeginInvoke(DispatcherPriority.Background, new Action(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            var keybHack = KeyboardHelper.Instance;</span><br><span class="line">            var oldValue = keybHack.AlwaysShowFocusVisualInternal;</span><br><span class="line"></span><br><span class="line">            keybHack.AlwaysShowFocusVisualInternal = true;</span><br><span class="line"></span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                Keyboard.Focus(element);</span><br><span class="line">                keybHack.ShowFocusVisualInternal();</span><br><span class="line">            &#125;</span><br><span class="line">            finally</span><br><span class="line">            &#123;</span><br><span class="line">               keybHack.AlwaysShowFocusVisualInternal = oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用方法: 在构造方法中的 InitializeComponent 方法 或者 Loaded 后添加下方代码即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KeyboardHelper.Focus(this.OkBtn); // Button Name</span><br></pre></td></tr></table></figure>

<p>缺点：</p>
<p>需要使用控件 Name；</p>
<h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>这第二章节中介绍了三种方法，大家可以根据自己的需要，选择合适的方法</p>
<p>笔者采用的是 2.3 ，目前没有发现什么问题；</p>
<p>参考链接：</p>
<p><a href="https://stackoverflow.com/questions/5468419/wpf-button-to-have-keyboard-focus-dotted-border-around-during-the-startup-or-a/54332878#54332878?newreg=1c1894efcf124154aece9df9df062740">WPF Button to have Keyboard focus (dotted border around) during the startup or activation of window - Stack Overflow</a></p>
<p><a href="https://stackoverflow.com/questions/5400570/how-to-make-checkbox-focus-border-appear-when-calling-checkbox-focus/5401707#5401707">wpf - How to make CheckBox focus border appear when calling CheckBox.Focus()? - Stack Overflow</a></p>
]]></content>
      <categories>
        <category>WPF</category>
      </categories>
      <tags>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/03/07/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>test_my_site</title>
    <url>/2020/04/12/test-my-site/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>wpf control window 范围内默认样式对第一个控件无效</title>
    <url>/2021/12/02/wpf-control-window-%E8%8C%83%E5%9B%B4%E5%86%85%E9%BB%98%E8%AE%A4%E6%A0%B7%E5%BC%8F%E5%AF%B9%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%8E%A7%E4%BB%B6%E6%97%A0%E6%95%88/</url>
    <content><![CDATA[<h2 id="1、问题描述"><a href="#1、问题描述" class="headerlink" title="1、问题描述"></a>1、问题描述</h2><p>wpf 页面设计中，有时候在 xaml 文件 Resource 中指定 window 范围的默认 control style，但是却发现对第一个控件不起作用，具体如下：</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Window x:Class=&quot;TestApp.TestWindow&quot;</span><br><span class="line">        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span><br><span class="line">        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span><br><span class="line">        Title=&quot;TestWindow&quot; Height=&quot;400&quot; Width=&quot;500&quot;</span><br><span class="line">        WindowStyle=&quot;None&quot; WindowState=&quot;Maximized&quot;&gt;</span><br><span class="line">    &lt;Window.Resources&gt;</span><br><span class="line">        &lt;ResourceDictionary&gt;</span><br><span class="line">            &lt;ResourceDictionary.MergedDictionaries&gt;</span><br><span class="line">                &lt;ResourceDictionary Source=&quot;Resources/AllResources.xaml&quot;/&gt;</span><br><span class="line">                &lt;ResourceDictionary&gt;</span><br><span class="line">                    &lt;Style TargetType=&quot;&#123;x:Type Button&#125;&quot;&gt;</span><br><span class="line">                        &lt;Setter Property=&quot;FontSize&quot; Value=&quot;100&quot;/&gt;</span><br><span class="line">                    &lt;/Style&gt;</span><br><span class="line">                &lt;/ResourceDictionary&gt;</span><br><span class="line">            &lt;/ResourceDictionary.MergedDictionaries&gt;</span><br><span class="line">        &lt;/ResourceDictionary&gt;</span><br><span class="line">    &lt;/Window.Resources&gt;</span><br><span class="line">    &lt;Grid&gt;</span><br><span class="line">        &lt;Grid.ColumnDefinitions&gt;</span><br><span class="line">            &lt;ColumnDefinition/&gt;</span><br><span class="line">            &lt;ColumnDefinition/&gt;</span><br><span class="line">        &lt;/Grid.ColumnDefinitions&gt;</span><br><span class="line">        &lt;Button Grid.Column=&quot;0&quot; Content=&quot;1&quot; Name=&quot;Button1&quot;/&gt;</span><br><span class="line">        &lt;Button Grid.Column=&quot;1&quot; Content=&quot;2&quot; Name=&quot;Button2&quot;/&gt;</span><br><span class="line">    &lt;/Grid&gt;</span><br><span class="line">&lt;/Window&gt;</span><br></pre></td></tr></table></figure>

<p>button1 的 FontSize 并不是 100；但是 button2 却没问题；</p>
<p>通常我们使用下面的代码是没问题的；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Window x:Class=&quot;TestApp.TestWindow&quot;</span><br><span class="line">        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span><br><span class="line">        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span><br><span class="line">        Title=&quot;TestWindow&quot; Height=&quot;400&quot; Width=&quot;500&quot;</span><br><span class="line">        WindowStyle=&quot;None&quot; WindowState=&quot;Maximized&quot;&gt;</span><br><span class="line">    &lt;Window.Resources&gt;</span><br><span class="line">        &lt;Style TargetType=&quot;&#123;x:Type Button&#125;&quot;&gt;</span><br><span class="line">            &lt;Setter Property=&quot;FontSize&quot; Value=&quot;100&quot;/&gt;</span><br><span class="line">        &lt;/Style&gt;</span><br><span class="line">    &lt;/Window.Resources&gt;</span><br><span class="line">    &lt;Grid&gt;</span><br><span class="line">        &lt;Grid.ColumnDefinitions&gt;</span><br><span class="line">            &lt;ColumnDefinition/&gt;</span><br><span class="line">            &lt;ColumnDefinition/&gt;</span><br><span class="line">        &lt;/Grid.ColumnDefinitions&gt;</span><br><span class="line">        &lt;Button Grid.Column=&quot;0&quot; Content=&quot;1&quot; Name=&quot;Button1&quot;/&gt;</span><br><span class="line">        &lt;Button Grid.Column=&quot;1&quot; Content=&quot;2&quot; Name=&quot;Button2&quot;/&gt;</span><br><span class="line">    &lt;/Grid&gt;</span><br><span class="line">&lt;/Window&gt;</span><br></pre></td></tr></table></figure>



<h2 id="2、原因和解决方法"><a href="#2、原因和解决方法" class="headerlink" title="2、原因和解决方法"></a>2、原因和解决方法</h2><h3 id="2-1-原因"><a href="#2-1-原因" class="headerlink" title="2.1 原因"></a>2.1 原因</h3><p>因为把 Button 默认样式放在了 ResourceDictionary.MergedDictionaries 内部的ResourceDictionary 内了，这样在解析引用样式的时候会跳过第一个元素；</p>
<h3 id="2-2-解决方案"><a href="#2-2-解决方案" class="headerlink" title="2.2 解决方案"></a>2.2 解决方案</h3><p>将 style 提到 ResourceDictionary.MergedDictionaries 之外</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Window.Resources&gt;</span><br><span class="line">    &lt;ResourceDictionary&gt;</span><br><span class="line">        &lt;ResourceDictionary.MergedDictionaries&gt;</span><br><span class="line">            &lt;ResourceDictionary Source=&quot;Resources/AllResources.xaml&quot;/&gt;</span><br><span class="line">        &lt;/ResourceDictionary.MergedDictionaries&gt;</span><br><span class="line">        &lt;Style TargetType=&quot;&#123;x:Type Button&#125;&quot;&gt;</span><br><span class="line">            &lt;Setter Property=&quot;FontSize&quot; Value=&quot;100&quot;/&gt;</span><br><span class="line">        &lt;/Style&gt;</span><br><span class="line">    &lt;/ResourceDictionary&gt;</span><br><span class="line">&lt;/Window.Resources&gt;</span><br><span class="line">&lt;Grid&gt;</span><br><span class="line">    &lt;Grid.ColumnDefinitions&gt;</span><br><span class="line">        &lt;ColumnDefinition/&gt;</span><br><span class="line">        &lt;ColumnDefinition/&gt;</span><br><span class="line">    &lt;/Grid.ColumnDefinitions&gt;</span><br><span class="line">    &lt;Button Grid.Column=&quot;0&quot; Content=&quot;1&quot; Name=&quot;Button1&quot;/&gt;</span><br><span class="line">    &lt;Button Grid.Column=&quot;1&quot; Content=&quot;2&quot; Name=&quot;Button2&quot;/&gt;</span><br><span class="line">&lt;/Grid&gt;</span><br></pre></td></tr></table></figure>



<p>参考链接：<a href="https://stackoverflow.com/questions/4811884/wpf-doesnt-apply-style-to-first-element">resources - WPF doesn’t apply style to first element - Stack Overflow</a></p>
]]></content>
      <categories>
        <category>WPF</category>
      </categories>
      <tags>
        <tag>.Net</tag>
        <tag>C#</tag>
        <tag>WPF</tag>
        <tag>Style</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Windows Server 建立 Web Site 并关联 FTP Server</title>
    <url>/2022/01/25/%E4%BD%BF%E7%94%A8-Windows-Server-%E5%BB%BA%E7%AB%8B-Web-Site-%E5%B9%B6%E5%85%B3%E8%81%94-FTP-Server/</url>
    <content><![CDATA[<p>本文主要说明，如何在 windows server 中建立 web site，并关联 ftp 服务；最终达到的效果是，可以通过 https 链接访问 ftp 服务的所有内容；</p>
<p>系统环境：window server 2019</p>
<span id="more"></span>

<h1 id="1、开启系统必备的服务组件"><a href="#1、开启系统必备的服务组件" class="headerlink" title="1、开启系统必备的服务组件"></a>1、开启系统必备的服务组件</h1><h1 id="2、新建-SSL-证书"><a href="#2、新建-SSL-证书" class="headerlink" title="2、新建 SSL 证书"></a>2、新建 SSL 证书</h1><h1 id="3、建立-web-site-并关联-FTP-Server"><a href="#3、建立-web-site-并关联-FTP-Server" class="headerlink" title="3、建立 web site 并关联 FTP Server"></a>3、建立 web site 并关联 FTP Server</h1><h1 id="4、其他设置"><a href="#4、其他设置" class="headerlink" title="4、其他设置"></a>4、其他设置</h1><h2 id="4-1-ftp-服务直通网络位置"><a href="#4-1-ftp-服务直通网络位置" class="headerlink" title="4.1 ftp 服务直通网络位置"></a>4.1 ftp 服务直通网络位置</h2><h2 id="4-2-web-site-开启浏览文件目录结构的功能"><a href="#4-2-web-site-开启浏览文件目录结构的功能" class="headerlink" title="4.2 web site 开启浏览文件目录结构的功能"></a>4.2 web site 开启浏览文件目录结构的功能</h2><h2 id="4-3-web-site-绑定-https-访问"><a href="#4-3-web-site-绑定-https-访问" class="headerlink" title="4.3 web site 绑定 https 访问"></a>4.3 web site 绑定 https 访问</h2><p>参考资料：</p>
]]></content>
      <categories>
        <category>windwos</category>
        <category>web site</category>
        <category>ftp server</category>
      </categories>
      <tags>
        <tag>windwos</tag>
        <tag>web site</tag>
        <tag>ftp</tag>
      </tags>
  </entry>
  <entry>
    <title>Microsoft.Toolkit.Mvvm 使用记录</title>
    <url>/2022/03/16/Microsoft-Toolkit-Mvvm-%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="1-Microsoft-Toolkit-Mvvm-介绍"><a href="#1-Microsoft-Toolkit-Mvvm-介绍" class="headerlink" title="1. Microsoft.Toolkit.Mvvm 介绍"></a>1. Microsoft.Toolkit.Mvvm 介绍</h1><blockquote>
<p>模型-视图-视图模型 (MVVM) 是用于解耦 UI 代码和非 UI 代码的 UI 体系结构设计模式。 借助 MVVM，可以在 XAML 中以声明方式定义 UI，并使用数据绑定标记将 UI 链接到包含数据和命令的其他层。</p>
</blockquote>
<p>MVVM 最早是 Microsoft 提出来的，但是官方一直没有提供框架；很多人会说 Prism 框架，但是 Prism 已经出走了，而且比较臃肿；至于 MVVMLight 也很久没有更新了，直到 2020 年 Windows Community Toolkit  开源了一套 MVVM 框架 Microsoft.Toolkit.Mvvm。</p>
<span id="more"></span>

<p>Windows Community Toolkit  除了提供开源框架，也贴心的在文档中提供了，基本的使用案例，以及从其他 MVVM 框架迁移到  Microsoft.Toolkit.Mvvm 框架的说明文档。</p>
<p>官方文档：<a href="https://docs.microsoft.com/zh-cn/windows/communitytoolkit/mvvm/introduction">Introduction to the MVVM Toolkit - Windows Community Toolkit | Microsoft Docs</a></p>
<p>[<a href="https://www.cnblogs.com/dino623/p/building_MVVM_programs_using_MVVM_Toolkit.html">WPF] 使用 MVVM Toolkit 构建 MVVM 程序 - dino.c - 博客园 (cnblogs.com)</a></p>
<p>MVVM Toolkit 延续了 MVVMLight 的风格，是一个轻量级的组件，而且它基于 .NET Standard 2.0，可用于UWP, WinForms, WPF, Xamarin, Uno 等多个平台。相比它的前身 MVVMLight，它有以下特点：</p>
<ul>
<li>更高：版本号更高，一出手就是 7.0。</li>
<li>更快：速度更快，MVVM Toolkit 从一开始就以高性能为实现目标。</li>
<li>更强：后台更强，MVVM Toolkit 的全称是 ‘Microsoft.Toolkit.Mvvm’，根正苗红。</li>
</ul>
<h1 id="2-各个组件说明"><a href="#2-各个组件说明" class="headerlink" title="2. 各个组件说明"></a>2. 各个组件说明</h1><p>前面说到 MVVM Toolkit 延续了 MVVMLight 的风格，因此他们大部分的组件都是相同的</p>
<h2 id="2-1-ObservableObject"><a href="#2-1-ObservableObject" class="headerlink" title="2.1 ObservableObject"></a>2.1 ObservableObject</h2><p>ObservableObject 实现了 <a href="https://docs.microsoft.com/dotnet/api/system.componentmodel.inotifypropertychanged"><code>INotifyPropertyChanged</code></a> 和<a href="https://docs.microsoft.com/dotnet/api/system.componentmodel.inotifypropertychanging"><code>INotifyPropertyChanging</code></a>，并触发 <code>PropertyChanged</code> 和 <code>PropertyChanging</code> 事件。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span> : <span class="title">ObservableObject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> =&gt; name;</span><br><span class="line">        <span class="keyword">set</span> =&gt; SetProperty(<span class="keyword">ref</span> name, <span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这段示例代码中，如果 name 和 value 的值不同，首先触发 <code>PropertyChanging</code> 事件，然后触发 <code>PropertyChanged</code>。</p>
<h2 id="2-2-RelayCommand"><a href="#2-2-RelayCommand" class="headerlink" title="2.2 RelayCommand"></a>2.2 RelayCommand</h2><p><code>RelayCommand</code> 和 <code>RelayCommand&lt;T&gt;</code> 实现了 <code>ICommand</code> 接口，<code>INotifyPropertyChanged</code> 和 <code>ICommand</code> 是 MVVM 模式的基础。下面的代码使用 <code>ObservableObject</code> 和 <code>RelayCommand</code> 展示一个基本的 ViewModel：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyViewModel</span> : <span class="title">ObservableObject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyViewModel</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        IncrementCounterCommand = <span class="keyword">new</span> RelayCommand(IncrementCounter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> counter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Counter</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> =&gt; counter;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">set</span> =&gt; SetProperty(<span class="keyword">ref</span> counter, <span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ICommand IncrementCounterCommand &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IncrementCounter</span>(<span class="params"></span>)</span> =&gt; Counter++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Page</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x:Class</span>=<span class="string">&quot;MyApp.Views.MyPage&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:viewModels</span>=<span class="string">&quot;using:MyApp.ViewModels&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Page.DataContext</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">viewModels:MyViewModel</span> <span class="attr">x:Name</span>=<span class="string">&quot;ViewModel&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Page.DataContext</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Spacing</span>=<span class="string">&quot;8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;x:Bind ViewModel.Counter, Mode=OneWay&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Content</span>=<span class="string">&quot;Click me!&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">Command</span>=<span class="string">&quot;&#123;x:Bind ViewModel.IncrementCounterCommand&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Page</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这段示例里 <code>IncrementCounterCommand</code> 包装了 <code>IncrementCounter</code> 函数提供给 Button 绑定。<code>IncrementCounter</code> 函数更改 <code>Counter</code> 的值并通过 <code>PropertyChanged</code> 事件通知绑定的 TextBlock。</p>
<h2 id="2-3-AsyncRelayCommand"><a href="#2-3-AsyncRelayCommand" class="headerlink" title="2.3 AsyncRelayCommand"></a>2.3 AsyncRelayCommand</h2><p><code>AsyncRelayCommand</code> 和 <code>AsyncRelayCommand&lt;T&gt;</code> 也实现了 <code>ICommand</code>，不过它们支持异步操作，提供的 <code>ExecutionTask</code> 和 <code>IsRunning</code> 两个属性对监视任务运行状态十分有用。</p>
<p>例如这个 ViewModel：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyViewModel</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DownloadTextCommand = <span class="keyword">new</span> AsyncRelayCommand(DownloadTextAsync);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> IAsyncRelayCommand DownloadTextCommand &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">DownloadTextAsync</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> Task.Delay(<span class="number">3000</span>); <span class="comment">// Simulate a web request</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用相关的 UI 代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Page.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">converters:TaskResultConverter</span> <span class="attr">x:Key</span>=<span class="string">&quot;TaskResultConverter&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Page.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Spacing</span>=<span class="string">&quot;8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextBlock</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Run</span> <span class="attr">Text</span>=<span class="string">&quot;Task status:&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Run</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;x:Bind ViewModel.DownloadTextCommand.ExecutionTask.Status, Mode=OneWay&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">LineBreak</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Run</span> <span class="attr">Text</span>=<span class="string">&quot;Result:&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Run</span> <span class="attr">Text</span>=<span class="string">&quot;&#123;x:Bind ViewModel.DownloadTextCommand.ExecutionTask, Converter=&#123;StaticResource TaskResultConverter&#125;, Mode=OneWay&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Content</span>=<span class="string">&quot;Click me!&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Command</span>=<span class="string">&quot;&#123;x:Bind ViewModel.DownloadTextCommand&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">muxc:ProgressRing</span></span></span><br><span class="line"><span class="tag">        <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Left&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">IsActive</span>=<span class="string">&quot;&#123;x:Bind ViewModel.DownloadTextCommand.IsRunning, Mode=OneWay&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>点击 <code>Button</code> 后 <code>DownloadTextAsync</code> 开始运行，在 UI 上 TextBlock 和 ProgressRing 绑定到 <code>ExecutionTask</code> 和 <code>IsRunning</code> 并显示任务运行状态，最后通过 <code>TaskResultConverter</code> 显示任务结果。</p>
<p><a href="https://img2020.cnblogs.com/blog/38937/202108/38937-20210819221618229-510116488.gif"><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/38937-20210819221618229-510116488.gif" alt="img"></a></p>
<h2 id="2-4-Messenger"><a href="#2-4-Messenger" class="headerlink" title="2.4 Messenger"></a>2.4 Messenger</h2><p>对于主要目的是松耦合的 MVVM 框架，提供一个用于消息交换的系统十分有必要。MVVM Toolkit 中用于消息交换的核心是 <code>WeakReferenceMessenger</code> 类。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create a message</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LoggedInUserChangedMessage</span> : <span class="title">ValueChangedMessage</span>&lt;<span class="title">User</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoggedInUserChangedMessage</span>(<span class="params">User user</span>) : <span class="title">base</span>(<span class="params">user</span>)</span></span><br><span class="line">    &#123;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register a message in some module</span></span><br><span class="line">WeakReferenceMessenger.Default.Register&lt;LoggedInUserChangedMessage&gt;(<span class="keyword">this</span>, (r, m) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Handle the message here, with r being the recipient and m being the</span></span><br><span class="line">    <span class="comment">// input messenger. Using the recipient passed as input makes it so that</span></span><br><span class="line">    <span class="comment">// the lambda expression doesn&#x27;t capture &quot;this&quot;, improving performance.</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Send a message from some other module</span></span><br><span class="line">WeakReferenceMessenger.Default.Send(<span class="keyword">new</span> LoggedInUserChangedMessage(user));</span><br></pre></td></tr></table></figure>

<p>正如这段代码所示，<code>WeakReferenceMessenger</code> 主要通过 <code>Register</code> 和 <code>Send</code> 进行信息交换，它的使用方式类似于 MVVMLight 的 messenger 类。MVVM Toolkit 另外还提供了一个 <code>StrongReferenceMessenger</code> 类，更多使用方法可以参考这篇 <a href="https://github.com/CommunityToolkit/MVVM-Samples/blob/master/docs/mvvm/Messenger.md">文档</a>。<code>Messenger</code> 功能强大且简单易用，但也由于误用会带来风险而引发了一些争议，有必要更详细地理解它的原理和用法以避免它带来的其它风险，这篇文章只是简单地介绍一下它的用法。</p>
<h2 id="2-5-ObservableRecipient"><a href="#2-5-ObservableRecipient" class="headerlink" title="2.5 ObservableRecipient"></a>2.5 ObservableRecipient</h2><p><code>ObservableRecipient</code> 继承了 <code>ObservableObject</code> 并支持从 <code>Messenger</code> 接收信息，可通过 <code>IsActive</code> 属性激活或停用。它可以用作 ViewModel 的基类，事实上它的作用基本上相遇于 MVVMLight 中的 [ViewModelBase](<a href="https://github.com/lbugnion/mvvmlight/blob/master/GalaSoft.MvvmLight/GalaSoft.MvvmLight">https://github.com/lbugnion/mvvmlight/blob/master/GalaSoft.MvvmLight/GalaSoft.MvvmLight</a> (PCL)/ViewModelBase.cs) ：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyViewModel</span> : <span class="title">ObservableRecipient</span>, <span class="title">IRecipient</span>&lt;<span class="title">LoggedInUserRequestMessage</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Receive</span>(<span class="params">LoggedInUserRequestMessage message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Handle the message here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-6-ViewModelLocator"><a href="#2-6-ViewModelLocator" class="headerlink" title="2.6 ViewModelLocator"></a>2.6 ViewModelLocator</h2><p>在 MVVMLight 中，很多人使用 ViewModelLocator，然后在 xaml 中 binding View 的 DataContext，但是到了 Microsoft.Toolkit.Mvvm 中，却没有默认提供，这里根据官方的 Ioc 迁移说明，给出一个 WPF 应用程序的 ViewModelLocator 的实现方式。</p>
<p>需要的 Package</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;Microsoft.Extensions.DependencyInjection&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;6.0.0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;Microsoft.Toolkit.Mvvm&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;7.1.2&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>ViewModelLocator.cs 代码文件如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Toolkit.Mvvm.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">ViewModelLocator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewModelLocator</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ConfigureServices();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Configures the services for the application.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> IServiceProvider <span class="title">ConfigureServices</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> services = <span class="keyword">new</span> ServiceCollection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Services</span></span><br><span class="line">        <span class="comment">// services.AddSingleton&lt;IContactsService, ContactsService&gt;();</span></span><br><span class="line">        <span class="comment">// services.AddSingleton&lt;IPhoneService, PhoneService&gt;();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Viewmodels</span></span><br><span class="line">        services.AddTransient&lt;MainViewModel&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> serviceProvider = services.BuildServiceProvider();</span><br><span class="line">        Ioc.Default.ConfigureServices(serviceProvider);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> serviceProvider;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> MainViewModel? MainVM &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> Ioc.Default.GetService&lt;MainViewModel&gt;(); &#125; &#125;</span><br><span class="line"></span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<p>App.xaml 添加以下资源</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">local:ViewModelLocator</span> <span class="attr">x:Key</span>=<span class="string">&quot;Locator&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Application.Resources</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 View xaml 中的使用方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Class</span>=<span class="string">&quot;Test.MainWindow&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">DataContext</span>=<span class="string">&quot;&#123;Binding Source=&#123;StaticResource Locator&#125;, Path=MainVM&#125;&quot;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="attr">Window</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样即可实现 MVVMLight 中 Locator 的效果。</p>
<h1 id="3-The-性能"><a href="#3-The-性能" class="headerlink" title="3. The 性能"></a>3. The 性能</h1><p><a href="https://img2020.cnblogs.com/blog/38937/202108/38937-20210819221730002-1263673884.png"><img src="https://cdn.jsdelivr.net/gh/buctllx/picture_bed/img/38937-20210819221730002-1263673884.png" alt="img"></a></p>
<p>MVVM Toolkit 在开发过程中为了追求卓越的性能做了很多努力，例如提供一个 <code>StrongReferenceMessenger</code> 类，性能如上图所示地有了大幅提升。又例如下面这篇文章所介绍的：</p>
<p><a href="https://devblogs.microsoft.com/ifdef-windows/mvvm-toolkit-preview-3-the-journey-of-an-api/">MVVM Toolkit Preview 3 &amp; The Journey of an API</a></p>
<p>有兴趣的话可以通过源码详细了解一下。</p>
]]></content>
      <categories>
        <category>工具</category>
        <category>MVVM</category>
      </categories>
      <tags>
        <tag>MVVM</tag>
      </tags>
  </entry>
</search>
